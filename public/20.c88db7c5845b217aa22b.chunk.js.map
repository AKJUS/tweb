{"version":3,"sources":["webpack:///./src/lib/mtproto/passwordManager.ts","webpack:///./src/pages/loginPage.ts","webpack:///./src/components/passwordInputField.ts","webpack:///./src/pages/pagePassword.ts","webpack:///./src/components/monkeys/password.ts"],"names":["passwordManager","invokeApi","then","result","settings","this","getState","state","currentHashPromise","newHashPromise","params","password","new_settings","_","hint","email","currentPassword","computeSRP","Promise","resolve","newAlgo","new_algo","salt1","Uint8Array","length","randomize","set","newPassword","all","hashes","new_password_hash","options","inputCheckPassword","auth","saveApiUser","user","setUserAuth","id","code","LoginPage","element","document","body","querySelector","className","container","createElement","imageDiv","title","titleLangKey","append","subtitle","subtitleLangKey","withInputWrapper","inputWrapper","PasswordInputField","super","plainText","passwordVisible","onVisibilityClick","e","toggleVisible","classList","toggle","input","type","onVisibilityClickAdditional","setAttribute","autocomplete","stealthy","add","tabIndex","parentElement","prepend","insertBefore","cloneNode","nextSibling","addEventListener","passwordInput","page","btnNext","btnNextI18n","IntlElement","key","passwordInputField","label","name","getStateInterval","window","setInterval","_state","wrapEmojiText","setLabel","onSubmit","value","update","preloader","check","response","clearInterval","m","default","mount","monkey","remove","removeAttribute","catch","err","select","size","isMobile","load","focus","pushToState","PasswordMonkey","needFrame","loadPromise","loadAnimationFromURL","loop","autoplay","width","height","noCache","_animation","animation","currentFrame","direction","setSpeed","pause","setDirection","curFrame","play","waitForFirstFrame"],"mappings":"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","file":"20.c88db7c5845b217aa22b.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport type { AccountPassword, AccountPasswordInputSettings, AccountUpdatePasswordSettings, InputCheckPasswordSRP, PasswordKdfAlgo } from '../../layer';\nimport type CryptoWorkerMethods from '../crypto/crypto_methods';\nimport { MOUNT_CLASS_TO } from '../../config/debug';\nimport appUsersManager from '../appManagers/appUsersManager';\nimport apiManager from './mtprotoworker';\n//import { computeCheck } from \"../crypto/srp\";\n\nexport class PasswordManager {\n  public getState(): Promise<AccountPassword> {\n    return apiManager.invokeApi('account.getPassword').then((result) => {\n      return result;\n    });\n  }\n\n  public updateSettings(settings: {\n    hint?: string,\n    email?: string,\n    newPassword?: string,\n    currentPassword?: string\n  } = {}) {\n    //state = Object.assign({}, state);\n    //state.new_algo = Object.assign({}, state.new_algo);\n\n    return this.getState().then(state => {\n      let currentHashPromise: ReturnType<CryptoWorkerMethods['computeSRP']>;\n      let newHashPromise: Promise<Uint8Array>;\n      const params: AccountUpdatePasswordSettings = {\n        password: null,\n        new_settings: {\n          _: 'account.passwordInputSettings',\n          hint: settings.hint,\n          email: settings.email\n        }\n      };\n  \n      if(settings.currentPassword) {\n        currentHashPromise = apiManager.computeSRP(settings.currentPassword, state);\n      } else {\n        currentHashPromise = Promise.resolve({\n          _: 'inputCheckPasswordEmpty'\n        });\n      }\n  \n      // * https://core.telegram.org/api/srp#setting-a-new-2fa-password, but still there is a mistake, TDesktop passes 'new_algo' everytime\n      const newAlgo = state.new_algo as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\n      const salt1 = new Uint8Array(newAlgo.salt1.length + 32);\n      salt1.randomize();\n      salt1.set(newAlgo.salt1, 0);\n      newAlgo.salt1 = salt1;\n  \n      if(settings.newPassword) {\n        newHashPromise = apiManager.computeSRP(settings.newPassword, state, true) as any;\n      } else {\n        newHashPromise = Promise.resolve(new Uint8Array());\n      }\n  \n      return Promise.all([currentHashPromise, newHashPromise]).then((hashes) => {\n        params.password = hashes[0];\n        params.new_settings.new_algo = newAlgo;\n        params.new_settings.new_password_hash = hashes[1];\n  \n        return apiManager.invokeApi('account.updatePasswordSettings', params);\n      });\n    });\n  }\n\n  public check(password: string, state: AccountPassword, options: any = {}) {\n    return apiManager.computeSRP(password, state).then((inputCheckPassword) => {\n      //console.log('SRP', inputCheckPassword);\n      return apiManager.invokeApi('auth.checkPassword', {\n        password: inputCheckPassword\n      }, options).then(auth => {\n        if(auth._ === 'auth.authorization') {\n          appUsersManager.saveApiUser(auth.user);\n          apiManager.setUserAuth(auth.user.id);\n        }\n\n        return auth;\n      });\n    });\n  }\n\n  public confirmPasswordEmail(code: string) {\n    return apiManager.invokeApi('account.confirmPasswordEmail', {code});\n  }\n\n  public resendPasswordEmail() {\n    return apiManager.invokeApi('account.resendPasswordEmail');\n  }\n\n  public cancelPasswordEmail() {\n    return apiManager.invokeApi('account.cancelPasswordEmail');\n  }\n\n  /* public requestRecovery(options: any = {}) {\n    return apiManager.invokeApi('auth.requestPasswordRecovery', {}, options);\n  }\n\n  public recover(code: any, options: any = {}) {\n    return apiManager.invokeApi('auth.recoverPassword', {\n      code\n    }, options);\n  } */\n}\n\nconst passwordManager = new PasswordManager();\nMOUNT_CLASS_TO.passwordManager = passwordManager;\nexport default passwordManager;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { LangPackKey, i18n } from \"../lib/langPack\";\n\nexport default class LoginPage {\n  public element: HTMLElement;\n  public container: HTMLElement;\n  public imageDiv: HTMLElement;\n  public inputWrapper: HTMLElement;\n  public title: HTMLElement;\n  public subtitle: HTMLParagraphElement;\n\n  constructor(options: {\n    className: string,\n    withInputWrapper?: boolean,\n    titleLangKey?: LangPackKey,\n    subtitleLangKey?: LangPackKey,\n  }) {\n    this.element = document.body.querySelector('.' + options.className) as HTMLDivElement;\n    //this.element = document.createElement('div');\n    //this.element.className = 'page-' + options.className;\n\n    this.container = document.createElement('div');\n    this.container.className = 'container center-align';\n\n    this.imageDiv = document.createElement('div');\n    this.imageDiv.className = 'auth-image';\n\n    this.title = document.createElement('h4');\n    if(options.titleLangKey) {\n      this.title.append(i18n(options.titleLangKey));\n    }\n\n    this.subtitle = document.createElement('p');\n    this.subtitle.className = 'subtitle';\n    if(options.subtitleLangKey) {\n      this.subtitle.append(i18n(options.subtitleLangKey));\n    }\n    \n    this.container.append(this.imageDiv, this.title, this.subtitle);\n\n    if(options.withInputWrapper) {\n      this.inputWrapper = document.createElement('div');\n      this.inputWrapper.className = 'input-wrapper';\n      this.container.append(this.inputWrapper);\n    }\n\n    this.element.append(this.container);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { cancelEvent } from \"../helpers/dom/cancelEvent\";\nimport InputField, { InputFieldOptions } from \"./inputField\";\n\nexport default class PasswordInputField extends InputField {\n  public passwordVisible = false;\n  public toggleVisible: HTMLElement;\n  public onVisibilityClickAdditional: () => void;\n\n  constructor(options: InputFieldOptions = {}) {\n    super({\n      plainText: true,\n      ...options\n    });\n\n    const input = this.input as HTMLInputElement;\n    input.type = 'password';\n    input.setAttribute('required', '');\n    input.autocomplete = 'off';\n    /* input.readOnly = true;\n\n    input.addEventListener('focus', () => {\n      input.removeAttribute('readonly');\n    }, {once: true}); */\n\n    // * https://stackoverflow.com/a/35949954/6758968\n    const stealthy = document.createElement('input');\n    stealthy.classList.add('stealthy');\n    stealthy.tabIndex = -1;\n    stealthy.type = 'password';\n    input.parentElement.prepend(stealthy);\n    input.parentElement.insertBefore(stealthy.cloneNode(), input.nextSibling);\n\n    const toggleVisible = this.toggleVisible = document.createElement('span');\n    toggleVisible.classList.add('toggle-visible', 'tgico');\n\n    this.container.classList.add('input-field-password');\n    this.container.append(toggleVisible);\n\n    toggleVisible.addEventListener('click', this.onVisibilityClick);\n    toggleVisible.addEventListener('touchend', this.onVisibilityClick);\n  }\n\n  public onVisibilityClick = (e: Event) => {\n    cancelEvent(e);\n    this.passwordVisible = !this.passwordVisible;\n\n    this.toggleVisible.classList.toggle('eye-hidden', this.passwordVisible);\n    (this.input as HTMLInputElement).type = this.passwordVisible ? 'text' : 'password';\n    this.onVisibilityClickAdditional && this.onVisibilityClickAdditional();\n  };\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { putPreloader } from '../components/misc';\nimport mediaSizes from '../helpers/mediaSizes';\nimport { AccountPassword } from '../layer';\nimport appStateManager from '../lib/appManagers/appStateManager';\nimport passwordManager from '../lib/mtproto/passwordManager';\nimport Page from './page';\nimport Button from '../components/button';\nimport PasswordInputField from '../components/passwordInputField';\nimport PasswordMonkey from '../components/monkeys/password';\nimport RichTextProcessor from '../lib/richtextprocessor';\nimport I18n from '../lib/langPack';\nimport LoginPage from './loginPage';\nimport { cancelEvent } from '../helpers/dom/cancelEvent';\nimport { attachClickEvent } from '../helpers/dom/clickEvent';\nimport htmlToSpan from '../helpers/dom/htmlToSpan';\nimport replaceContent from '../helpers/dom/replaceContent';\nimport toggleDisability from '../helpers/dom/toggleDisability';\n\nconst TEST = false;\nlet passwordInput: HTMLInputElement;\n\nlet onFirstMount = (): Promise<any> => {\n  const page = new LoginPage({\n    className: 'page-password',\n    withInputWrapper: true,\n    titleLangKey: 'Login.Password.Title',\n    subtitleLangKey: 'Login.Password.Subtitle'\n  });\n\n  const btnNext = Button('btn-primary btn-color-primary');\n  const btnNextI18n = new I18n.IntlElement({key: 'Login.Next'});\n\n  btnNext.append(btnNextI18n.element);\n\n  const passwordInputField = new PasswordInputField({\n    label: 'LoginPassword',\n    name: 'password'\n  });\n\n  passwordInput = passwordInputField.input as HTMLInputElement;\n\n  page.inputWrapper.append(passwordInputField.container, btnNext);\n\n  let getStateInterval: number;\n\n  let getState = () => {\n    // * just to check session relevance\n    if(!getStateInterval) {\n      getStateInterval = window.setInterval(getState, 10e3);\n    }\n\n    return !TEST && passwordManager.getState().then(_state => {\n      state = _state;\n\n      if(state.hint) {\n        replaceContent(passwordInputField.label, htmlToSpan(RichTextProcessor.wrapEmojiText(state.hint)));\n      } else {\n        passwordInputField.setLabel();\n      }\n    });\n  };\n\n  let state: AccountPassword;\n  \n  const onSubmit = (e?: Event) => {\n    if(e) {\n      cancelEvent(e);\n    }\n\n    if(!passwordInput.value.length) {\n      passwordInput.classList.add('error');\n      return;\n    }\n\n    const toggle = toggleDisability([passwordInput, btnNext], true);\n    let value = passwordInput.value;\n\n    btnNextI18n.update({key: 'PleaseWait'});\n    const preloader = putPreloader(btnNext);\n\n    passwordManager.check(value, state).then((response) => {\n      //console.log('passwordManager response:', response);\n        \n      switch(response._) {\n        case 'auth.authorization':\n          clearInterval(getStateInterval);\n          import('./pageIm').then(m => {\n            m.default.mount();\n          });\n          if(monkey) monkey.remove();\n          break;\n        default:\n          btnNext.removeAttribute('disabled');\n          btnNextI18n.update({key: response._ as any});\n          preloader.remove();\n          break;\n      }\n    }).catch((err: any) => {\n      toggle();\n      passwordInputField.input.classList.add('error');\n      \n      switch(err.type) {\n        default:\n          //btnNext.innerText = err.type;\n          btnNextI18n.update({key: 'PASSWORD_HASH_INVALID'});\n          passwordInput.select();\n          break;\n      }\n\n      preloader.remove();\n  \n      getState();\n    });\n  };\n  \n  attachClickEvent(btnNext, onSubmit);\n\n  passwordInput.addEventListener('keypress', function(this, e) {\n    this.classList.remove('error');\n    btnNextI18n.update({key: 'Login.Next'});\n\n    if(e.key === 'Enter') {\n      return onSubmit();\n    }\n  });\n\n  const size = mediaSizes.isMobile ? 100 : 166;\n  const monkey = new PasswordMonkey(passwordInputField, size);\n  page.imageDiv.append(monkey.container);\n  return Promise.all([\n    monkey.load(),\n    getState()\n  ]);\n};\n\nconst page = new Page('page-password', true, onFirstMount, null, () => {\n  //if(!isAppleMobile) {\n    passwordInput.focus();\n  //}\n\n  appStateManager.pushToState('authState', {_: 'authStatePassword'});\n});\n\nexport default page;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport lottieLoader, { RLottiePlayer } from \"../../lib/lottieLoader\";\nimport PasswordInputField from \"../passwordInputField\";\n\nexport default class PasswordMonkey {\n  public container: HTMLElement;\n  public animation: RLottiePlayer;\n  public needFrame = 0;\n  protected loadPromise: Promise<void>;\n\n  constructor(protected passwordInputField: PasswordInputField, protected size: number) {\n    this.container = document.createElement('div');\n    this.container.classList.add('media-sticker-wrapper');\n  }\n\n  public load() {\n    if(this.loadPromise) return this.loadPromise;\n    return this.loadPromise = lottieLoader.loadAnimationFromURL({\n      container: this.container,\n      loop: false,\n      autoplay: false,\n      width: this.size,\n      height: this.size,\n      noCache: true\n    //}, 'assets/img/TwoFactorSetupMonkeyClose.tgs').then(_animation => {\n    }, 'assets/img/TwoFactorSetupMonkeyPeek.tgs').then(_animation => {\n      //return;\n      this.animation = _animation;\n      this.animation.addEventListener('enterFrame', currentFrame => {\n        //console.log('enterFrame', currentFrame, this.needFrame);\n\n        if((this.animation.direction === 1 && currentFrame >= this.needFrame) ||\n          (this.animation.direction === -1 && currentFrame <= this.needFrame)) {\n            this.animation.setSpeed(1);\n            this.animation.pause();\n        } \n      });\n\n      this.passwordInputField.onVisibilityClickAdditional = () => {\n        if(this.passwordInputField.passwordVisible) {\n          this.animation.setDirection(1);\n          this.animation.curFrame = 0;\n          this.needFrame = 16;\n          this.animation.play();\n        } else {\n          this.animation.setDirection(-1);\n          this.animation.curFrame = 16;\n          this.needFrame = 0;\n          this.animation.play();\n        }\n      };\n\n      return lottieLoader.waitForFirstFrame(_animation);\n    });\n  }\n\n  public remove() {\n    if(this.animation) {\n      this.animation.remove();\n    }\n  }\n}\n"],"sourceRoot":""}