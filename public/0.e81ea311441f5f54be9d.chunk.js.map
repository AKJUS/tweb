{"version":3,"sources":["webpack:///./src/config/debug.ts","webpack:///./src/lib/rootScope.ts","webpack:///./src/lib/idb.ts","webpack:///./src/helpers/schedulers.ts","webpack:///./src/helpers/object.ts","webpack:///./src/lib/logger.ts","webpack:///./src/helpers/cancellablePromise.ts","webpack:///./src/helpers/eventListenerBase.ts","webpack:///./src/helpers/context.ts","webpack:///./src/lib/localStorage.ts","webpack:///./src/lib/sessionStorage.ts","webpack:///./src/config/modes.ts","webpack:///./src/lib/stateStorage.ts","webpack:///./src/lib/storage.ts","webpack:///./src/config/databases/state.ts","webpack:///./src/helpers/blob.ts"],"names":["DEBUG","debug","MOUNT_CLASS_TO","window","self","RootScope","super","_overlayIsActive","myId","idle","isIDLE","deactivated","focusPromise","Promise","resolve","focusResolve","connectionStatus","peerId","this","addEventListener","e","id","status","name","darkModeMediaQuery","matchMedia","checkDarkMode","systemTheme","matches","dispatchEvent","setTheme","addListener","err","isNight","getTheme","colorScheme","document","head","querySelector","setAttribute","documentElement","classList","toggle","value","settings","theme","themes","find","t","rootScope","IDBStorage","db","storeName","storageIsAvailable","test","log","openDatabase","STORAGES","push","forEach","storage","onclose","close","closeDatabases","storages","promises","Array","from","Set","map","dbName","reject","deleteRequest","indexedDB","deleteDatabase","onerror","onsuccess","all","createNew","openDbPromise","request","open","version","error","message","finished","setTimeout","type","event","result","calledNew","onabort","transaction","target","onversionchange","onupgradeneeded","warn","oldVersion","newVersion","stores","store","objectStoreNames","contains","os","createObjectStore","indexes","length","index","createIndex","indexName","keyPath","objectParameters","entryName","isArray","concat","getObjectStore","objectStore","delete","clear","idx","put","fileName","blob","Blob","save","get","mode","perf","performance","now","then","clearTimeout","timeout","oncomplete","results","r","requests","getAll","debounce","fn","ms","shouldRunFirst","shouldRunLast","waitingTimeout","args","throttle","isPending","interval","_args","setInterval","clearInterval","pause","fastRafCallbacks","fastRaf","callback","requestAnimationFrame","currentCallbacks","undefined","cb","doubleRaf","copy","obj","Date","getTime","el","clonedObj","constructor","prop","hasOwnProperty","deepEqual","x","y","ok","Object","keys","tx","every","key","defineNotNumerableProperties","names","props","writable","configurable","out","defineProperties","getObjectKeysAndSort","object","sort","ids","i","a","b","safeReplaceObject","wasObject","newObject","safeReplaceArrayInObject","v","isObject","getDeepProperty","splitted","split","o","setDeepProperty","slice","join","pop","validateInitObject","initObject","currentObject","onReplace","previousKey","safeAssign","fromObject","LogTypes","LOG_LEVELS","None","Error","Warn","Log","Debug","_logTimer","dT","toFixed","logger","prefix","console","info","trace","setPrefix","_prefix","setLevel","level","reduce","acc","deferredPromise","deferredHelper","isFulfilled","isRejected","notify","notifyAll","lastNotify","listeners","addNotifyListener","deferred","finally","cancel","assign","EventListenerBase","reuseResults","_constructor","listenerResults","once","findAndSplice","l","arr","listener","findIndex","removeEventListener","isWebWorker","WorkerGlobalScope","isServiceWorker","ServiceWorkerGlobalScope","isWorker","notifyServiceWorker","clients","matchAll","includeUncontrolled","postMessage","notifyWorker","noop","notifySomeone","bind","cache","useStorage","useCache","localStorage","getItem","JSON","parse","onlyLocal","stringified","stringify","setItem","saveLocal","removeItem","enabled","set","taskId","tasks","payload","prototype","call","apply","proxy","sessionStorage","appStorage","Modes","location","search","indexOf","http","ssl","multipleConnections","asServiceWorker","stateStorage","AppStorage","getPromises","Map","keysToSet","saveDeferred","keysToDelete","deleteDeferred","saveThrottled","size","values","deleteThrottled","getThrottled","includes","getFromCache","p","catch","setToCache","add","deleteAll","readBlobAsText","reader","FileReader","srcElement","readAsText","blobConstruct","blobParts","mimeType","safeMimeType","blobSafeMimeType","bb","BlobBuilder","blobPart","append","getBlob"],"mappings":"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","file":"0.e81ea311441f5f54be9d.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport Modes from \"./modes\";\n\nexport const DEBUG = process.env.NODE_ENV !== 'production' || Modes.debug;\nconst ctx: any = typeof(window) !== 'undefined' ? window : self;\nexport const MOUNT_CLASS_TO: any = DEBUG || true/*  && false */ ? ctx : {};\nexport default DEBUG;\n\n//let m = DEBUG;\n/* if(!DEBUG) {\n  ctx.sandpitTurtle = () => {\n    //if(!m) {\n      for(let i in MOUNT_CLASS_TO) {\n        ctx[i] = MOUNT_CLASS_TO[i];\n      }\n      //m = true;\n    //}\n  \n    //DEBUG = !DEBUG;\n  };\n} */\n\n/* export const superDebug = (object: any, key: string) => {\n  var d = object[key];\n  var beforeStr = '', afterStr = '';\n  for(var r of d) {\n    beforeStr += r.before.hex + '\\n';\n    afterStr += r.after.hex + '\\n';\n  }\n\n  beforeStr = beforeStr.trim();\n  afterStr = afterStr.trim();\n  //var beforeStr = d.map(r => r.before.hex).join('\\n');\n  //var afterStr = d.map(r => r.after.hex).join('\\n');\n\n  var dada = (name: string, str: string) => {\n    var a = document.createElement('a');\n    a.target = '_blank';\n    a.download = name + '.txt';\n    a.href = URL.createObjectURL(new Blob([str], {\n      type: 'text/plain'\n    }));\n    document.body.append(a);\n    a.click();\n  };\n\n  dada(key + '_' + 'before', beforeStr);\n  dada(key + '_' + 'after', afterStr);\n}\n\nMOUNT_CLASS_TO.superDebug = superDebug; */\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type { Message, StickerSet, Update, NotifyPeer, PeerNotifySettings, ConstructorDeclMap } from \"../layer\";\nimport type { MyDocument } from \"./appManagers/appDocsManager\";\nimport type { AppMessagesManager, Dialog, MessagesStorage } from \"./appManagers/appMessagesManager\";\nimport type { Poll, PollResults } from \"./appManagers/appPollsManager\";\nimport type { MyDialogFilter } from \"./storages/filters\";\nimport type { ConnectionStatusChange } from \"../types\";\nimport type { UserTyping } from \"./appManagers/appChatsManager\";\nimport type Chat from \"../components/chat/chat\";\nimport type { UserAuth } from \"./mtproto/mtproto_config\";\nimport type { State, Theme } from \"./appManagers/appStateManager\";\nimport type { MyDraftMessage } from \"./appManagers/appDraftsManager\";\nimport type { PushSubscriptionNotify } from \"./mtproto/webPushApiManager\";\nimport type { PushNotificationObject } from \"./serviceWorker/push\";\nimport EventListenerBase from \"../helpers/eventListenerBase\";\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\n\nexport type BroadcastEvents = {\n  'user_update': number,\n  'user_auth': UserAuth,\n  'peer_changed': number,\n  'peer_changing': Chat,\n  'peer_pinned_messages': {peerId: number, mids?: number[], pinned?: boolean, unpinAll?: true},\n  'peer_pinned_hidden': {peerId: number, maxId: number},\n  'peer_typings': {peerId: number, typings: UserTyping[]},\n  'peer_block': {peerId: number, blocked: boolean},\n  'peer_title_edit': number,\n  'peer_bio_edit': number,\n\n  'filter_delete': MyDialogFilter,\n  'filter_update': MyDialogFilter,\n  'filter_order': number[],\n  \n  'dialog_draft': {peerId: number, draft: MyDraftMessage | undefined, index: number},\n  'dialog_unread': {peerId: number},\n  'dialog_flush': {peerId: number},\n  'dialog_drop': {peerId: number, dialog?: Dialog},\n  'dialog_migrate': {migrateFrom: number, migrateTo: number},\n  //'dialog_top': Dialog,\n  'dialog_notify_settings': Dialog,\n  'dialogs_multiupdate': {[peerId: string]: Dialog},\n  'dialogs_archived_unread': {count: number},\n  \n  'history_append': {storage: MessagesStorage, peerId: number, mid: number},\n  'history_update': {storage: MessagesStorage, peerId: number, mid: number},\n  'history_reply_markup': {peerId: number},\n  'history_multiappend': AppMessagesManager['newMessagesToHandle'],\n  'history_delete': {peerId: number, msgs: {[mid: number]: true}},\n  'history_forbidden': number,\n  'history_reload': number,\n  'history_focus': {peerId: number, mid?: number},\n  //'history_request': void,\n  \n  'message_edit': {storage: MessagesStorage, peerId: number, mid: number},\n  'message_views': {mid: number, views: number},\n  'message_sent': {storage: MessagesStorage, tempId: number, tempMessage: any, mid: number},\n  'messages_pending': void,\n  'messages_read': void,\n  'messages_downloaded': {peerId: number, mids: number[]},\n  'messages_media_read': {peerId: number, mids: number[]},\n\n  'replies_updated': Message.message,\n\n  'scheduled_new': {peerId: number, mid: number},\n  'scheduled_delete': {peerId: number, mids: number[]},\n\n  'album_edit': {peerId: number, groupId: string, deletedMids: number[]},\n\n  'stickers_installed': StickerSet.stickerSet,\n  'stickers_deleted': StickerSet.stickerSet,\n\n  'audio_play': {doc: MyDocument, mid: number, peerId: number},\n  'audio_pause': void,\n  \n  'state_cleared': void,\n  'state_synchronized': number | void,\n  'state_synchronizing': number | void,\n  \n  'contacts_update': number,\n  'avatar_update': number,\n  'chat_full_update': number,\n  'poll_update': {poll: Poll, results: PollResults},\n  'chat_update': number,\n  //'channel_settings': {channelId: number},\n  'webpage_updated': {id: string, msgs: number[]},\n\n  'download_progress': any,\n  'connection_status_change': ConnectionStatusChange,\n  'settings_updated': {key: string, value: any},\n  'draft_updated': {peerId: number, threadId: number, draft: MyDraftMessage | undefined},\n\n  'event-heavy-animation-start': void,\n  'event-heavy-animation-end': void,\n\n  'im_mount': void,\n  'im_tab_change': number,\n\n  'idle': boolean,\n\n  'overlay_toggle': boolean,\n\n  'background_change': void,\n\n  'privacy_update': Update.updatePrivacy,\n\n  'notify_settings': Update.updateNotifySettings,\n  'notify_peer_type_settings': {key: Exclude<NotifyPeer['_'], 'notifyPeer'>, settings: PeerNotifySettings},\n\n  'language_change': string,\n  \n  'theme_change': void,\n\n  'instance_activated': void,\n  'instance_deactivated': void,\n\n  'push_notification_click': PushNotificationObject,\n  'push_init': PushSubscriptionNotify,\n  'push_subscribe': PushSubscriptionNotify,\n  'push_unsubscribe': PushSubscriptionNotify,\n};\n\nexport class RootScope extends EventListenerBase<{\n  [name in Update['_']]: (update: ConstructorDeclMap[name]) => void\n} & {\n  [name in keyof BroadcastEvents]: (e: BroadcastEvents[name]) => void\n}> {\n  private _overlayIsActive: boolean = false;\n  public myId = 0;\n  public idle = {\n    isIDLE: true,\n    deactivated: false,\n    focusPromise: Promise.resolve(),\n    focusResolve: () => {}\n  };\n  public connectionStatus: {[name: string]: ConnectionStatusChange} = {};\n  public settings: State['settings'];\n  public peerId = 0;\n  public systemTheme: Theme['name'];\n\n  constructor() {\n    super();\n\n    this.addEventListener('peer_changed', (peerId) => {\n      this.peerId = peerId;\n    });\n\n    this.addEventListener('user_auth', (e) => {\n      this.myId = e.id;\n    });\n\n    this.addEventListener('connection_status_change', (e) => {\n      const status = e;\n      this.connectionStatus[e.name] = status;\n    });\n\n    this.addEventListener('idle', (isIDLE) => {\n      if(isIDLE) {\n        this.idle.focusPromise = new Promise((resolve) => {\n          this.idle.focusResolve = resolve;\n        });\n      } else {\n        this.idle.focusResolve();\n      }\n    });\n  }\n\n  public setThemeListener() {\n    try {\n      const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      const checkDarkMode = () => {\n        //const theme = this.getTheme();\n        this.systemTheme = darkModeMediaQuery.matches ? 'night' : 'day';\n        //const newTheme = this.getTheme();\n\n        if(this.myId) {\n          this.dispatchEvent('theme_change');\n        } else {\n          this.setTheme();\n        }\n      };\n\n      if('addEventListener' in darkModeMediaQuery) {\n        darkModeMediaQuery.addEventListener('change', checkDarkMode);\n      } else if('addListener' in darkModeMediaQuery) {\n        (darkModeMediaQuery as any).addListener(checkDarkMode);\n      }\n\n      checkDarkMode();\n    } catch(err) {\n\n    }\n  }\n\n  public setTheme() {\n    const isNight = this.getTheme().name === 'night';\n    const colorScheme = document.head.querySelector('[name=\"color-scheme\"]');\n    if(colorScheme) {\n      colorScheme.setAttribute('content', isNight ? 'dark' : 'light');\n    }\n\n    document.documentElement.classList.toggle('night', isNight);\n  }\n\n  get overlayIsActive() {\n    return this._overlayIsActive;\n  }\n\n  set overlayIsActive(value: boolean) {\n    this._overlayIsActive = value;\n    this.dispatchEvent('overlay_toggle', value);\n  }\n\n  public getTheme(name: Theme['name'] = this.settings.theme === 'system' ? this.systemTheme : this.settings.theme) {\n    return this.settings.themes.find(t => t.name === name);\n  }\n}\n\nconst rootScope = new RootScope();\nMOUNT_CLASS_TO.rootScope = rootScope;\nexport default rootScope;\n\n/* rootScope.addEventListener('album_edit', (e) => {\n  \n});\n\nrootScope.addEventListener<'album_edit'>('album_edit', (e) => {\n  \n}); */\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { Database } from '../config/databases';\nimport Modes from '../config/modes';\nimport { blobConstruct } from '../helpers/blob';\nimport { safeAssign } from '../helpers/object';\nimport { logger } from './logger';\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\n */\nexport type IDBIndex = {\n  indexName: string,\n  keyPath: string,\n  objectParameters: IDBIndexParameters\n};\n\nexport type IDBStore = {\n  name: string, \n  indexes?: IDBIndex[]\n};\n\nexport type IDBOptions = {\n  name?: string,\n  storeName: string,\n  stores?: IDBStore[],\n  version?: number\n};\n\nconst DEBUG = false;\n\nexport default class IDBStorage<T extends Database<any>> {\n  private static STORAGES: IDBStorage<Database<any>>[] = [];\n  private openDbPromise: Promise<IDBDatabase>;\n  private db: IDBDatabase;\n  private storageIsAvailable = true;\n\n  private log: ReturnType<typeof logger>;\n  \n  private name: string;\n  private version: number;\n  private stores: IDBStore[];\n  private storeName: string;\n\n  constructor(db: T, storeName: typeof db['stores'][0]['name']) {\n    safeAssign(this, db);\n\n    if(Modes.test) {\n      this.name += '_test';\n    }\n\n    this.storeName = storeName;\n\n    this.log = logger('IDB-' + this.storeName);\n\n    this.openDatabase(true);\n\n    IDBStorage.STORAGES.push(this);\n  }\n\n  public static closeDatabases() {\n    this.STORAGES.forEach(storage => {\n      const db = storage.db;\n      if(db) {\n        db.onclose = () => {};\n        db.close();\n      }\n    });\n  }\n\n  public static deleteDatabase() {\n    this.closeDatabases();\n\n    const storages = this.STORAGES;\n    const dbNames = Array.from(new Set(storages.map(storage => storage.name)));\n    const promises = dbNames.map(dbName => {\n      return new Promise<void>((resolve, reject) => {\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\n  \n        deleteRequest.onerror = () => {\n          reject();\n        };\n  \n        deleteRequest.onsuccess = () => {\n          resolve();\n        };\n      });\n    });\n\n    return Promise.all(promises);\n  }\n\n  public isAvailable() {\n    return this.storageIsAvailable;\n  }\n\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\n    if(this.openDbPromise && !createNew) {\n      return this.openDbPromise;\n    }\n\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\n      const os = db.createObjectStore(store.name);\n\n      if(store.indexes?.length) {\n        for(const index of store.indexes) {\n          os.createIndex(index.indexName, index.keyPath, index.objectParameters);\n        }\n      }\n    };\n\n    try {\n      var request = indexedDB.open(this.name, this.version);\n\n      if(!request) {\n        return Promise.reject();\n      }\n    } catch(error) {\n      this.log.error('error opening db', error.message)\n      this.storageIsAvailable = false;\n      return Promise.reject(error);\n    }\n\n    let finished = false;\n    setTimeout(() => {\n      if(!finished) {\n        request.onerror({type: 'IDB_CREATE_TIMEOUT'} as Event);\n      }\n    }, 3000);\n\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\n      request.onsuccess = (event) => {\n        finished = true;\n        const db = request.result;\n        let calledNew = false;\n\n        this.log('Opened');\n  \n        db.onerror = (error) => {\n          this.storageIsAvailable = false;\n          this.log.error('Error creating/accessing IndexedDB database', error);\n          reject(error);\n        };\n\n        db.onclose = (e) => {\n          this.log.error('closed:', e);\n          !calledNew && this.openDatabase();\n        };\n\n        db.onabort = (e) => {\n          this.log.error('abort:', e);\n          const transaction = e.target as IDBTransaction;\n          \n          this.openDatabase(calledNew = true);\n\n          if(transaction.onerror) {\n            transaction.onerror(e);\n          }\n\n          db.close();\n        };\n\n        db.onversionchange = (e) => {\n          this.log.error('onversionchange, lol?');\n        };\n\n        resolve(this.db = db);\n      };\n  \n      request.onerror = (event) => {\n        finished = true;\n        this.storageIsAvailable = false;\n        this.log.error('Error creating/accessing IndexedDB database', event);\n        reject(event);\n      };\n  \n      request.onupgradeneeded = (event) => {\n        finished = true;\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\n\n        // @ts-ignore\n        var db = event.target.result as IDBDatabase;\n        this.stores.forEach((store) => {\n          /* if(db.objectStoreNames.contains(store.name)) {\n            //if(event.oldVersion === 1) {\n              db.deleteObjectStore(store.name);\n            //}\n          } */\n    \n          if(!db.objectStoreNames.contains(store.name)) {\n            createObjectStore(db, store);\n          }\n        });\n      };\n    });\n  }\n\n  public delete(entryName: string | string[]): Promise<void> {\n    //return Promise.resolve();\n    if(!Array.isArray(entryName)) {\n      entryName = [].concat(entryName);\n    }\n\n    return this.getObjectStore('readwrite', (objectStore) => {\n      return (entryName as string[]).map((entryName) => objectStore.delete(entryName));\n    }, DEBUG ? 'delete: ' + entryName.join(', ') : '');\n  }\n\n  public deleteAll() {\n    return this.getObjectStore('readwrite', (objectStore) => objectStore.clear(), DEBUG ? 'deleteAll' : '');\n  }\n\n  public save(entryName: string | string[], value: any | any[]) {\n    // const handleError = (error: Error) => {\n    //   this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\n    //   if((!error || error.name === 'InvalidStateError')/*  && false */) {\n    //     setTimeout(() => {\n    //       this.save(entryName, value);\n    //     }, 2e3);\n    //   } else {\n    //     //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\n    //   }\n    // };\n\n    if(!Array.isArray(entryName)) {\n      entryName = [].concat(entryName);\n      value = [].concat(value);\n    }\n    \n    return this.getObjectStore('readwrite', (objectStore) => {\n      return (entryName as string[]).map((entryName, idx) => objectStore.put(value[idx], entryName));\n    }, DEBUG ? 'save: ' + entryName.join(', ') : '');\n  }\n\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\n    //return Promise.resolve(blobConstruct([blob]));\n    if(!(blob instanceof Blob)) {\n      blob = blobConstruct([blob]) as Blob;\n    }\n\n    return this.save(fileName, blob);\n  }\n\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\n      return Promise.reject();\n    }\n\n    if(!(blob instanceof Blob)) {\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\n      return this.storagePutB64String(db, fileName, address).then(() => {\n        return blob;\n      });\n    }\n\n    try {\n      var reader = new FileReader();\n    } catch (e) {\n      this.storageIsAvailable = false;\n      return Promise.reject();\n    }\n\n    let promise = new Promise<Blob>((resolve, reject) => {\n      reader.onloadend = () => {\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\n          resolve(blob);\n        }, reject);\n      }\n  \n      reader.onerror = reject;\n    });\n    \n\n    try {\n      reader.readAsDataURL(blob);\n    } catch (e) {\n      this.storageIsAvailable = false;\n      return Promise.reject();\n    }\n\n    return promise;\n  }\n\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\n    try {\n      var objectStore = db.transaction([this.storeName], 'readwrite')\n        .objectStore(this.storeName);\n      var request = objectStore.put(b64string, fileName);\n    } catch(error) {\n      this.storageIsAvailable = false;\n      return Promise.reject(error);\n    }\n\n    return new Promise((resolve, reject) => {\n      request.onsuccess = function(event) {\n        resolve();\n      };\n  \n      request.onerror = reject;\n    });\n  }\n\n  public getBlobSize(blob: any) {\n    return blob.size || blob.byteLength || blob.length;\n  } */\n\n  public get<T>(entryName: string[]): Promise<T[]>;\n  public get<T>(entryName: string): Promise<T>;\n  public get<T>(entryName: string | string[]): Promise<T> | Promise<T[]> {\n    //return Promise.reject();\n\n    if(!Array.isArray(entryName)) {\n      entryName = [].concat(entryName);\n    }\n\n    return this.getObjectStore<T>('readonly', (objectStore) => {\n      return (entryName as string[]).map((entryName) => objectStore.get(entryName));\n    }, DEBUG ? 'get: ' + entryName.join(', ') : '');\n  }\n\n  private getObjectStore<T>(mode: IDBTransactionMode, objectStore: (objectStore: IDBObjectStore) => IDBRequest | IDBRequest[], log?: string) {\n    let perf: number;\n\n    if(log) {\n      perf = performance.now();\n      this.log(log + ': start');\n    }\n\n    return this.openDatabase().then((db) => {\n      return new Promise<T>((resolve, reject) => {\n        const transaction = db.transaction([this.storeName], mode);\n\n        transaction.onerror = (e) => {\n          clearTimeout(timeout);\n          reject(transaction.error);\n        };\n  \n        transaction.oncomplete = (e) => {\n          clearTimeout(timeout);\n\n          if(log) {\n            this.log(log + ': end', performance.now() - perf);\n          }\n\n          const results = r.map(r => r.result);\n          resolve(isArray ? results : results[0]);\n        };\n  \n        const timeout = setTimeout(() => {\n          this.log.error('transaction not finished', transaction);\n        }, 10000);\n  \n        /* transaction.addEventListener('abort', (e) => {\n          //handleError();\n          this.log.error('IndexedDB: transaction abort!', transaction.error);\n        }); */\n  \n        const requests = objectStore(transaction.objectStore(this.storeName));\n\n        const isArray = Array.isArray(requests);\n        const r: IDBRequest[] = isArray ? requests : [].concat(requests) as any;\n\n        // const length = r.length;\n        // /* let left = length;\n\n        // const onRequestFinished = (error?: Error) => {\n        //   if(!--left) {\n        //     resolve(result);\n        //     clearTimeout(timeout);\n        //   }\n        // }; */\n\n        // for(let i = 0; i < length; ++i) {\n        //   const request = r[i];\n        //   request.onsuccess = () => {\n        //     onRequestFinished();\n        //   };\n\n        //   request.onerror = (e) => {\n        //     onRequestFinished(transaction.error);\n        //   };\n        // }\n      });\n    });\n  }\n\n  public getAll<T>(): Promise<T[]> {\n    return this.getObjectStore<T[]>('readonly', (objectStore) => objectStore.getAll(), DEBUG ? 'getAll' : '');\n  }\n\n  /* public getAllKeys(): Promise<Array<string>> {\n    console.time('getAllEntries');\n    return this.openDatabase().then((db) => {\n      var objectStore = db.transaction([this.storeName], 'readonly')\n        .objectStore(this.storeName);\n      var request = objectStore.getAllKeys();\n\n      return new Promise((resolve, reject) => {\n        request.onsuccess = function(event) {\n          // @ts-ignore\n          var result = event.target.result;\n          resolve(result);\n          console.timeEnd('getAllEntries');\n        }\n  \n        request.onerror = reject;\n      });\n    });\n  } */\n\n  /* public isFileExists(fileName: string): Promise<boolean> {\n    console.time('isFileExists');\n    return this.openDatabase().then((db) => {\n      var objectStore = db.transaction([this.storeName], 'readonly')\n        .objectStore(this.storeName);\n      var request = objectStore.openCursor(fileName);\n\n      return new Promise((resolve, reject) => {\n        request.onsuccess = function(event) {\n          // @ts-ignore\n          var cursor = event.target.result;\n          resolve(!!cursor);\n          console.timeEnd('isFileExists');\n        }\n  \n        request.onerror = reject;\n      });\n    });\n  } */\n\n  /* public getFileWriter(fileName: string, mimeType: string) {\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\n      return this.saveFile(fileName, blob);\n    });\n\n    return Promise.resolve(fakeWriter);\n  } */\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n// * Jolly Cobra's schedulers\nimport { AnyToVoidFunction, NoneToVoidFunction } from \"../types\";\n\n//type Scheduler = typeof requestAnimationFrame | typeof onTickEnd | typeof runNow;\n\nexport function debounce<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n  shouldRunLast = true,\n) {\n  let waitingTimeout: number | null = null;\n\n  return (...args: Parameters<F>) => {\n    if(waitingTimeout) {\n      clearTimeout(waitingTimeout);\n      waitingTimeout = null;\n    } else if(shouldRunFirst) {\n      // @ts-ignore\n      fn(...args);\n    }\n\n    waitingTimeout = setTimeout(() => {\n      if(shouldRunLast) {\n        // @ts-ignore\n        fn(...args);\n      }\n\n      waitingTimeout = null;\n    }, ms) as any;\n  };\n}\n\nexport function throttle<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n) {\n  let interval: number | null = null;\n  let isPending: boolean;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    isPending = true;\n    args = _args;\n\n    if(!interval) {\n      if(shouldRunFirst) {\n        isPending = false;\n        // @ts-ignore\n        fn(...args);\n      }\n\n      interval = setInterval(() => {\n        if (!isPending) {\n          clearInterval(interval!);\n          interval = null;\n          return;\n        }\n\n        isPending = false;\n        // @ts-ignore\n        fn(...args);\n      }, ms) as any;\n    }\n  };\n}\n\n/* export function throttleWithRaf<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRaf, fn);\n}\n\nexport function throttleWithTickEnd<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(onTickEnd, fn);\n}\n\nexport function throttleWithNow<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(runNow, fn);\n}\n\nexport function throttleWith<F extends AnyToVoidFunction>(schedulerFn: Scheduler, fn: F) {\n  let waiting = false;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    args = _args;\n\n    if (!waiting) {\n      waiting = true;\n\n      schedulerFn(() => {\n        waiting = false;\n        // @ts-ignore\n        fn(...args);\n      });\n    }\n  };\n}\n\nexport function onTickEnd(cb: NoneToVoidFunction) {\n  Promise.resolve().then(cb);\n}\n\nfunction runNow(fn: NoneToVoidFunction) {\n  fn();\n} */\n\nexport const pause = (ms: number) => new Promise<void>((resolve) => {\n  setTimeout(resolve, ms);\n});\n\nlet fastRafCallbacks: NoneToVoidFunction[] | undefined;\nexport function fastRaf(callback: NoneToVoidFunction) {\n  if(!fastRafCallbacks) {\n    fastRafCallbacks = [callback];\n\n    requestAnimationFrame(() => {\n      const currentCallbacks = fastRafCallbacks!;\n      fastRafCallbacks = undefined;\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else {\n    fastRafCallbacks.push(callback);\n  }\n}\n\nexport function doubleRaf() {\n  return new Promise<void>((resolve) => {\n    fastRaf(() => {\n      fastRaf(resolve);\n    });\n  });\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nexport function copy<T>(obj: T): T {\n  //in case of premitives\n  if(obj === null || typeof(obj) !== \"object\") {\n    return obj;\n  }\n \n  //date objects should be \n  if(obj instanceof Date) {\n    return new Date(obj.getTime()) as any;\n  }\n \n  //handle Array\n  if(Array.isArray(obj)) {\n    // @ts-ignore\n    const clonedArr: T = obj.map(el => copy(el)) as any as T;\n    return clonedArr;\n  }\n \n  //lastly, handle objects\n  // @ts-ignore\n  let clonedObj = new obj.constructor();\n  for(var prop in obj){\n    if(obj.hasOwnProperty(prop)) {\n      clonedObj[prop] = copy(obj[prop]);\n    }\n  }\n  return clonedObj;\n}\n\nexport function deepEqual(x: any, y: any): boolean {\n  const ok = Object.keys, tx = typeof x, ty = typeof y;\n  return x && y && tx === 'object' && tx === ty ? (\n    ok(x).length === ok(y).length &&\n      ok(x).every(key => deepEqual(x[key], y[key]))\n  ) : (x === y);\n}\n\nexport function defineNotNumerableProperties(obj: {[key: string]: any}, names: string[]) {\n  //const perf = performance.now();\n  const props = {writable: true, configurable: true};\n  const out: {[name: string]: typeof props} = {};\n  names.forEach(name => {\n    if(obj[name] === undefined) {\n      out[name] = props;\n    }\n  });\n  Object.defineProperties(obj, out);\n  //console.log('defineNotNumerableProperties time:', performance.now() - perf);\n}\n\nexport function getObjectKeysAndSort(object: any, sort: 'asc' | 'desc' = 'asc') {\n  if(!object) return [];\n  const ids = Object.keys(object).map(i => +i);\n  if(sort === 'asc') return ids.sort((a, b) => a - b);\n  else return ids.sort((a, b) => b - a);\n}\n\nexport function safeReplaceObject(wasObject: any, newObject: any) {\n  if(!wasObject) {\n    return newObject;\n  }\n\n  for(var key in wasObject) {\n    if(!newObject.hasOwnProperty(key)) {\n      delete wasObject[key];\n    }\n  }\n\n  for(var key in newObject) {\n    //if (newObject.hasOwnProperty(key)) { // useless\n      wasObject[key] = newObject[key];\n    //}\n  }\n  \n  return wasObject;\n}\n\n/**\n * Will be used for FILE_REFERENCE_EXPIRED\n * @param key \n * @param wasObject \n * @param newObject \n */\nexport function safeReplaceArrayInObject<K>(key: K, wasObject: any, newObject: any) {\n  if('byteLength' in newObject[key]) { // Uint8Array\n    newObject[key] = [...newObject[key]];\n  }\n\n  if(wasObject && wasObject[key] !== newObject[key]) {\n    wasObject[key].length = newObject[key].length;\n    (newObject[key] as any[]).forEach((v, i) => {\n      wasObject[key][i] = v;\n    });\n\n    /* wasObject[key].set(newObject[key]); */\n    newObject[key] = wasObject[key];\n  }\n}\n\nexport function isObject(object: any) {\n  return typeof(object) === 'object' && object !== null;\n}\n\nexport function getDeepProperty(object: any, key: string) {\n  const splitted = key.split('.');\n  let o: any = object;\n  splitted.forEach(key => {\n    if(!key) {\n      return;\n    }\n    \n    // @ts-ignore\n    o = o[key];\n  });\n  \n  return o;\n}\n\nexport function setDeepProperty(object: any, key: string, value: any) {\n  const splitted = key.split('.');\n  getDeepProperty(object, splitted.slice(0, -1).join('.'))[splitted.pop()] = value;\n}\n\nexport function validateInitObject(initObject: any, currentObject: any, onReplace?: (key: string) => void, previousKey?: string) {\n  for(const key in initObject) {\n    if(typeof(currentObject[key]) !== typeof(initObject[key])) {\n      currentObject[key] = copy(initObject[key]);\n      onReplace && onReplace(previousKey || key);\n    } else if(isObject(initObject[key])) {\n      validateInitObject(initObject[key], currentObject[key], onReplace, previousKey || key);\n    }\n  }\n}\n\nexport function safeAssign(object: any, fromObject: any) {\n  if(!fromObject) return;\n  \n  for(let i in fromObject) {\n    if(fromObject[i] !== undefined) {\n      object[i] = fromObject[i];\n    }\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport DEBUG from \"../config/debug\";\n\nexport enum LogTypes {\n  None = 0,\n  Error = 1,\n  Warn = 2,\n  Log = 4,\n  Debug = 8\n};\n\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\n\nconst _logTimer = Date.now();\nfunction dT() {\n  return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';\n}\n\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error) {\n  if(!DEBUG/*  || true */) {\n    type = LogTypes.Error;\n  }\n\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\n\n  function Log(...args: any[]) {\n    return type & LogTypes.Log && console.log(dT(), prefix, ...args);\n  }\n  \n  Log.warn = function(...args: any[]) {\n    return type & LogTypes.Warn && console.warn(dT(), prefix, ...args);\n  };\n  \n  Log.info = function(...args: any[]) {\n    return type & LogTypes.Log && console.info(dT(), prefix, ...args);\n  };\n  \n  Log.error = function(...args: any[]) {\n    return type & LogTypes.Error && console.error(dT(), prefix, ...args);\n  };\n  \n  Log.trace = function(...args: any[]) {\n    return type & LogTypes.Log && console.trace(dT(), prefix, ...args);\n  };\n\n  /* Log.debug = function(...args: any[]) {\n    return level & LogLevels.debug && console.log(dT(), prefix, ...args);\n  }; */\n\n  Log.debug = function(...args: any[]) {\n    return type & LogTypes.Debug && console.debug(dT(), prefix, ...args);\n  };\n\n  Log.setPrefix = function(_prefix: string) {\n    prefix = '[' + _prefix + ']:';\n  };\n\n  Log.setPrefix(prefix);\n\n  Log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\n  };\n  \n  return Log;\n};\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport interface CancellablePromise<T> extends Promise<T> {\n  resolve?: (...args: any[]) => void,\n  reject?: (...args: any[]) => void,\n  cancel?: () => void,\n\n  notify?: (...args: any[]) => void,\n  notifyAll?: (...args: any[]) => void,\n  lastNotify?: any,\n  listeners?: Array<(...args: any[]) => void>,\n  addNotifyListener?: (callback: (...args: any[]) => void) => void,\n\n  isFulfilled?: boolean,\n  isRejected?: boolean\n}\n\nexport function deferredPromise<T>() {\n  let deferredHelper: any = {\n    isFulfilled: false, \n    isRejected: false,\n\n    notify: () => {}, \n    notifyAll: (...args: any[]) => {\n      deferredHelper.lastNotify = args;\n      deferredHelper.listeners.forEach((callback: any) => callback(...args));\n    }, \n\n    lastNotify: undefined,\n    listeners: [],\n    addNotifyListener: (callback: (...args: any[]) => void) => {\n      if(deferredHelper.lastNotify) {\n        callback(...deferredHelper.lastNotify);\n      }\n\n      deferredHelper.listeners.push(callback);\n    }\n  };\n\n  let deferred: CancellablePromise<T> = new Promise<T>((resolve, reject) => {\n    deferredHelper.resolve = (value: T) => {\n      if(deferred.isFulfilled) return;\n\n      deferred.isFulfilled = true;\n      resolve(value);\n    };\n    \n    deferredHelper.reject = (...args: any[]) => {\n      if(deferred.isRejected) return;\n      \n      deferred.isRejected = true;\n      reject(...args);\n    };\n  });\n\n  // @ts-ignore\n  /* deferred.then = (resolve: (value: T) => any, reject: (...args: any[]) => any) => {\n    const n = deferredPromise<ReturnType<typeof resolve>>();\n    \n  }; */\n\n  deferred.finally(() => {\n    deferred.notify = null;\n    deferred.listeners.length = 0;\n    deferred.lastNotify = null;\n\n    if(deferred.cancel) {\n      deferred.cancel = () => {};\n    }\n  });\n\n  Object.assign(deferred, deferredHelper);\n\n  return deferred;\n}","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n//import { MOUNT_CLASS_TO } from \"../config/debug\";\nimport type { ArgumentTypes, SuperReturnType } from \"../types\";\n\n// class EventSystem {\n//   wm: WeakMap<any, Record<any, Set<any>>> = new WeakMap();\n\n//   add(target: any, event: any, listener: any) {\n//     let listeners = this.wm.get(target);\n//     if (listeners === undefined) {\n//         listeners = {};\n//     }\n//     let listenersForEvent = listeners[event];\n//     if (listenersForEvent === undefined) {\n//         listenersForEvent = new Set();\n//     }\n//     listenersForEvent.add(listener);\n//     listeners[event] = listenersForEvent;\n//     //target.addEventListener(event, listener);\n//     this.wm.set(target, listeners);\n//   };\n\n//   remove(target: any, event: any, listener: any) {\n//     let listeners = this.wm.get(target);\n//     if (!listeners) return;\n//     let listenersForEvent = listeners[event];\n//     if (!listenersForEvent) return;\n//     listenersForEvent.delete(listener);\n//   };\n  \n//   /* fire(target, event) {\n//      let listeners = this.wm.get(target);\n//      if (!listeners) return;\n//      let listenersForEvent = listeners[event];\n//      if (!listenersForEvent) return;\n//      for (let handler of handlers) {\n//          setTimeout(handler, 0, event, target); // we use a setTimeout here because we want event triggering to be asynchronous. \n//      }\n//   }; */\n// }\n\n// console.log = () => {};\n\n// const e = new EventSystem();\n// MOUNT_CLASS_TO.e = e;\n\n/**\n * Better not to remove listeners during setting\n * Should add listener callback only once\n */\nexport default class EventListenerBase<Listeners extends {[name: string]: Function}> {\n  protected listeners: Partial<{\n    [k in keyof Listeners]: Array<{callback: Listeners[k], once?: boolean}>\n  }>;\n  protected listenerResults: Partial<{\n    [k in keyof Listeners]: ArgumentTypes<Listeners[k]>\n  }>;\n\n  private reuseResults: boolean;\n\n  constructor(reuseResults?: boolean) {\n    this._constructor(reuseResults);\n  }\n\n  public _constructor(reuseResults = false): any {\n    this.reuseResults = reuseResults;\n    this.listeners = {};\n    this.listenerResults = {};\n  }\n\n  public addEventListener<T extends keyof Listeners>(name: T, callback: Listeners[T], once?: boolean) {\n    if(this.listenerResults.hasOwnProperty(name)) {\n      callback(...this.listenerResults[name]);\n      \n      if(once) {\n        return;\n      }\n    }\n    \n    (this.listeners[name] ?? (this.listeners[name] = [])).push({callback, once});\n    //e.add(this, name, {callback, once});\n  }\n\n  public addMultipleEventsListeners(obj: {\n    [name in keyof Listeners]?: Listeners[name]\n  }) {\n    for(const i in obj) {\n      this.addEventListener(i, obj[i]);\n    }\n  }\n\n  public removeEventListener<T extends keyof Listeners>(name: T, callback: Listeners[T]) {\n    if(this.listeners[name]) {\n      this.listeners[name].findAndSplice(l => l.callback === callback);\n    }\n    //e.remove(this, name, callback);\n  }\n\n  // * must be protected, but who cares\n  public dispatchEvent<T extends keyof Listeners>(name: T, ...args: ArgumentTypes<Listeners[T]>) {\n    if(this.reuseResults) {\n      this.listenerResults[name] = args;\n    }\n\n    const arr: Array<SuperReturnType<Listeners[typeof name]>> = [];\n\n    /* let a = e.wm.get(this)[name];\n    if(!a) return arr;\n    const listeners = [...a]; */\n    const listeners = this.listeners[name];\n    if(listeners) {\n      // ! this one will guarantee execution even if delete another listener during setting\n      const left = listeners.slice();\n      left.forEach((listener: any) => {\n        const index = listeners.findIndex((l: any) => l.callback === listener.callback);\n        if(index === -1) {\n          return;\n        }\n\n        arr.push(listener.callback(...args));\n\n        if(listener.once) {\n          this.removeEventListener(name, listener.callback);\n        }\n      });\n\n      /* for(let i = 0, length = listeners.length; i < length; ++i) {\n        const listener = listeners[i];\n        arr.push(listener.callback(...args));\n\n        if(listener.once) {\n          listeners.splice(i, 1);\n          --i;\n          --length;\n        }\n      } */\n    }\n\n    return arr;\n  }\n\n  public cleanup() {\n    this.listeners = {}; \n    this.listenerResults = {};\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport const isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\nexport const isServiceWorker = typeof ServiceWorkerGlobalScope !== 'undefined' && self instanceof ServiceWorkerGlobalScope;\nexport const isWorker = isWebWorker || isServiceWorker;\n\n// в SW может быть сразу две переменных TRUE, поэтому проверяю по последней\n\nconst notifyServiceWorker = (all: boolean, ...args: any[]) => {\n  (self as any as ServiceWorkerGlobalScope)\n  .clients\n  .matchAll({ includeUncontrolled: false, type: 'window' })\n  .then((listeners) => {\n    if(!listeners.length) {\n      //console.trace('no listeners?', self, listeners);\n      return;\n    }\n\n    listeners.slice(all ? 0 : -1).forEach(listener => {\n      // @ts-ignore\n      listener.postMessage(...args);\n    });\n  });\n};\n\nconst notifyWorker = (...args: any[]) => {\n  // @ts-ignore\n  (self as any as DedicatedWorkerGlobalScope).postMessage(...args);\n};\n\nconst noop = () => {};\n\nexport const notifySomeone = isServiceWorker ? notifyServiceWorker.bind(null, false) : (isWebWorker ? notifyWorker : noop);\nexport const notifyAll = isServiceWorker ? notifyServiceWorker.bind(null, true) : (isWebWorker ? notifyWorker : noop);\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport Modes from '../config/modes';\nimport { notifySomeone, isWorker } from '../helpers/context';\nimport { WorkerTaskTemplate } from '../types';\n//import { stringify } from '../helpers/json';\n\nclass LocalStorage<Storage extends Record<string, any>> {\n  private prefix = '';\n  private cache: Partial<Storage> = {};\n  private useStorage = true;\n\n  constructor(/* private preserveKeys: (keyof Storage)[] */) {\n    if(Modes.test) {\n      this.prefix = 't_';\n    }\n  }\n\n  public get<T extends keyof Storage>(key: T, useCache = true): Storage[T] {\n    if(this.cache.hasOwnProperty(key) && useCache) {\n      return this.cache[key];\n    } else if(this.useStorage) {\n      let value: Storage[T];\n      try {\n        value = localStorage.getItem(this.prefix + key as string) as any;\n      } catch(err) {\n        this.useStorage = false;\n      }\n\n      if(value !== null) {\n        try {\n          value = JSON.parse(value);\n        } catch(err) {\n          //console.error(err);\n        }\n      } else {\n        value = undefined;\n      }\n\n      return value;\n    }/*  else {\n      throw 'something went wrong';\n    } */\n  }\n\n  public set(obj: Partial<Storage>, onlyLocal = false) {\n    for(const key in obj) {\n      if(obj.hasOwnProperty(key)) {\n        const value = obj[key];\n        this.cache[key] = value;\n\n        if(this.useStorage && !onlyLocal) {\n          try {\n            const stringified = JSON.stringify(value);\n            localStorage.setItem(this.prefix + key, stringified);\n          } catch(err) {\n            this.useStorage = false;\n          }\n        }\n      }\n    }\n  }\n\n  public delete(key: keyof Storage, saveLocal = false) {\n    // ! it is needed here\n    key = '' + key;\n\n    if(!saveLocal) {\n      delete this.cache[key];\n    }\n    \n    //if(this.useStorage) {\n      try {\n        localStorage.removeItem(this.prefix + key);\n      } catch(err) {\n        \n      }\n    //}\n  }\n\n  /* public clear(preserveKeys: (keyof Storage)[] = this.preserveKeys) {\n    // if(this.useStorage) {\n      try {\n        let obj: Partial<Storage> = {};\n        if(preserveKeys) {\n          preserveKeys.forEach(key => {\n            const value = this.get(key);\n            if(value !== undefined) {\n              obj[key] = value;\n            }\n          });\n        }\n        \n        localStorage.clear();\n\n        if(preserveKeys) {\n          this.set(obj);\n        }\n      } catch(err) {\n\n      }\n    // }\n  } */\n\n  public clear() {\n    const keys: string[] = ['dc', 'server_time_offset', 'xt_instance', 'user_auth'];\n    for(let i = 1; i <= 5; ++i) {\n      keys.push(`dc${i}_server_salt`);\n      keys.push(`dc${i}_auth_key`);\n    }\n\n    for(let key of keys) {\n      this.delete(key, true);\n    }\n  }\n\n  public toggleStorage(enabled: boolean) {\n    this.useStorage = enabled;\n\n    if(!enabled) {\n      this.clear();\n    } else {\n      return this.set(this.cache);\n    }\n  }\n}\n\nexport interface LocalStorageProxyTask extends WorkerTaskTemplate {\n  type: 'localStorageProxy',\n  payload: {\n    type: 'set' | 'get' | 'delete' | 'clear' | 'toggleStorage',\n    args: any[]\n  }\n};\n\nexport interface LocalStorageProxyTaskResponse extends WorkerTaskTemplate {\n  type: 'localStorageProxy',\n  payload: any\n};\n\nexport default class LocalStorageController<Storage extends Record<string, any>> {\n  private static STORAGES: LocalStorageController<any>[] = [];\n  private taskId = 0;\n  private tasks: {[taskID: number]: (result: any) => void} = {};\n  //private log = (...args: any[]) => console.log('[SW LS]', ...args);\n  //private log = (...args: any[]) => {};\n\n  private storage: LocalStorage<Storage>;\n\n  constructor(/* private preserveKeys: (keyof Storage)[] = [] */) {\n    LocalStorageController.STORAGES.push(this);\n\n    if(!isWorker) {\n      this.storage = new LocalStorage(/* preserveKeys */);\n    }\n  }\n\n  public finishTask(taskId: number, result: any) {\n    //this.log('finishTask:', taskID, result, Object.keys(this.tasks));\n\n    if(!this.tasks.hasOwnProperty(taskId)) {\n      //this.log('no such task:', taskID, result);\n      return;\n    }\n\n    this.tasks[taskId](result);\n    delete this.tasks[taskId];\n  }\n\n  private proxy<T>(type: LocalStorageProxyTask['payload']['type'], ...args: LocalStorageProxyTask['payload']['args']) {\n    return new Promise<T>((resolve, reject) => {\n      if(isWorker) {\n        const taskId = this.taskId++;\n\n        this.tasks[taskId] = resolve;\n        const task: LocalStorageProxyTask = {\n          type: 'localStorageProxy', \n          id: taskId,\n          payload: {\n            type,\n            args\n          }\n        };\n\n        notifySomeone(task);\n      } else {\n        args = Array.prototype.slice.call(args);\n\n        // @ts-ignore\n        const result: any = this.storage[type].apply(this.storage, args as any);\n        resolve(result);\n      }\n    });\n  }\n\n  public get<T extends keyof Storage>(key: T, useCache?: boolean) {\n    return this.proxy<Storage[T]>('get', key, useCache);\n  }\n\n  public set(obj: Partial<Storage>, onlyLocal?: boolean) {\n    return this.proxy<void>('set', obj, onlyLocal);\n  }\n\n  public delete(key: keyof Storage, saveLocal?: boolean) {\n    return this.proxy<void>('delete', key, saveLocal);\n  }\n\n  public clear(/* preserveKeys?: (keyof Storage)[] */) {\n    return this.proxy<void>('clear'/* , preserveKeys */);\n  }\n\n  public toggleStorage(enabled: boolean) {\n    return this.proxy<void>('toggleStorage', enabled);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type { AppInstance } from './mtproto/singleInstance';\nimport type { UserAuth } from './mtproto/mtproto_config';\nimport { MOUNT_CLASS_TO } from '../config/debug';\nimport LocalStorageController from './localStorage';\n\nconst sessionStorage = new LocalStorageController<{\n  dc: number,\n  user_auth: UserAuth,\n  dc1_auth_key: string,\n  dc2_auth_key: string,\n  dc3_auth_key: string,\n  dc4_auth_key: string,\n  dc5_auth_key: string,\n  dc1_server_salt: string,\n  dc2_server_salt: string,\n  dc3_server_salt: string,\n  dc4_server_salt: string,\n  dc5_server_salt: string,\n  server_time_offset: number,\n  xt_instance: AppInstance,\n  kz_version: 'K' | 'Z'\n}>(/* ['kz_version'] */);\nMOUNT_CLASS_TO.appStorage = sessionStorage;\nexport default sessionStorage;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nconst Modes = {\n  test: location.search.indexOf('test=1') > 0/*  || true */,\n  debug: location.search.indexOf('debug=1') > 0,\n  http: false, //location.search.indexOf('http=1') > 0,\n  ssl: true, // location.search.indexOf('ssl=1') > 0 || location.protocol === 'https:' && location.search.indexOf('ssl=0') === -1,\n  multipleConnections: true,\n  asServiceWorker: false\n};\n\n                  \n                             \n          \n\nexport default Modes;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type { ChatSavedPosition } from './appManagers/appImManager';\nimport type { State } from './appManagers/appStateManager';\nimport type { AppDraftsManager } from './appManagers/appDraftsManager';\nimport { MOUNT_CLASS_TO } from '../config/debug';\nimport { LangPackDifference } from '../layer';\nimport AppStorage from './storage';\nimport DATABASE_STATE from '../config/databases/state';\n\nconst stateStorage = new AppStorage<{\n  chatPositions: {\n    [peerId_threadId: string]: ChatSavedPosition\n  },\n  langPack: LangPackDifference,\n  drafts: AppDraftsManager['drafts']\n} & State, typeof DATABASE_STATE>(DATABASE_STATE, 'session');\nMOUNT_CLASS_TO.stateStorage = stateStorage;\nexport default stateStorage;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { Database } from \"../config/databases\";\n//import DATABASE_SESSION from \"../config/databases/session\";\nimport { CancellablePromise, deferredPromise } from \"../helpers/cancellablePromise\";\nimport { throttle } from \"../helpers/schedulers\";\n//import { WorkerTaskTemplate } from \"../types\";\nimport IDBStorage from \"./idb\";\n\nfunction noop() {}\n\n/* export interface LocalStorageProxySetTask extends WorkerTaskTemplate {\n  type: 'localStorageProxy',\n  payload: {\n    type: 'set',\n    keys: string[],\n    values: any[]\n  }\n};\n\nexport interface LocalStorageProxyDeleteTask extends WorkerTaskTemplate {\n  type: 'localStorageProxy',\n  payload: {\n    type: 'delete',\n    keys: string[]\n  }\n}; */\n\nexport default class AppStorage<Storage extends Record<string, any>, T extends Database<any>/* Storage extends {[name: string]: any} *//* Storage extends Record<string, any> */> {\n  private static STORAGES: AppStorage<any, Database<any>>[] = [];\n  private storage: IDBStorage<T>;//new CacheStorageController('session');\n\n  //private cache: Partial<{[key: string]: Storage[typeof key]}> = {};\n  private cache: Partial<Storage> = {};\n  private useStorage = true;\n\n  private getPromises: Map<keyof Storage, CancellablePromise<Storage[keyof Storage]>> = new Map();\n  private getThrottled: () => void;\n\n  private keysToSet: Set<keyof Storage> = new Set();\n  private saveThrottled: () => void;\n  private saveDeferred = deferredPromise<void>();\n\n  private keysToDelete: Set<keyof Storage> = new Set();\n  private deleteThrottled: () => void;\n  private deleteDeferred = deferredPromise<void>();\n\n  constructor(private db: T, storeName: typeof db['stores'][number]['name']) {\n    this.storage = new IDBStorage<T>(db, storeName);\n\n    if(AppStorage.STORAGES.length) {\n      this.useStorage = AppStorage.STORAGES[0].useStorage;\n    }\n\n    AppStorage.STORAGES.push(this);\n\n    this.saveThrottled = throttle(async() => {\n      const deferred = this.saveDeferred;\n      this.saveDeferred = deferredPromise<void>();\n\n      const set = this.keysToSet;\n      if(set.size) {\n        const keys = Array.from(set.values()) as string[];\n        set.clear();\n\n        try {\n          //console.log('setItem: will set', key/* , value */);\n          //await this.cacheStorage.delete(key); // * try to prevent memory leak in Chrome leading to 'Unexpected internal error.'\n          //await this.storage.save(key, new Response(value, {headers: {'Content-Type': 'application/json'}}));\n\n          const values = keys.map(key => this.cache[key]);\n          /* if(db === DATABASE_SESSION && !('localStorage' in self)) { // * support legacy Webogram's localStorage\n            self.postMessage({\n              type: 'localStorageProxy', \n              payload: {\n                type: 'set',\n                keys,\n                values\n              }\n            } as LocalStorageProxySetTask);\n          } */\n\n          await this.storage.save(keys, values);\n          //console.log('setItem: have set', key/* , value */);\n        } catch(e) {\n          //this.useCS = false;\n          console.error('[AS]: set error:', e, keys/* , value */);\n        }\n      }\n\n      deferred.resolve();\n\n      if(set.size) {\n        this.saveThrottled();\n      }\n    }, 16, false);\n\n    this.deleteThrottled = throttle(async() => {\n      const deferred = this.deleteDeferred;\n      this.deleteDeferred = deferredPromise<void>();\n\n      const set = this.keysToDelete;\n      if(set.size) {\n        const keys = Array.from(set.values()) as string[];\n        set.clear();\n\n        try {\n          /* if(db === DATABASE_SESSION && !('localStorage' in self)) { // * support legacy Webogram's localStorage\n            self.postMessage({\n              type: 'localStorageProxy', \n              payload: {\n                type: 'delete',\n                keys\n              }\n            } as LocalStorageProxyDeleteTask);\n          } */\n\n          await this.storage.delete(keys);\n        } catch(e) {\n          console.error('[AS]: delete error:', e, keys);\n        }\n      }\n\n      deferred.resolve();\n\n      if(set.size) {\n        this.deleteThrottled();\n      }\n    }, 16, false);\n\n    this.getThrottled = throttle(async() => {\n      const keys = Array.from(this.getPromises.keys());\n\n      this.storage.get(keys as string[]).then(values => {\n        for(let i = 0, length = keys.length; i < length; ++i) {\n          const key = keys[i];\n          const deferred = this.getPromises.get(key);\n          if(deferred) {\n            // @ts-ignore\n            deferred.resolve(this.cache[key] = values[i]);\n            this.getPromises.delete(key);\n          }\n        }\n      }, (error) => {\n        if(!['NO_ENTRY_FOUND', 'STORAGE_OFFLINE'].includes(error)) {\n          this.useStorage = false;\n          console.error('[AS]: get error:', error, keys, storeName);\n        }\n\n        for(let i = 0, length = keys.length; i < length; ++i) {\n          const key = keys[i];\n          const deferred = this.getPromises.get(key);\n          if(deferred) {\n            //deferred.reject(error);\n            deferred.resolve();\n            this.getPromises.delete(key);\n          }\n        }\n      }).finally(() => {\n        if(this.getPromises.size) {\n          this.getThrottled();\n        }\n      });\n    }, 16, false);\n  }\n\n  public isAvailable() {\n    return this.useStorage;\n  }\n\n  public getCache() {\n    return this.cache;\n  }\n\n  public getFromCache<T extends keyof Storage>(key: T) {\n    return this.cache[key];\n  }\n\n  public setToCache(key: keyof Storage, value: Storage[typeof key]) {\n    return this.cache[key] = value;\n  }\n\n  public async get<T extends keyof Storage>(key: T, useCache = true): Promise<Storage[T]> {\n    if(this.cache.hasOwnProperty(key) && useCache) {\n      return this.getFromCache(key);\n    } else if(this.useStorage) {\n      const r = this.getPromises.get(key);\n      if(r) return r as any;\n\n      const p = deferredPromise<Storage[typeof key]>();\n      this.getPromises.set(key, p);\n\n      this.getThrottled();\n\n      return p;\n    }/*  else {\n      throw 'something went wrong';\n    } */\n  }\n\n  public getAll() {\n    return this.storage.getAll().catch(() => []);\n  }\n\n  public set(obj: Partial<Storage>, onlyLocal = false) {\n    //console.log('storageSetValue', obj, callback, arguments);\n\n    for(const key in obj) {\n      if(obj.hasOwnProperty(key)) {\n        const value = obj[key];\n        this.setToCache(key, value);\n\n        // let perf = /* DEBUG */false ? performance.now() : 0;\n        // value = JSON.stringify(value);\n\n        // if(perf) {\n        //   let elapsedTime = performance.now() - perf;\n        //   if(elapsedTime > 10) {\n        //     console.warn('LocalStorage set: stringify time by JSON.stringify:', elapsedTime, key);\n        //   }\n        // }\n        \n        /* perf = performance.now();\n        value = stringify(value);\n        console.log('LocalStorage set: stringify time by own stringify:', performance.now() - perf); */\n\n        if(this.useStorage && !onlyLocal) {\n          this.keysToSet.add(key);\n          this.keysToDelete.delete(key);\n          this.saveThrottled();\n        }\n      }\n    }\n\n    return this.useStorage ? this.saveDeferred : Promise.resolve();\n  }\n\n  public delete(key: keyof Storage, saveLocal = false) {\n    /* if(!this.cache.hasOwnProperty(key)) {\n      return;\n    } */\n\n    // ! it is needed here\n    key = '' + key;\n\n    if(!saveLocal) {\n      delete this.cache[key];\n    }\n    \n    if(this.useStorage) {\n      this.keysToSet.delete(key);\n      this.keysToDelete.add(key);\n      this.deleteThrottled();\n    }\n\n    return this.useStorage ? this.deleteDeferred : Promise.resolve();\n  }\n\n  public clear() {\n    return this.storage.deleteAll().catch(noop);\n  }\n\n  public static toggleStorage(enabled: boolean) {\n    return Promise.all(this.STORAGES.map(storage => {\n      storage.useStorage = enabled;\n      \n      if(!enabled) {\n        storage.keysToSet.clear();\n        storage.keysToDelete.clear();\n        storage.getPromises.forEach((deferred) => deferred.resolve());\n        storage.getPromises.clear();\n\n        /* if(storage.db === DATABASE_SESSION && 'localStorage' in self) { // * support legacy Webogram's localStorage\n          localStorage.clear();\n        } */\n\n        return storage.clear();\n      } else {\n        /* if(storage.db === DATABASE_SESSION && 'localStorage' in self) { // * support legacy Webogram's localStorage\n          for(const i in storage.cache) {\n            if(storage.cache[i] !== undefined) {\n              localStorage.setItem(i, JSON.stringify(storage.cache[i]));\n            }\n          }\n        } */\n\n        return storage.set(storage.cache);\n      }\n    })).catch(noop);\n  }\n\n  public deleteDatabase() {\n    return IDBStorage.deleteDatabase().catch(noop);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { Database } from '.';\n\nconst DATABASE_STATE: Database<'session' | 'stickerSets' | 'users' | 'chats' | 'messages' | 'dialogs'> = {\n  name: 'tweb',\n  version: 7,\n  stores: [{\n    name: 'session'\n  }, {\n    name: 'stickerSets'\n  }, {\n    name: 'users'\n  }, {\n    name: 'chats'\n  }, {\n    name: 'dialogs'\n  }, {\n    name: 'messages'\n  }]\n};\n\nexport default DATABASE_STATE;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nexport const readBlobAsText = (blob: Blob) => {\n  return new Promise<string>(resolve => {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', (e) => {\n      // @ts-ignore\n      resolve(e.srcElement.result);\n    });\n    reader.readAsText(blob);\n  });\n};\n\nexport function blobConstruct(blobParts: any, mimeType: string = ''): Blob {\n  let blob;\n  const safeMimeType = blobSafeMimeType(mimeType);\n  try {\n    blob = new Blob(blobParts, {type: safeMimeType});\n  } catch(e) {\n    // @ts-ignore\n    let bb = new BlobBuilder;\n    blobParts.forEach((blobPart: any) => {\n      bb.append(blobPart);\n    });\n    blob = bb.getBlob(safeMimeType);\n  }\n  return blob;\n}\n\n// https://www.iana.org/assignments/media-types/media-types.xhtml\nexport function blobSafeMimeType(mimeType: string) {\n  if([\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'image/bmp',\n    'video/mp4',\n    'video/webm',\n    'video/quicktime',\n    'audio/ogg',\n    'audio/mpeg',\n    'audio/mp4',\n    'application/json',\n    'application/pdf'\n  ].indexOf(mimeType) === -1) {\n    return 'application/octet-stream';\n  }\n\n  return mimeType;\n}\n"],"sourceRoot":""}