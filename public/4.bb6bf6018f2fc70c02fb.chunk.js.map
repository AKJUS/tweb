{"version":3,"sources":["webpack:///./src/helpers/cleanUsername.ts","webpack:///./src/lib/appManagers/appUsersManager.ts","webpack:///./src/lib/appManagers/appChatsManager.ts","webpack:///./src/lib/appManagers/appPeersManager.ts","webpack:///./src/lib/appManagers/apiUpdatesManager.ts","webpack:///./src/helpers/array.ts","webpack:///./src/lib/searchIndex.ts","webpack:///./src/helpers/cleanSearchText.ts","webpack:///./src/lib/mtproto/mtproto_config.ts","webpack:///./src/helpers/dom/htmlToSpan.ts"],"names":["cleanUsername","username","toLowerCase","appUsersManager","storage","appStateManager","storages","users","updateUsersStatuses","timestampNow","i","this","user","status","_","expires","was_online","rootScope","dispatchEvent","id","setUserToStateIfNeeded","clear","setInterval","addEventListener","addMultipleEventsListeners","updateUserStatus","update","userId","user_id","serverTimeManager","serverTimeOffset","updateUserPhoto","forceUserOnline","photo","console","warn","updateUserName","saveApiUser","Object","assign","first_name","last_name","e","getSelf","contactsIndex","indexObject","getUserSearchText","getState","then","state","storagesResults","length","contactsList","Array","isArray","forEach","pushContact","contactsFillPromise","Promise","resolve","peerId","getFromCache","set","getUser","delete","init","usernames","_userId","isPeerNeeded","findAndSplice","undefined","Set","updatedContactsList","pushToState","promise","invokeApi","result","saveApiUsers","contacts","contact","onContactsModified","slice","resolvedPeer","appChatsManager","saveApiChats","chats","appPeersManager","getPeer","getPeerId","peer","add","requestPeer","phone","pFlags","self","format","filter","Boolean","join","query","includeSaved","fillContacts","_contactsList","results","search","has","sort","userId1","userId2","sortName1","sortName","sortName2","localeCompare","testSelfSearch","p","myId","unshift","block","invokeApiSingle","getInputPeerById","value","apiUpdatesManager","processLocalUpdate","peer_id","getOutputPeer","blocked","index","apiUsers","override","oldUser","min","fullName","searchUsername","deleted","cleanSearchText","initials","getAbbreviation","changedPhoto","changedTitle","photo_id","formatted","access_hash","key","args","isBot","support","date","now","Date","d","getDate","getMonth","getHours","getMinutes","bot","isRegularUser","isContact","allowMin","eventTimestamp","timestamp","updatesState","syncLoading","getTopPeersPromise","topPeers","correspondents","offset","limit","hash","peerIds","categories","peers","map","topPeer","contactsBlocked","count","u","concat","c","q","my_results","offline","showPhone","getUserInput","add_phone_privacy_exception","updates","processUpdateMessage","onContactUpdated","userIds","onChatUpdated","chatId","isChannel","updateChannelParticipant","clearCache","params","channel","channel_id","updateChatDefaultBannedRights","chat","default_banned_rights","getChat","_chatId","apiChats","saveApiChat","oldChat","title","participants_count","rights","defaultRights","action","isThread","kicked","left","megagroup","creator","admin_rights","banned_rights","myFlags","post_messages","delete_messages","broadcast","until_date","bind","isMegagroup","good","deactivated","chat_id","about","channelId","input","getChannelInput","usersInputs","fwdLimit","fwd_limit","deleteChatUser","leaveChannel","leaveChat","deleteChannel","deleteChat","find","bool","inputFile","inputChatPhoto","file","participant","getParticipantPeerId","actor_id","qts","prev_participant","new_participant","keys","kicked_by","editBanned","view_messages","DialogColorsFg","DialogColors","DialogColorsMap","updatePeerBlocked","hasRights","getUserPhoto","getChatPhoto","migrated_to","plainText","onlyFirstName","trim","split","wrapEmojiText","getUserString","getChatString","isUser","charAt","peerParams","substr","isBroadcast","ignorePeerId","getChannelInputPeer","getChatInputPeer","pic","text","getDialogType","pendingPtsUpdates","pendingSeqUpdates","syncPending","channelStates","attached","log","Error","Warn","Log","debug","updateMessage","options","processOpts","seq","seqStart","seq_start","forceGetDifference","processUpdate","isOut","out","fromId","from_id","toId","message","fwd_from","reply_to","entities","pts","pts_count","Proxy","target","saveUpdatesState","us","nextSeq","pendingUpdatesData","saveUpdate","popPendingSeqUpdate","seqAwaiting","ptsAwaiting","clearTimeout","timeout","curState","getChannelState","a","b","curPts","goodPts","goodIndex","splice","getDifference","first","wasSyncing","pts_total_limit","differenceResult","other_updates","new_messages","apiMessage","nextState","intermediate_state","justAName","channelState","getChannelDifference","addChannelState","lastPtsUpdateTime","toPeerId","fwdHeader","reason","hasUser","post","hasChat","popPts","popSeq","push","window","setTimeout","popPendingPtsUpdate","_state","noErrorBox","stateResult","setUpdatesProcessor","setProxy","accumulate","arr","initialValue","reduce","acc","findAndSpliceAll","array","verify","idx","findIndex","forEachReverse","callback","insertInDescendSortedArray","element","property","pos","indexOf","sortProperty","len","error","filterUnique","SearchIndex","cleanText","latinize","minChars","fullTexts","Map","searchText","newFoundObjs","queryWords","queryWordsLength","fullText","what","found","foundChars","word","fullTextLength","o","badCharsRe","trimRe","hasTag","replace","ch","latinizeCh","LatinizeMap","REPLIES_PEER_ID","htmlToSpan","html","span","document","createElement","innerHTML"],"mappings":"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","file":"4.bb6bf6018f2fc70c02fb.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nexport default function cleanUsername(username: string) {\n  return username && username.toLowerCase() || '';\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { formatPhoneNumber } from \"../../components/misc\";\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport { filterUnique } from \"../../helpers/array\";\nimport cleanSearchText from \"../../helpers/cleanSearchText\";\nimport cleanUsername from \"../../helpers/cleanUsername\";\nimport { tsNow } from \"../../helpers/date\";\nimport { safeReplaceObject, isObject } from \"../../helpers/object\";\nimport { InputUser, User as MTUser, UserProfilePhoto, UserStatus } from \"../../layer\";\nimport I18n, { i18n, LangPackKey } from \"../langPack\";\n//import apiManager from '../mtproto/apiManager';\nimport apiManager from '../mtproto/mtprotoworker';\nimport { REPLIES_PEER_ID } from \"../mtproto/mtproto_config\";\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\nimport { RichTextProcessor } from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport SearchIndex from \"../searchIndex\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appChatsManager from \"./appChatsManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from \"./appStateManager\";\n\n// TODO: updateUserBlocked\n\nexport type User = MTUser.user;\n\nexport class AppUsersManager {\n  private storage = appStateManager.storages.users;\n  \n  private users: {[userId: number]: User};\n  private usernames: {[username: string]: number};\n  private contactsIndex: SearchIndex<number>;\n  private contactsFillPromise: Promise<Set<number>>;\n  private contactsList: Set<number>;\n  private updatedContactsList: boolean;\n  \n  private getTopPeersPromise: Promise<number[]>;\n\n  constructor() {\n    this.clear(true);\n\n    setInterval(this.updateUsersStatuses, 60000);\n\n    rootScope.addEventListener('state_synchronized', this.updateUsersStatuses);\n\n    rootScope.addMultipleEventsListeners({\n      updateUserStatus: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          user.status = update.status;\n          if(user.status) {\n            if('expires' in user.status) {\n              user.status.expires -= serverTimeManager.serverTimeOffset;\n            }\n\n            if('was_online' in user.status) {\n              user.status.was_online -= serverTimeManager.serverTimeOffset;\n            }\n          }\n\n          //user.sortStatus = this.getUserStatusForSort(user.status);\n          rootScope.dispatchEvent('user_update', userId);\n          this.setUserToStateIfNeeded(user);\n        } //////else console.warn('No user by id:', userId);\n      },\n\n      updateUserPhoto: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          this.forceUserOnline(userId);\n\n          if(update.photo._ === 'userProfilePhotoEmpty') {\n            delete user.photo;\n          } else {\n            user.photo = safeReplaceObject(user.photo, update.photo);\n          }\n\n          this.setUserToStateIfNeeded(user);\n\n          rootScope.dispatchEvent('user_update', userId);\n          rootScope.dispatchEvent('avatar_update', userId);\n        } else console.warn('No user by id:', userId);\n      },\n\n      updateUserName: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          this.forceUserOnline(userId);\n          \n          this.saveApiUser(Object.assign({}, user, {\n            first_name: update.first_name,\n            last_name: update.last_name,\n            username: update.username\n          }), true);\n        }\n      }\n    });\n\n    /* case 'updateContactLink':\n    this.onContactUpdated(update.user_id, update.my_link._ === 'contactLinkContact');\n    break; */\n\n    rootScope.addEventListener('language_change', (e) => {\n      const userId = this.getSelf().id;\n      this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\n    });\n\n    appStateManager.getState().then((state) => {\n      const users = appStateManager.storagesResults.users;\n      if(users.length) {\n        for(let i = 0, length = users.length; i < length; ++i) {\n          const user = users[i];\n          if(user) {\n            this.users[user.id] = user;\n          }\n        }\n      }\n\n      const contactsList = state.contactsList;\n      if(contactsList && Array.isArray(contactsList)) {\n        contactsList.forEach(userId => {\n          this.pushContact(userId);\n        });\n\n        if(contactsList.length) {\n          this.contactsFillPromise = Promise.resolve(this.contactsList);\n        }\n      }\n\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\n        if(peerId < 0 || this.storage.getFromCache(peerId)) {\n          return;\n        }\n\n        this.storage.set({\n          [peerId]: this.getUser(peerId)\n        });\n      });\n\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\n        if(peerId < 0 || !this.storage.getFromCache(peerId)) {\n          return;\n        }\n\n        this.storage.delete(peerId);\n      });\n    });\n  }\n\n  public clear(init = false) {\n    if(!init) {\n      const users = appStateManager.storagesResults.users;\n      for(const _userId in this.users) {\n        const userId = +_userId;\n        if(!userId) continue;\n        if(!appStateManager.isPeerNeeded(userId)) {\n          const user = this.users[userId];\n          if(user.username) {\n            delete this.usernames[cleanUsername(user.username)];\n          }\n\n          users.findAndSplice((user) => user.id === userId);\n          this.storage.delete(userId);\n          delete this.users[userId];\n        }\n      }\n    } else {\n      this.users = {};\n      this.usernames = {};\n    }\n    \n    this.contactsIndex = new SearchIndex();\n    this.contactsFillPromise = undefined;\n    this.contactsList = new Set();\n    this.updatedContactsList = false;\n  }\n\n  private onContactsModified() {\n    const contactsList = [...this.contactsList];\n    appStateManager.pushToState('contactsList', contactsList);\n  }\n\n  public fillContacts() {\n    if(this.contactsFillPromise && this.updatedContactsList) {\n      return this.contactsFillPromise;\n    }\n\n    this.updatedContactsList = true;\n\n    const promise = apiManager.invokeApi('contacts.getContacts').then((result) => {\n      if(result._ === 'contacts.contacts') {\n        this.saveApiUsers(result.users);\n\n        result.contacts.forEach((contact) => {\n          this.pushContact(contact.user_id);\n        });\n\n        this.onContactsModified();\n      }\n\n      this.contactsFillPromise = promise;\n\n      return this.contactsList;\n    });\n\n    return this.contactsFillPromise || (this.contactsFillPromise = promise);\n  }\n\n  public resolveUsername(username: string) {\n    if(username[0] === '@') {\n      username = username.slice(1);\n    }\n\n    username = username.toLowerCase();\n    if(this.usernames[username]) {\n      return Promise.resolve(this.users[this.usernames[username]]);\n    }\n\n    return apiManager.invokeApi('contacts.resolveUsername', {username}).then(resolvedPeer => {\n      this.saveApiUsers(resolvedPeer.users);\n      appChatsManager.saveApiChats(resolvedPeer.chats);\n\n      return appPeersManager.getPeer(appPeersManager.getPeerId(resolvedPeer.peer));\n    });\n  }\n\n  public pushContact(userId: number) {\n    this.contactsList.add(userId);\n    this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\n    appStateManager.requestPeer(userId, 'contacts');\n  }\n\n  public getUserSearchText(id: number) {\n    const user = this.users[id];\n    if(!user) {\n      return '';\n    }\n\n    const arr: string[] = [\n      user.first_name,\n      user.last_name,\n      user.phone,\n      user.username,\n      user.pFlags.self ? I18n.format('SavedMessages', true) : '',\n      user.pFlags.self ? 'Saved Messages' : ''\n    ];\n\n    return arr.filter(Boolean).join(' ');\n  }\n\n  public getContacts(query?: string, includeSaved = false) {\n    return this.fillContacts().then(_contactsList => {\n      let contactsList = [..._contactsList];\n      if(query) {\n        const results = this.contactsIndex.search(query);\n        const filteredContactsList = [...contactsList].filter(id => results.has(id));\n\n        contactsList = filteredContactsList;\n      }\n\n      contactsList.sort((userId1: number, userId2: number) => {\n        const sortName1 = (this.users[userId1] || {}).sortName || '';\n        const sortName2 = (this.users[userId2] || {}).sortName || '';\n\n        return sortName1.localeCompare(sortName2);\n      });\n\n      if(includeSaved) {\n        if(this.testSelfSearch(query)) {\n          contactsList.findAndSplice(p => p === rootScope.myId);\n          contactsList.unshift(rootScope.myId);\n        }\n      }\n\n      /* contactsList.sort((userId1: number, userId2: number) => {\n        const sortName1 = (this.users[userId1] || {}).sortName || '';\n        const sortName2 = (this.users[userId2] || {}).sortName || '';\n        if(sortName1 === sortName2) {\n          return 0;\n        } \n        \n        return sortName1 > sortName2 ? 1 : -1;\n      }); */\n\n      return contactsList;\n    });\n  }\n\n  public toggleBlock(peerId: number, block: boolean) {\n    return apiManager.invokeApiSingle(block ? 'contacts.block' : 'contacts.unblock', {\n      id: appPeersManager.getInputPeerById(peerId)\n    }).then(value => {\n      if(value) {\n        apiUpdatesManager.processLocalUpdate({\n          _: 'updatePeerBlocked',\n          peer_id: appPeersManager.getOutputPeer(peerId),\n          blocked: block\n        });\n      }\n\n      return value;\n    });\n  }\n\n  public testSelfSearch(query: string) {\n    const user = this.getSelf();\n    const index = new SearchIndex();\n    index.indexObject(user.id, this.getUserSearchText(user.id));\n    return index.search(query).has(user.id);\n  }\n\n  public saveApiUsers(apiUsers: any[], override?: boolean) {\n    apiUsers.forEach((user) => this.saveApiUser(user, override));\n  }\n\n  public saveApiUser(user: MTUser, override?: boolean) {\n    if(user._ === 'userEmpty') return;\n\n    const userId = user.id;\n    const oldUser = this.users[userId];\n\n    // ! commented block can affect performance !\n    // if(oldUser && !override) {\n    //   console.log('saveApiUser same');\n    //   return;\n    // }\n\n    if(user.pFlags === undefined) {\n      user.pFlags = {};\n    }\n\n    if(user.pFlags.min && oldUser !== undefined) {\n      return;\n    }\n\n    // * exclude from state\n    // defineNotNumerableProperties(user, ['initials', 'num', 'rFirstName', 'rFullName', 'rPhone', 'sortName', 'sortStatus']);\n\n    const fullName = user.first_name + ' ' + (user.last_name || '');\n    if(user.username) {\n      const searchUsername = cleanUsername(user.username);\n      this.usernames[searchUsername] = userId;\n    }\n\n    user.sortName = user.pFlags.deleted ? '' : cleanSearchText(fullName, false);\n\n    user.initials = RichTextProcessor.getAbbreviation(fullName);\n\n    if(user.status) {\n      if((user.status as UserStatus.userStatusOnline).expires) {\n        (user.status as UserStatus.userStatusOnline).expires -= serverTimeManager.serverTimeOffset;\n      }\n\n      if((user.status as UserStatus.userStatusOffline).was_online) {\n        (user.status as UserStatus.userStatusOffline).was_online -= serverTimeManager.serverTimeOffset;\n      }\n    }\n\n    //user.sortStatus = user.pFlags.bot ? -1 : this.getUserStatusForSort(user.status);\n\n    let changedPhoto = false, changedTitle = false;\n    if(oldUser === undefined) {\n      this.users[userId] = user;\n    } else {\n      if(user.first_name !== oldUser.first_name \n        || user.last_name !== oldUser.last_name \n        || user.username !== oldUser.username) {\n        changedTitle = true;\n      }\n\n      const oldPhotoId = (oldUser.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\n      const newPhotoId = (user.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\n      if(oldPhotoId !== newPhotoId) {\n        changedPhoto = true;\n      }\n\n      /* if(user.pFlags.bot && user.bot_info_version !== oldUser.bot_info_version) {\n        \n      } */\n\n      safeReplaceObject(oldUser, user);\n      rootScope.dispatchEvent('user_update', userId);\n    }\n\n    if(changedPhoto) {\n      rootScope.dispatchEvent('avatar_update', user.id);\n    }\n\n    if(changedTitle) {\n      rootScope.dispatchEvent('peer_title_edit', user.id);\n    }\n\n    this.setUserToStateIfNeeded(user);\n  }\n\n  public setUserToStateIfNeeded(user: User) {\n    if(appStateManager.isPeerNeeded(user.id)) {\n      this.storage.set({\n        [user.id]: user\n      });\n    }\n  }\n\n  public formatUserPhone(phone: string) {\n    return '+' + formatPhoneNumber(phone).formatted;\n  }\n\n  public getUserStatusForSort(status: User['status'] | number) {\n    if(typeof(status) === 'number') {\n      status = this.getUser(status).status;\n    }\n\n    if(status) {\n      const expires = status._ === 'userStatusOnline' ? status.expires : (status._ === 'userStatusOffline' ? status.was_online : 0);\n      if(expires) {\n        return expires;\n      }\n\n      /* const timeNow = tsNow(true);\n      switch(status._) {\n        case 'userStatusRecently':\n          return timeNow - 86400 * 3;\n        case 'userStatusLastWeek':\n          return timeNow - 86400 * 7;\n        case 'userStatusLastMonth':\n          return timeNow - 86400 * 30;\n      } */\n      switch(status._) {\n        case 'userStatusRecently':\n          return 3;\n        case 'userStatusLastWeek':\n          return 2;\n        case 'userStatusLastMonth':\n          return 1;\n      }\n    }\n\n    return 0;\n  }\n\n  public getUser(id: any): User {\n    if(isObject(id)) {\n      return id;\n    }\n\n    return this.users[id] || {id: id, pFlags: {deleted: true}, access_hash: ''} as User;\n  }\n\n  public getSelf() {\n    return this.getUser(rootScope.myId);\n  }\n\n  public getUserStatusString(userId: number): HTMLElement {\n    let key: LangPackKey;\n    let args: any[];\n\n    switch(userId) {\n      case REPLIES_PEER_ID:\n        key = 'Peer.RepliesNotifications';\n        break;\n      case 777000:\n        key = 'Peer.ServiceNotifications';\n        break;\n      default: {\n        if(this.isBot(userId)) {\n          key = 'Bot';\n          break;\n        }\n\n        const user = this.getUser(userId);\n        if(!user) {\n          key = '' as any;\n          break;\n        }\n\n        if(user.pFlags.support) {\n          key = 'SupportStatus';\n          break;\n        }\n\n        switch(user.status?._) {\n          case 'userStatusRecently': {\n            key = 'Lately';\n            break;\n          }\n    \n          case 'userStatusLastWeek': {\n            key = 'WithinAWeek';\n            break;\n          }\n    \n          case 'userStatusLastMonth': {\n            key = 'WithinAMonth';\n            break;\n          }\n          \n          case 'userStatusOffline': {\n            const date = user.status.was_online;\n            const now = Date.now() / 1000;\n            \n            if((now - date) < 60) {\n              key = 'Peer.Status.justNow';\n            } else if((now - date) < 3600) {\n              key = 'Peer.Status.minAgo';\n              const c = (now - date) / 60 | 0;\n              args = [c];\n            } else if(now - date < 86400) {\n              key = 'LastSeen.HoursAgo';\n              const c = (now - date) / 3600 | 0;\n              args = [c];\n            } else {\n              key = 'Peer.Status.LastSeenAt';\n              const d = new Date(date * 1000);\n              args = [('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2), \n                ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2)];\n            }\n            \n            break;\n          }\n    \n          case 'userStatusOnline': {\n            key = 'Online';\n            break;\n          }\n    \n          default: {\n            key = 'ALongTimeAgo';\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n    \n    return i18n(key, args);\n  }\n\n  public isBot(id: number) {\n    return this.users[id] && this.users[id].pFlags.bot;\n  }\n\n  public isContact(id: number) {\n    return this.contactsList.has(id) || (this.users[id] && this.users[id].pFlags.contact);\n  }\n  \n  public isRegularUser(id: number) {\n    const user = this.users[id];\n    return user && !this.isBot(id) && !user.pFlags.deleted && !user.pFlags.support;\n  }\n\n  public isNonContactUser(id: number) {\n    return this.isRegularUser(id) && !this.isContact(id) && id !== rootScope.myId;\n  }\n\n  public hasUser(id: number, allowMin?: boolean) {\n    const user = this.users[id];\n    return isObject(user) && (allowMin || !user.pFlags.min);\n  }\n\n  public canSendToUser(id: number) {\n    const user = this.getUser(id);\n    return !user.pFlags.deleted && user.username !== 'replies';\n  }\n\n  public getUserPhoto(id: number) {\n    const user = this.getUser(id);\n\n    return user && user.photo || {\n      _: 'userProfilePhotoEmpty'\n    };\n  }\n\n  public getUserString(id: number) {\n    const user = this.getUser(id);\n    return 'u' + id + (user.access_hash ? '_' + user.access_hash : '');\n  }\n\n  public getUserInput(id: number): InputUser {\n    const user = this.getUser(id);\n    if(user.pFlags && user.pFlags.self) {\n      return {_: 'inputUserSelf'};\n    }\n\n    return {\n      _: 'inputUser',\n      user_id: id,\n      access_hash: user.access_hash\n    };\n  }\n\n  public updateUsersStatuses = () => {\n    const timestampNow = tsNow(true);\n    for(const i in this.users) {\n      const user = this.users[i];\n\n      if(user.status &&\n        user.status._ === 'userStatusOnline' &&\n        user.status.expires < timestampNow) {\n\n        user.status = {_: 'userStatusOffline', was_online: user.status.expires};\n        rootScope.dispatchEvent('user_update', user.id);\n\n        this.setUserToStateIfNeeded(user);\n      }\n    }\n  };\n\n  public forceUserOnline(id: number, eventTimestamp?: number) {\n    if(this.isBot(id)) {\n      return;\n    }\n\n    const timestamp = tsNow(true);\n    const onlineTimeFor = 60;\n    if(eventTimestamp) {\n      if((timestamp - eventTimestamp) >= onlineTimeFor) {\n        return;\n      }\n    } else if(apiUpdatesManager.updatesState.syncLoading) {\n      return;\n    }\n\n    const user = this.getUser(id);\n    if(user &&\n      user.status &&\n      user.status._ !== 'userStatusOnline' &&\n      user.status._ !== 'userStatusEmpty' &&\n      !user.pFlags.support &&\n      !user.pFlags.deleted) {\n\n      user.status = {\n        _: 'userStatusOnline',\n        expires: timestamp + onlineTimeFor\n      };\n      \n      //user.sortStatus = this.getUserStatusForSort(user.status);\n      rootScope.dispatchEvent('user_update', id);\n\n      this.setUserToStateIfNeeded(user);\n    }\n  }\n\n  /* function importContact (phone, firstName, lastName) {\n      return MtpApiManager.invokeApi('contacts.importContacts', {\n        contacts: [{\n          _: 'inputPhoneContact',\n          client_id: '1',\n          phone: phone,\n          first_name: firstName,\n          last_name: lastName\n        }],\n        replace: false\n      }).then(function (importedContactsResult) {\n        saveApiUsers(importedContactsResult.users)\n\n        var foundUserID = false\n        angular.forEach(importedContactsResult.imported, function (importedContact) {\n          onContactUpdated(foundUserID = importedContact.user_id, true)\n        })\n\n        return foundUserID || false\n      })\n  }\n\n  function importContacts (contacts) {\n    var inputContacts = [],\n      i\n    var j\n\n    for (i = 0; i < contacts.length; i++) {\n      for (j = 0; j < contacts[i].phones.length; j++) {\n        inputContacts.push({\n          _: 'inputPhoneContact',\n          client_id: (i << 16 | j).toString(10),\n          phone: contacts[i].phones[j],\n          first_name: contacts[i].first_name,\n          last_name: contacts[i].last_name\n        })\n      }\n    }\n\n    return MtpApiManager.invokeApi('contacts.importContacts', {\n      contacts: inputContacts,\n      replace: false\n    }).then(function (importedContactsResult) {\n      saveApiUsers(importedContactsResult.users)\n\n      var result = []\n      angular.forEach(importedContactsResult.imported, function (importedContact) {\n        onContactUpdated(importedContact.user_id, true)\n        result.push(importedContact.user_id)\n      })\n\n      return result\n    })\n  } */\n\n  /* public deleteContacts(userIds: number[]) {\n    var ids: any[] = [];\n    userIds.forEach((userId) => {\n      ids.push(this.getUserInput(userId));\n    })\n\n    return apiManager.invokeApi('contacts.deleteContacts', {\n      id: ids\n    }).then(() => {\n      userIds.forEach((userId) => {\n        this.onContactUpdated(userId, false);\n      });\n    });\n  } */\n\n  public getTopPeers(): Promise<number[]> {\n    if(this.getTopPeersPromise) return this.getTopPeersPromise;\n\n    return this.getTopPeersPromise = appStateManager.getState().then((state) => {\n      if(state?.topPeers?.length) {\n        return state.topPeers;\n      }\n\n      return apiManager.invokeApi('contacts.getTopPeers', {\n        correspondents: true,\n        offset: 0,\n        limit: 15,\n        hash: 0,\n      }).then((result) => {\n        let peerIds: number[] = [];\n        if(result._ === 'contacts.topPeers') {\n          //console.log(result);\n          this.saveApiUsers(result.users);\n          appChatsManager.saveApiChats(result.chats);\n\n          if(result.categories.length) {\n            peerIds = result.categories[0].peers.map((topPeer) => {\n              const peerId = appPeersManager.getPeerId(topPeer.peer);\n              appStateManager.requestPeer(peerId, 'topPeer');\n              return peerId;\n            });\n          }\n        }\n  \n        appStateManager.pushToState('topPeers', peerIds);\n  \n        return peerIds;\n      });\n    });\n  }\n\n  public getBlocked(offset = 0, limit = 0) {\n    return apiManager.invokeApiSingle('contacts.getBlocked', {offset, limit}).then(contactsBlocked => {\n      this.saveApiUsers(contactsBlocked.users);\n      appChatsManager.saveApiChats(contactsBlocked.chats);\n      const count = contactsBlocked._ === 'contacts.blocked' ? contactsBlocked.users.length + contactsBlocked.chats.length : contactsBlocked.count;\n\n      const peerIds = contactsBlocked.users.map(u => u.id).concat(contactsBlocked.chats.map(c => -c.id));\n\n      return {count, peerIds};\n    });\n  }\n\n  /* public searchContacts(query: string, limit = 20) {\n    return Promise.all([\n      this.getContacts(query),\n      apiManager.invokeApi('contacts.search', {\n        q: query,\n        limit\n      })\n    ]).then(results => {\n      const [myContacts, peers] = results;\n\n      this.saveApiUsers(peers.users);\n      appChatsManager.saveApiChats(peers.chats);\n\n      // * contacts.search returns duplicates in my_results\n      const myResults = new Set(myContacts.concat(peers.my_results.map(p => appPeersManager.getPeerID(p))));\n\n      const out = {\n        my_results: [...myResults].slice(0, limit),\n        results: peers.results.map(p => appPeersManager.getPeerID(p))\n      };\n\n      return out;\n    });\n  } */\n  public searchContacts(query: string, limit = 20) {\n    return apiManager.invokeApiSingle('contacts.search', {\n      q: query,\n      limit\n    }).then(peers => {\n      this.saveApiUsers(peers.users);\n      appChatsManager.saveApiChats(peers.chats);\n\n      const out = {\n        my_results: filterUnique(peers.my_results.map(p => appPeersManager.getPeerId(p))), // ! contacts.search returns duplicates in my_results\n        results: peers.results.map(p => appPeersManager.getPeerId(p))\n      };\n\n      return out;\n    });\n  }\n\n  private onContactUpdated(userId: number, isContact: boolean) {\n    const curIsContact = this.isContact(userId);\n    if(isContact !== curIsContact) {\n      if(isContact) {\n        this.pushContact(userId);\n      } else {\n        this.contactsList.delete(userId);\n      }\n\n      this.onContactsModified();\n\n      rootScope.dispatchEvent('contacts_update', userId);\n    }\n  }\n\n  public updateUsername(username: string) {\n    return apiManager.invokeApi('account.updateUsername', {\n      username\n    }).then((user) => {\n      this.saveApiUser(user);\n    });\n  }\n\n  public setUserStatus(userId: number, offline: boolean) {\n    if(this.isBot(userId)) {\n      return;\n    }\n\n    const user = this.users[userId];\n    if(user) {\n      const status: any = offline ? {\n        _: 'userStatusOffline',\n        was_online: tsNow(true)\n      } : {\n        _: 'userStatusOnline',\n        expires: tsNow(true) + 500\n      };\n\n      user.status = status;\n      //user.sortStatus = this.getUserStatusForSort(user.status);\n      rootScope.dispatchEvent('user_update', userId);\n    }\n  }\n\n  public addContact(userId: number, first_name: string, last_name: string, phone: string, showPhone?: true) {\n    return apiManager.invokeApi('contacts.addContact', {\n      id: this.getUserInput(userId),\n      first_name,\n      last_name,\n      phone,\n      add_phone_privacy_exception: showPhone\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\n\n      this.onContactUpdated(userId, true);\n    });\n  }\n\n  public deleteContacts(userIds: number[]) {\n    return apiManager.invokeApi('contacts.deleteContacts', {\n      id: userIds.map(userId => this.getUserInput(userId))\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\n\n      userIds.forEach(userId => {\n        this.onContactUpdated(userId, false);\n      });\n    });\n  }\n}\n\nconst appUsersManager = new AppUsersManager();\nMOUNT_CLASS_TO.appUsersManager = appUsersManager;\nexport default appUsersManager\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport { isObject, safeReplaceObject, copy, deepEqual } from \"../../helpers/object\";\nimport { ChannelParticipant, Chat, ChatAdminRights, ChatBannedRights, ChatParticipant, ChatPhoto, InputChannel, InputChatPhoto, InputFile, InputPeer, Update, Updates } from \"../../layer\";\nimport apiManagerProxy from \"../mtproto/mtprotoworker\";\nimport apiManager from '../mtproto/mtprotoworker';\nimport { RichTextProcessor } from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from \"./appStateManager\";\nimport appUsersManager from \"./appUsersManager\";\n\nexport type Channel = Chat.channel;\n\nexport type ChatRights = keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags'] | 'change_type' | 'change_permissions' | 'delete_chat' | 'view_participants';\n\nexport class AppChatsManager {\n  private storage = appStateManager.storages.chats;\n  \n  private chats: {[id: number]: Chat.channel | Chat.chat | any};\n  //private usernames: any;\n  //private channelAccess: any;\n  //private megagroups: {[id: number]: true};\n\n  constructor() {\n    this.clear(true);\n\n    rootScope.addMultipleEventsListeners({\n      /* updateChannel: (update) => {\n        const channelId = update.channel_id;\n        //console.log('updateChannel:', update);\n        rootScope.broadcast('channel_settings', {channelId});\n      }, */\n\n      updateChannelParticipant: (update) => {\n        apiManagerProxy.clearCache('channels.getParticipants', (params) => {\n          return (params.channel as InputChannel.inputChannel).channel_id === update.channel_id;\n        });\n      },\n\n      updateChatDefaultBannedRights: (update) => {\n        const chatId = -appPeersManager.getPeerId(update.peer);\n        const chat: Chat.chat = this.chats[chatId];\n        if(chat) {\n          chat.default_banned_rights = update.default_banned_rights;\n          rootScope.dispatchEvent('chat_update', chatId);\n        }\n      }\n    });\n\n    appStateManager.getState().then((state) => {\n      const chats = appStateManager.storagesResults.chats;\n      if(chats.length) {\n        for(let i = 0, length = chats.length; i < length; ++i) {\n          const chat = chats[i];\n          if(chat) {\n            this.chats[chat.id] = chat;\n          }\n        }\n      }\n\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\n        if(peerId > 0 || this.storage.getFromCache(-peerId)) {\n          return;\n        }\n\n        this.storage.set({\n          [-peerId]: this.getChat(-peerId)\n        });\n      });\n\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\n        if(peerId > 0 || !this.storage.getFromCache(-peerId)) {\n          return;\n        }\n\n        this.storage.delete(-peerId);\n      });\n    });\n  }\n\n  public clear(init = false) {\n    if(!init) {\n      const chats = appStateManager.storagesResults.chats;\n      for(const _chatId in this.chats) {\n        const chatId = +_chatId;\n        if(!chatId) continue;\n        if(!appStateManager.isPeerNeeded(-chatId)) {\n          /* const chat = this.chats[chatId];\n          if(chat.username) {\n            delete this.usernames[cleanUsername(chat.username)];\n          } */\n          \n          chats.findAndSplice((chat) => chat.id === chatId);\n          this.storage.delete(chatId);\n          delete this.chats[chatId];\n        }\n      }\n    } else {\n      this.chats = {};\n    }\n  }\n\n  public saveApiChats(apiChats: any[], override?: boolean) {\n    apiChats.forEach(chat => this.saveApiChat(chat, override));\n  }\n\n  public saveApiChat(chat: Chat, override?: boolean) {\n    if(chat._ === 'chatEmpty') return;\n    /* if(chat._ !== 'chat' && chat._ !== 'channel') {\n      return;\n    } */\n    \n    // * exclude from state\n    // defineNotNumerableProperties(chat, ['rTitle', 'initials']);\n\n    const oldChat: Exclude<Chat, Chat.chatEmpty> = this.chats[chat.id];\n\n    /* if(oldChat && !override) {\n      return;\n    } */\n\n    if((chat as Chat.chat).pFlags === undefined) {\n      (chat as Chat.chat).pFlags = {};\n    }\n\n    if((chat as Chat.channel).pFlags.min && oldChat !== undefined) {\n      return;\n    }\n\n    chat.initials = RichTextProcessor.getAbbreviation(chat.title);\n\n    if(chat._ === 'channel' &&\n        chat.participants_count === undefined &&\n        oldChat !== undefined &&\n        (oldChat as Chat.channel).participants_count) {\n      chat.participants_count = (oldChat as Chat.channel).participants_count;\n    }\n\n    /* if(chat.username) {\n      let searchUsername = searchIndexManager.cleanUsername(chat.username);\n      this.usernames[searchUsername] = chat.id;\n    } */\n\n    let changedPhoto = false, changedTitle = false;\n    if(oldChat === undefined) {\n      this.chats[chat.id] = chat;\n    } else {\n      const oldPhotoId = ((oldChat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\n      const newPhotoId = ((chat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\n      if(oldPhotoId !== newPhotoId) {\n        changedPhoto = true;\n      }\n\n      if(oldChat.title !== chat.title) {\n        changedTitle = true;\n      }\n\n      safeReplaceObject(oldChat, chat);\n      rootScope.dispatchEvent('chat_update', chat.id);\n    }\n\n    if(changedPhoto) {\n      rootScope.dispatchEvent('avatar_update', -chat.id);\n    }\n\n    if(changedTitle) {\n      rootScope.dispatchEvent('peer_title_edit', -chat.id);\n    }\n\n    if(appStateManager.isPeerNeeded(-chat.id)) {\n      this.storage.set({\n        [chat.id]: chat\n      });\n    }\n  }\n\n  public getChat(id: number) {\n    if(id < 0) id = -id;\n    return this.chats[id] || {_: 'chatEmpty', id, deleted: true, access_hash: '', pFlags: {}/* this.channelAccess[id] */};\n  }\n\n  public combineParticipantBannedRights(id: number, rights: ChatBannedRights) {\n    const chat: Chat.channel = this.getChat(id);\n\n    if(chat.default_banned_rights) {\n      rights = copy(rights);\n      const defaultRights = chat.default_banned_rights.pFlags;\n      for(let i in defaultRights) {\n        // @ts-ignore\n        rights.pFlags[i] = defaultRights[i];\n      }\n    }\n\n    return rights;\n  }\n\n  public hasRights(id: number, action: ChatRights, rights?: ChatAdminRights | ChatBannedRights, isThread?: boolean) {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'chatEmpty') return false;\n\n    if(chat._ === 'chatForbidden' ||\n        chat._ === 'channelForbidden' ||\n        (chat as Chat.chat).pFlags.kicked ||\n        (chat.pFlags.left && !(chat as Chat.channel).pFlags.megagroup)) {\n      return false;\n    }\n\n    if(chat.pFlags.creator && rights === undefined) {\n      return true;\n    }\n\n    if(!rights) {\n      rights = chat.admin_rights || (chat as Chat.channel).banned_rights || chat.default_banned_rights;\n\n      if(!rights) {\n        return false;\n      }\n    }\n\n    let myFlags: Partial<{[flag in keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags']]: true}> = {};\n    if(rights) {\n      myFlags = rights.pFlags as any;\n    }\n\n    switch(action) {\n      case 'embed_links':\n      case 'send_games':\n      case 'send_gifs':\n      case 'send_inline':\n      case 'send_media':\n      case 'send_messages':\n      case 'send_polls':\n      case 'send_stickers': {\n        if(!isThread && chat.pFlags.left) {\n          return false;\n        }\n\n        if(rights._ === 'chatBannedRights' && myFlags[action]) {\n          return false;\n        }\n\n        if(chat._ === 'channel') {\n          if(!chat.pFlags.megagroup && !myFlags.post_messages) {\n            return false;\n          }\n        }\n\n        break;\n      }\n\n      // * revoke foreign messages\n      case 'delete_messages': {\n        return !!myFlags.delete_messages;\n      }\n\n      case 'pin_messages': {\n        return rights._ === 'chatAdminRights' ? myFlags[action] || !!myFlags.post_messages : !myFlags[action];\n      }\n\n      case 'invite_users':\n      case 'change_info': {\n        return rights._ === 'chatAdminRights' ? myFlags[action] : !myFlags[action];\n      }\n\n      // * only creator can do that\n      case 'change_type':\n      case 'delete_chat': {\n        return false;\n      }\n\n      case 'change_permissions': {\n        return rights._ === 'chatAdminRights' && myFlags['ban_users'];\n      }\n\n      case 'view_participants': {\n        return !!(chat._ === 'chat' || !chat.pFlags.broadcast || chat.pFlags.creator || chat.admin_rights);\n      }\n    }\n\n    return true;\n  }\n\n  public editChatDefaultBannedRights(id: number, banned_rights: ChatBannedRights) {\n    const chat: Chat.chat = this.getChat(id);\n    if(chat.default_banned_rights) {\n      if(chat.default_banned_rights.until_date === banned_rights.until_date && deepEqual(chat.default_banned_rights.pFlags, banned_rights.pFlags)) {\n        return Promise.resolve();\n      }\n    }\n    \n    return apiManager.invokeApi('messages.editChatDefaultBannedRights', {\n      peer: appPeersManager.getInputPeerById(-id),\n      banned_rights\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  /* public resolveUsername(username: string) {\n    return this.usernames[username] || 0;\n  } */\n\n  /* public saveChannelAccess(id: number, accessHash: string) {\n    this.channelAccess[id] = accessHash;\n  } */\n\n  /* public saveIsMegagroup(id: number) {\n    this.megagroups[id] = true;\n  } */\n\n  public isChannel(id: number) {\n    const chat = this.chats[id];\n    return chat && (chat._ === 'channel' || chat._ === 'channelForbidden')/*  || this.channelAccess[id] */;\n  }\n\n  public isMegagroup(id: number) {\n    /* if(this.megagroups[id]) {\n      return true;\n    } */\n\n    const chat = this.chats[id];\n    return chat && chat._ === 'channel' && chat.pFlags.megagroup;\n  }\n\n  public isBroadcast(id: number) {\n    return this.isChannel(id) && !this.isMegagroup(id);\n  }\n\n  public isInChat(id: number) {\n    let good = true;\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'channelForbidden' \n      || chat._ === 'chatForbidden' \n      || chat._ === 'chatEmpty' \n      || (chat as Chat.chat).pFlags.left \n      || (chat as Chat.chat).pFlags.kicked \n      || (chat as Chat.chat).pFlags.deactivated) {\n      good = false;\n    }\n\n    return good;\n  }\n\n  public getChannelInput(id: number): InputChannel {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'chatEmpty' || !(chat as Chat.channel).access_hash) {\n      return {\n        _: 'inputChannelEmpty'\n      };\n    } else {\n      return {\n        _: 'inputChannel',\n        channel_id: id,\n        access_hash: (chat as Chat.channel).access_hash/*  || this.channelAccess[id] */ || '0'\n      };\n    }\n  }\n\n  public getChatInputPeer(id: number): InputPeer.inputPeerChat {\n    return {\n      _: 'inputPeerChat',\n      chat_id: id\n    };\n  }\n\n  public getChannelInputPeer(id: number): InputPeer.inputPeerChannel {\n    return {\n      _: 'inputPeerChannel',\n      channel_id: id,\n      access_hash: this.getChat(id).access_hash/*  || this.channelAccess[id] */ || 0\n    };\n  }\n\n  public hasChat(id: number, allowMin?: true) {\n    const chat = this.chats[id]\n    return isObject(chat) && (allowMin || !chat.pFlags.min);\n  }\n\n  public getChatPhoto(id: number) {\n    const chat: Chat.chat = this.getChat(id);\n\n    return chat && chat.photo || {\n      _: 'chatPhotoEmpty'\n    };\n  }\n\n  public getChatString(id: number) {\n    const chat = this.getChat(id);\n    if(this.isChannel(id)) {\n      return (this.isMegagroup(id) ? 's' : 'c') + id + '_' + chat.access_hash;\n    }\n    return 'g' + id;\n  }\n\n  /* public wrapForFull(id: number, fullChat: any) {\n    const chatFull = copy(fullChat);\n    const chat = this.getChat(id);\n\n    if(!chatFull.participants_count) {\n      chatFull.participants_count = chat.participants_count;\n    }\n\n    if(chatFull.participants &&\n        chatFull.participants._ === 'chatParticipants') {\n      chatFull.participants.participants = this.wrapParticipants(id, chatFull.participants.participants);\n    }\n\n    if(chatFull.about) {\n      chatFull.rAbout = RichTextProcessor.wrapRichText(chatFull.about, {noLinebreaks: true});\n    }\n\n    //chatFull.peerString = this.getChatString(id);\n    chatFull.chat = chat;\n\n    return chatFull;\n  }\n\n  public wrapParticipants(id: number, participants: any[]) {\n    const chat = this.getChat(id);\n    const myId = appUsersManager.getSelf().id;\n    if(this.isChannel(id)) {\n      const isAdmin = chat.pFlags.creator;\n      participants.forEach((participant) => {\n        participant.canLeave = myId === participant.user_id;\n        participant.canKick = isAdmin && participant._ === 'channelParticipant';\n\n        // just for order by last seen\n        participant.user = appUsersManager.getUser(participant.user_id);\n      });\n    } else {\n      const isAdmin = chat.pFlags.creator || chat.pFlags.admins_enabled && chat.pFlags.admin;\n      participants.forEach((participant) => {\n        participant.canLeave = myId === participant.user_id;\n        participant.canKick = !participant.canLeave && (\n          chat.pFlags.creator ||\n          participant._ === 'chatParticipant' && (isAdmin || myId === participant.inviter_id)\n        );\n\n        // just for order by last seen\n        participant.user = appUsersManager.getUser(participant.user_id);\n      });\n    }\n\n    return participants;\n  } */\n\n  public createChannel(title: string, about: string): Promise<number> {\n    return apiManager.invokeApi('channels.createChannel', {\n      broadcast: true,\n      title,\n      about\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n\n      const channelId = (updates as any).chats[0].id;\n      rootScope.dispatchEvent('history_focus', {peerId: -channelId});\n\n      return channelId;\n    });\n  }\n\n  public inviteToChannel(id: number, userIds: number[]) {\n    const input = this.getChannelInput(id);\n    const usersInputs = userIds.map(u => appUsersManager.getUserInput(u));\n\n    return apiManager.invokeApi('channels.inviteToChannel', {\n      channel: input,\n      users: usersInputs\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public createChat(title: string, userIds: number[]): Promise<number> {\n    return apiManager.invokeApi('messages.createChat', {\n      users: userIds.map(u => appUsersManager.getUserInput(u)),\n      title\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n\n      const chatId = (updates as any as Updates.updates).chats[0].id;\n      rootScope.dispatchEvent('history_focus', {peerId: -chatId});\n\n      return chatId;\n    });\n  }\n\n  private onChatUpdated = (chatId: number, updates: any) => {\n    //console.log('onChatUpdated', chatId, updates);\n\n    apiUpdatesManager.processUpdateMessage(updates);\n    if(updates &&\n        /* updates.updates &&\n        updates.updates.length && */\n        this.isChannel(chatId)) {\n      rootScope.dispatchEvent('invalidate_participants', chatId);\n    }\n  };\n\n  public leaveChannel(id: number) {\n    return apiManager.invokeApi('channels.leaveChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public joinChannel(id: number) {\n    return apiManager.invokeApi('channels.joinChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public addChatUser(id: number, userId: number, fwdLimit = 100) {\n    return apiManager.invokeApi('messages.addChatUser', {\n      chat_id: id,\n      user_id: appUsersManager.getUserInput(userId),\n      fwd_limit: fwdLimit\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public deleteChatUser(id: number, userId: number) {\n    return apiManager.invokeApi('messages.deleteChatUser', {\n      chat_id: id,\n      user_id: appUsersManager.getUserInput(userId)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public leaveChat(id: number) {\n    return this.deleteChatUser(id, appUsersManager.getSelf().id);\n  }\n\n  public leave(id: number) {\n    return this.isChannel(id) ? this.leaveChannel(id) : this.leaveChat(id);\n  }\n\n  public delete(id: number) {\n    return this.isChannel(id) ? this.deleteChannel(id) : this.deleteChat(id);\n  }\n\n  public deleteChannel(id: number) {\n    return apiManager.invokeApi('channels.deleteChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public deleteChat(id: number) {\n    //return this.leaveChat(id).then(() => {\n      return apiManager.invokeApi('messages.deleteChat', {\n        chat_id: id\n      });\n    //});\n  }\n\n  public migrateChat(id: number): Promise<number> {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'channel') return Promise.resolve(chat.id);\n    return apiManager.invokeApi('messages.migrateChat', {\n      chat_id: id\n    }).then((updates) => {\n      this.onChatUpdated(id, updates);\n      const update: Update.updateChannel = (updates as Updates.updates).updates.find(u => u._ === 'updateChannel') as any;\n      return update.channel_id;\n    });\n  }\n\n  public updateUsername(id: number, username: string) {\n    return apiManager.invokeApi('channels.updateUsername', {\n      channel: this.getChannelInput(id),\n      username\n    }).then((bool) => {\n      if(bool) {\n        const chat: Chat.channel = this.getChat(id);\n        chat.username = username;\n      }\n\n      return bool;\n    });\n  }\n\n  public editPhoto(id: number, inputFile: InputFile) {\n    const inputChatPhoto: InputChatPhoto = {\n      _: 'inputChatUploadedPhoto',\n      file: inputFile\n    };\n\n    let promise: any;\n    if(this.isChannel(id)) {\n      promise = apiManager.invokeApi('channels.editPhoto', {\n        channel: this.getChannelInput(id),\n        photo: inputChatPhoto\n      });\n    } else {\n      promise = apiManager.invokeApi('messages.editChatPhoto', {\n        chat_id: id,\n        photo: inputChatPhoto\n      });\n    }\n\n    return promise.then((updates: any) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public editTitle(id: number, title: string) {\n    let promise: any;\n\n    if(this.isChannel(id)) {\n      promise = apiManager.invokeApi('channels.editTitle', {\n        channel: this.getChannelInput(id),\n        title\n      });\n    } else {\n      promise = apiManager.invokeApi('messages.editChatTitle', {\n        chat_id: id,\n        title\n      });\n    }\n\n    return promise.then((updates: any) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public editAbout(id: number, about: string) {\n    return apiManager.invokeApi('messages.editChatAbout', {\n      peer: appPeersManager.getInputPeerById(-id),\n      about\n    }).then(bool => {\n      //apiUpdatesManager.processUpdateMessage(updates);\n      rootScope.dispatchEvent('peer_bio_edit', -id);\n    });\n  }\n\n  public getParticipantPeerId(participant: ChannelParticipant | ChatParticipant) {\n    const peerId = (participant as ChannelParticipant.channelParticipantBanned).peer ? \n      appPeersManager.getPeerId((participant as ChannelParticipant.channelParticipantBanned).peer) : \n      (participant as ChatParticipant.chatParticipant).user_id;\n    return peerId;\n  }\n\n  public editBanned(id: number, participant: number | ChannelParticipant, banned_rights: ChatBannedRights) {\n    const peerId = typeof(participant) === 'number' ? participant : this.getParticipantPeerId(participant);\n    return apiManager.invokeApi('channels.editBanned', {\n      channel: this.getChannelInput(id),\n      participant: appPeersManager.getInputPeerById(peerId),\n      banned_rights\n    }).then((updates) => {\n      this.onChatUpdated(id, updates);\n\n      if(typeof(participant) !== 'number') {\n        const timestamp = Date.now() / 1000 | 0;\n        apiUpdatesManager.processLocalUpdate({\n          _: 'updateChannelParticipant',\n          channel_id: id,\n          date: timestamp,\n          actor_id: undefined,\n          qts: undefined,\n          user_id: peerId,\n          prev_participant: participant,\n          new_participant: Object.keys(banned_rights.pFlags).length ? {\n            _: 'channelParticipantBanned',\n            date: timestamp,\n            banned_rights,\n            kicked_by: appUsersManager.getSelf().id,\n            peer: appPeersManager.getOutputPeer(peerId),\n            pFlags: {}\n          } : undefined\n        });\n      }\n    });\n  }\n\n  public clearChannelParticipantBannedRights(id: number, participant: number | ChannelParticipant) {\n    return this.editBanned(id, participant, {\n      _: 'chatBannedRights',\n      until_date: 0,\n      pFlags: {}\n    });\n  }\n  \n  public kickFromChannel(id: number, participant: number | ChannelParticipant) {\n    return this.editBanned(id, participant, {\n      _: 'chatBannedRights',\n      until_date: 0,\n      pFlags: {\n        view_messages: true\n      }\n    });\n  }\n}\n\nconst appChatsManager = new AppChatsManager();\nMOUNT_CLASS_TO.appChatsManager = appChatsManager;\nexport default appChatsManager;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport type { ChatPhoto, DialogPeer, InputDialogPeer, InputNotifyPeer, InputPeer, Peer, Update, UserProfilePhoto } from \"../../layer\";\nimport type { LangPackKey } from \"../langPack\";\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport { isObject } from \"../../helpers/object\";\nimport { RichTextProcessor } from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport appChatsManager from \"./appChatsManager\";\nimport appUsersManager from \"./appUsersManager\";\nimport I18n from '../langPack';\n\n// https://github.com/eelcohn/Telegram-API/wiki/Calculating-color-for-a-Telegram-user-on-IRC\n/*\n  HTML-color  IRC-color  Description\n  #c03d33     4          red\n  #4fad2d     3          green\n  #d09306     7          yellow\n  #168acd     10         blue\n  #8544d6     6          purple\n  #cd4073     13         pink\n  #2996ad     11         sea\n  #ce671b     5          orange\n  */\nconst DialogColorsFg = ['#fc5c51', '#0fb297', '#d09306', '#3d72ed', '#895dd5', '#cd4073', '#00c1a6', '#fa790f'];\nconst DialogColors = ['red', 'green', 'yellow', 'blue', 'violet', 'pink', 'cyan', 'orange'];\nconst DialogColorsMap = [0, 7, 4, 1, 6, 3, 5];\n\nexport type PeerType = 'channel' | 'chat' | 'megagroup' | 'group' | 'saved';\nexport class AppPeersManager {\n  constructor() {\n    rootScope.addMultipleEventsListeners({\n      updatePeerBlocked: (update) => {\n        rootScope.dispatchEvent('peer_block', {peerId: this.getPeerId(update.peer_id), blocked: update.blocked});\n      }\n    });\n  }\n  /* public savePeerInstance(peerId: number, instance: any) {\n    if(peerId < 0) appChatsManager.saveApiChat(instance);\n    else appUsersManager.saveApiUser(instance);\n  } */\n\n  public canPinMessage(peerId: number) {\n    return peerId > 0 || appChatsManager.hasRights(-peerId, 'pin_messages');\n  }\n\n  public getPeerPhoto(peerId: number): UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto {\n    const photo = peerId > 0\n      ? appUsersManager.getUserPhoto(peerId)\n      : appChatsManager.getChatPhoto(-peerId);\n\n    return photo._ !== 'chatPhotoEmpty' && photo._ !== 'userProfilePhotoEmpty' ? photo : null;\n  }\n\n  public getPeerMigratedTo(peerId: number) {\n    if(peerId >= 0) {\n      return false;\n    }\n\n    let chat = appChatsManager.getChat(-peerId);\n    if(chat && chat.migrated_to && chat.pFlags.deactivated) {\n      return this.getPeerId(chat.migrated_to);\n    }\n    \n    return false;\n  }\n\n  public getPeerTitle(peerId: number | any, plainText = false, onlyFirstName = false) {\n    if(!peerId) {\n      peerId = rootScope.myId;\n    }\n    \n    let peer: any = {}; \n    if(!isObject(peerId)) {\n      peer = this.getPeer(peerId);\n    } else peer = peerId;\n\n    let title = '';\n    if(peerId > 0) {\n      if(peer.first_name) title += peer.first_name;\n      if(peer.last_name) title += ' ' + peer.last_name;\n  \n      if(!title) title = peer.pFlags.deleted ? I18n.format('HiddenName', true) : peer.username;\n      else title = title.trim();\n    } else {\n      title = peer.title;\n    }\n\n    if(onlyFirstName) {\n      title = title.split(' ')[0];\n    }\n    \n    return plainText ? title : RichTextProcessor.wrapEmojiText(title);\n  }\n  \n  public getOutputPeer(peerId: number): Peer {\n    if(peerId > 0) {\n      return {_: 'peerUser', user_id: peerId};\n    }\n\n    let chatId = -peerId;\n    if(appChatsManager.isChannel(chatId)) {\n      return {_: 'peerChannel', channel_id: chatId};\n    }\n\n    return {_: 'peerChat', chat_id: chatId};\n  }\n\n  public getPeerString(peerId: number) {\n    if(peerId > 0) {\n      return appUsersManager.getUserString(peerId);\n    }\n    return appChatsManager.getChatString(-peerId);\n  }\n\n  public getPeerUsername(peerId: number): string {\n    if(peerId > 0) {\n      return appUsersManager.getUser(peerId).username || '';\n    }\n    return appChatsManager.getChat(-peerId).username || '';\n  }\n\n  public getPeer(peerId: number) {\n    return peerId > 0\n      ? appUsersManager.getUser(peerId)\n      : appChatsManager.getChat(-peerId)\n  }\n\n  public getPeerId(peerId: Peer | InputPeer | number | string): number {\n    if(typeof(peerId) === 'number') return peerId;\n    else if(isObject(peerId)) return (peerId as Peer.peerUser).user_id || -((peerId as Peer.peerChannel).channel_id || (peerId as Peer.peerChat).chat_id);\n    else if(!peerId) return 0;\n    \n    const isUser = (peerId as string).charAt(0) === 'u';\n    const peerParams = (peerId as string).substr(1).split('_');\n\n    return isUser ? +peerParams[0] : -peerParams[0] || 0;\n  }\n\n  public getDialogPeer(peerId: number): DialogPeer {\n    return {\n      _: 'dialogPeer',\n      peer: this.getOutputPeer(peerId)\n    };\n  }\n\n  public isChannel(peerId: number): boolean {\n    return (peerId < 0) && appChatsManager.isChannel(-peerId);\n  }\n\n  public isMegagroup(peerId: number) {\n    return (peerId < 0) && appChatsManager.isMegagroup(-peerId);\n  }\n\n  public isAnyGroup(peerId: number): boolean {\n    return (peerId < 0) && !appChatsManager.isBroadcast(-peerId);\n  }\n\n  public isBroadcast(peerId: number): boolean {\n    return this.isChannel(peerId) && !this.isMegagroup(peerId);\n  }\n\n  public isBot(peerId: number): boolean {\n    return (peerId > 0) && appUsersManager.isBot(peerId);\n  }\n\n  /* public getInputPeer(peerString: string): InputPeer {\n    var firstChar = peerString.charAt(0);\n    var peerParams = peerString.substr(1).split('_');\n    let id = +peerParams[0];\n\n    if(firstChar === 'u') {\n      //appUsersManager.saveUserAccess(id, peerParams[1]);\n\n      return {\n        _: 'inputPeerUser',\n        user_id: id,\n        access_hash: peerParams[1]\n      };\n    } else if(firstChar === 'c' || firstChar === 's') {\n      //appChatsManager.saveChannelAccess(id, peerParams[1]);\n      if(firstChar === 's') {\n        appChatsManager.saveIsMegagroup(id);\n      }\n\n      return {\n        _: 'inputPeerChannel',\n        channel_id: id,\n        access_hash: peerParams[1] || '0'\n      };\n    } else {\n      return {\n        _: 'inputPeerChat',\n        chat_id: id\n      };\n    }\n  } */\n\n  public getInputNotifyPeerById(peerId: number, ignorePeerId: true): Exclude<InputNotifyPeer, InputNotifyPeer.inputNotifyPeer>;\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: false): InputNotifyPeer.inputNotifyPeer;\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: boolean): InputNotifyPeer {\n    if(ignorePeerId) {\n      if(peerId > 0) {\n        return {_: 'inputNotifyUsers'};\n      } else {\n        if(appPeersManager.isBroadcast(peerId)) {\n          return {_: 'inputNotifyBroadcasts'};\n        } else {\n          return {_: 'inputNotifyChats'};\n        }\n      }\n    } else {\n      return {\n        _: 'inputNotifyPeer', \n        peer: this.getInputPeerById(peerId)\n      };\n    }\n  }\n\n  public getInputPeerById(peerId: number): InputPeer {\n    if(!peerId) {\n      return {_: 'inputPeerEmpty'};\n    }\n\n    if(peerId < 0) {\n      const chatId = -peerId;\n      if(!appChatsManager.isChannel(chatId)) {\n        return appChatsManager.getChatInputPeer(chatId);\n      } else {\n        return appChatsManager.getChannelInputPeer(chatId);\n      }\n    }\n\n    return {\n      _: 'inputPeerUser',\n      user_id: peerId,\n      access_hash: appUsersManager.getUser(peerId).access_hash\n    };\n  }\n\n  public getInputDialogPeerById(peerId: number): InputDialogPeer {\n    return {\n      _: 'inputDialogPeer',\n      peer: this.getInputPeerById(peerId)\n    }\n  }\n\n  public getPeerColorById(peerId: number, pic = true) {\n    if(!peerId) return '';\n\n    const idx = DialogColorsMap[(peerId < 0 ? -peerId : peerId) % 7];\n    const color = (pic ? DialogColors : DialogColorsFg)[idx];\n    return color;\n  }\n\n  public getPeerSearchText(peerId: number) {\n    let text;\n    if(peerId > 0) {\n      text = '%pu ' + appUsersManager.getUserSearchText(peerId);\n    } else if(peerId < 0) {\n      const chat = appChatsManager.getChat(-peerId);\n      text = '%pg ' + (chat.title || '');\n    }\n    return text;\n  }\n\n  public getDialogType(peerId: number): PeerType {\n    if(appPeersManager.isMegagroup(peerId)) {\n      return 'megagroup';\n    } else if(appPeersManager.isChannel(peerId)) {\n      return 'channel';\n    } else if(peerId < 0) {\n      return 'group';\n    } else {\n      return peerId === rootScope.myId ? 'saved' : 'chat';\n    }\n  }\n\n  public getDeleteButtonText(peerId: number): LangPackKey {\n    switch(this.getDialogType(peerId)) {\n      case 'channel':\n        return 'ChatList.Context.LeaveChannel';\n\n      case 'megagroup':\n        return 'ChatList.Context.LeaveGroup';\n\n      case 'group':\n        return 'ChatList.Context.DeleteAndExit';\n      \n      default:\n        return 'ChatList.Context.DeleteChat';\n    }\n  }\n}\n\nconst appPeersManager = new AppPeersManager();\nMOUNT_CLASS_TO.appPeersManager = appPeersManager;\nexport default appPeersManager;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\n//import apiManager from '../mtproto/apiManager';\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\nimport { Update, Updates } from '../../layer';\nimport { logger, LogTypes } from '../logger';\nimport apiManager from '../mtproto/mtprotoworker';\nimport rootScope from '../rootScope';\n//import networkerFactory from '../mtproto/networkerFactory';\nimport appUsersManager from \"./appUsersManager\";\nimport appChatsManager from \"./appChatsManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from './appStateManager';\nimport serverTimeManager from '../mtproto/serverTimeManager';\n\ntype UpdatesState = {\n  pendingPtsUpdates: {pts: number, pts_count: number}[],\n  pendingSeqUpdates?: {[seq: number]: {seq: number, date: number, updates: any[]}},\n  syncPending: {\n    seqAwaiting?: number,\n    ptsAwaiting?: true,\n    timeout: number\n  },\n  syncLoading: Promise<void>,\n\n  seq?: number,\n  pts?: number,\n  date?: number,\n  lastPtsUpdateTime?: number\n};\n\nconst SYNC_DELAY = 6;\n\nexport class ApiUpdatesManager {\n  public updatesState: UpdatesState = {\n    pendingPtsUpdates: [],\n    pendingSeqUpdates: {},\n    syncPending: null,\n    syncLoading: null\n  };\n\n  private channelStates: {[channelId: number]: UpdatesState} = {};\n  private attached = false;\n\n  private log = logger('UPDATES', LogTypes.Error | LogTypes.Warn | LogTypes.Log/*  | LogTypes.Debug */);\n  private debug = DEBUG;\n\n  private setProxy() {\n    const self = this;\n    this.updatesState = new Proxy(this.updatesState, {\n      set: function(target: ApiUpdatesManager['updatesState'], key: keyof ApiUpdatesManager['updatesState'], value: ApiUpdatesManager['updatesState'][typeof key]) {\n        // @ts-ignore\n        target[key] = value;\n        self.saveUpdatesState();\n        return true;\n      }\n    });\n  }\n\n  public saveUpdatesState() {\n    const us = this.updatesState;\n    appStateManager.pushToState('updates', {\n      seq: us.seq,\n      pts: us.pts,\n      date: us.date\n    });\n  }\n\n  private popPendingSeqUpdate() {\n    const state = this.updatesState;\n    const nextSeq = state.seq + 1;\n    const pendingUpdatesData = state.pendingSeqUpdates[nextSeq];\n    if(!pendingUpdatesData) {\n      return false;\n    }\n\n    const updates = pendingUpdatesData.updates;\n    for(let i = 0, length = updates.length; i < length; ++i) {\n      this.saveUpdate(updates[i]);\n    }\n\n    state.seq = pendingUpdatesData.seq;\n    if(pendingUpdatesData.date && state.date < pendingUpdatesData.date) {\n      state.date = pendingUpdatesData.date;\n    }\n    delete state.pendingSeqUpdates[nextSeq];\n  \n    if(!this.popPendingSeqUpdate() &&\n      state.syncPending &&\n      state.syncPending.seqAwaiting &&\n      state.seq >= state.syncPending.seqAwaiting) {\n      if(!state.syncPending.ptsAwaiting) {\n        clearTimeout(state.syncPending.timeout);\n        state.syncPending = null;\n      } else {\n        delete state.syncPending.seqAwaiting;\n      }\n    }\n  \n    return true;\n  }\n\n  private popPendingPtsUpdate(channelId: number) {\n    const curState = channelId ? this.getChannelState(channelId) : this.updatesState;\n    if(!curState.pendingPtsUpdates.length) {\n      return false;\n    }\n\n    curState.pendingPtsUpdates.sort((a, b) => {\n      return a.pts - b.pts;\n    });\n    // this.log('pop update', channelId, curState.pendingPtsUpdates)\n  \n    let curPts = curState.pts;\n    let goodPts = 0;\n    let goodIndex = 0;\n    for(let i = 0, length = curState.pendingPtsUpdates.length; i < length; ++i) {\n      const update = curState.pendingPtsUpdates[i];\n      curPts += update.pts_count;\n      if(curPts >= update.pts) {\n        goodPts = update.pts;\n        goodIndex = i;\n      }\n    }\n  \n    if(!goodPts) {\n      return false;\n    }\n  \n    this.debug && this.log.debug('pop pending pts updates', goodPts, curState.pendingPtsUpdates.slice(0, goodIndex + 1));\n  \n    curState.pts = goodPts;\n    for(let i = 0; i <= goodIndex; ++i) {\n      const update = curState.pendingPtsUpdates[i];\n\n      // @ts-ignore\n      this.saveUpdate(update);\n    }\n    curState.pendingPtsUpdates.splice(0, goodIndex + 1);\n  \n    if(!curState.pendingPtsUpdates.length && curState.syncPending) {\n      if(!curState.syncPending.seqAwaiting) {\n        clearTimeout(curState.syncPending.timeout);\n        curState.syncPending = null;\n      } else {\n        delete curState.syncPending.ptsAwaiting;\n      }\n    }\n  \n    return true;\n  }\n\n  public forceGetDifference() {\n    if(!this.updatesState.syncLoading) {\n      this.getDifference();\n    }\n  }\n\n  public processLocalUpdate(update: Update) {\n    this.processUpdateMessage({\n      _: 'updateShort',\n      update\n    } as Updates);\n  }\n\n  public processUpdateMessage = (updateMessage: any, options: Partial<{\n    override: boolean\n  }> = {}) => {\n    // return forceGetDifference()\n    const processOpts = {\n      date: updateMessage.date,\n      seq: updateMessage.seq,\n      seqStart: updateMessage.seq_start,\n      //ignoreSyncLoading: options.ignoreSyncLoading\n    };\n\n    this.debug && this.log.debug('processUpdateMessage', updateMessage);\n  \n    switch(updateMessage._) {\n      case 'updatesTooLong':\n      case 'new_session_created':\n        this.forceGetDifference();\n        break;\n  \n      case 'updateShort':\n        this.processUpdate(updateMessage.update, processOpts);\n        break;\n  \n      case 'updateShortMessage':\n      case 'updateShortChatMessage': {\n        this.debug && this.log.debug('updateShortMessage | updateShortChatMessage', {...updateMessage});\n        const isOut = updateMessage.pFlags.out;\n        const fromId = updateMessage.from_id || (isOut ? rootScope.myId : updateMessage.user_id);\n        const toId = updateMessage.chat_id\n          ? -updateMessage.chat_id\n          : (updateMessage.user_id || rootScope.myId);\n  \n        this.processUpdate({\n          _: 'updateNewMessage',\n          message: {\n            _: 'message',\n            pFlags: updateMessage.pFlags,\n            id: updateMessage.id,\n            from_id: appPeersManager.getOutputPeer(fromId),\n            peer_id: appPeersManager.getOutputPeer(toId),\n            date: updateMessage.date,\n            message: updateMessage.message,\n            fwd_from: updateMessage.fwd_from,\n            reply_to: updateMessage.reply_to,\n            entities: updateMessage.entities\n          },\n          pts: updateMessage.pts,\n          pts_count: updateMessage.pts_count\n        }, processOpts);\n        break;\n      }\n  \n      case 'updatesCombined':\n      case 'updates':\n        appUsersManager.saveApiUsers(updateMessage.users, options.override);\n        appChatsManager.saveApiChats(updateMessage.chats, options.override);\n  \n        updateMessage.updates.forEach((update: any) => {\n          this.processUpdate(update, processOpts);\n        });\n        break;\n  \n      default:\n        this.log.warn('Unknown update message', updateMessage);\n    }\n  };\n  \n  private getDifference(first = false): Promise<void> {\n    // this.trace('Get full diff')\n    const updatesState = this.updatesState;\n    let wasSyncing = updatesState.syncLoading;\n    if(!wasSyncing) {\n      updatesState.pendingSeqUpdates = {};\n      updatesState.pendingPtsUpdates = [];\n    }\n  \n    if(updatesState.syncPending) {\n      clearTimeout(updatesState.syncPending.timeout);\n      updatesState.syncPending = null;\n    }\n\n    const promise = apiManager.invokeApi('updates.getDifference', {\n      pts: updatesState.pts, \n      pts_total_limit: first /* && false  */? /* 50 */1200 : undefined,\n      date: updatesState.date, \n      qts: -1\n    }, {\n      timeout: 0x7fffffff\n    }).then((differenceResult) => {\n      this.debug && this.log.debug('Get diff result', differenceResult);\n\n      if(differenceResult._ === 'updates.differenceEmpty') {\n        this.debug && this.log.debug('apply empty diff', differenceResult.seq);\n        updatesState.date = differenceResult.date;\n        updatesState.seq = differenceResult.seq;\n        return;\n      }\n\n      // ! SORRY I'M SORRY I'M SORRY\n      if(first) {\n        rootScope.dispatchEvent('state_synchronizing');\n      }\n\n      if(differenceResult._ !== 'updates.differenceTooLong') {\n        appUsersManager.saveApiUsers(differenceResult.users);\n        appChatsManager.saveApiChats(differenceResult.chats);\n\n        // Should be first because of updateMessageID\n        // this.log('applying', differenceResult.other_updates.length, 'other updates')\n    \n        differenceResult.other_updates.forEach((update) => {\n          switch(update._) {\n            case 'updateChannelTooLong':\n            case 'updateNewChannelMessage':\n            case 'updateEditChannelMessage':\n              this.processUpdate(update);\n              return;\n          }\n          \n          this.saveUpdate(update);\n        });\n\n        // this.log('applying', differenceResult.new_messages.length, 'new messages')\n        differenceResult.new_messages.forEach((apiMessage) => {\n          this.saveUpdate({\n            _: 'updateNewMessage',\n            message: apiMessage,\n            pts: updatesState.pts,\n            pts_count: 0\n          });\n        });\n\n        const nextState = differenceResult._ === 'updates.difference' ? differenceResult.state : differenceResult.intermediate_state;\n        updatesState.seq = nextState.seq;\n        updatesState.pts = nextState.pts;\n        updatesState.date = nextState.date;\n      } else {\n        updatesState.pts = differenceResult.pts;\n        updatesState.date = (Date.now() / 1000 | 0) + serverTimeManager.serverTimeOffset;\n        delete updatesState.seq;\n        \n        this.channelStates = {};\n        \n        this.log.warn('getDifference:', differenceResult._);\n        rootScope.dispatchEvent('state_cleared');\n      }\n  \n      // this.log('apply diff', updatesState.seq, updatesState.pts)\n  \n      if(differenceResult._ === 'updates.differenceSlice') {\n        return this.getDifference();\n      } else {\n        this.debug && this.log.debug('finished get diff');\n      }\n    });\n\n    if(!wasSyncing) {\n      this.justAName(updatesState, promise);\n    }\n  \n    return promise;\n  }\n\n  private getChannelDifference(channelId: number): Promise<void> {\n    const channelState = this.getChannelState(channelId);\n    const wasSyncing = channelState.syncLoading;\n    if(!wasSyncing) {\n      channelState.pendingPtsUpdates = [];\n    }\n\n    if(channelState.syncPending) {\n      clearTimeout(channelState.syncPending.timeout);\n      channelState.syncPending = null;\n    }\n\n    //this.log.trace('Get channel diff', appChatsManager.getChat(channelId), channelState.pts);\n    const promise = apiManager.invokeApi('updates.getChannelDifference', {\n      channel: appChatsManager.getChannelInput(channelId),\n      filter: {_: 'channelMessagesFilterEmpty'},\n      pts: channelState.pts,\n      limit: 30\n    }, {timeout: 0x7fffffff}).then((differenceResult) => {\n      this.debug && this.log.debug('Get channel diff result', differenceResult)\n      channelState.pts = 'pts' in differenceResult ? differenceResult.pts : undefined;\n  \n      if(differenceResult._ === 'updates.channelDifferenceEmpty') {\n        this.debug && this.log.debug('apply channel empty diff', differenceResult);\n        return;\n      }\n  \n      if(differenceResult._ === 'updates.channelDifferenceTooLong') {\n        this.debug && this.log.debug('channel diff too long', differenceResult);\n        delete this.channelStates[channelId];\n\n        // @ts-ignore\n        this.saveUpdate({_: 'updateChannelReload', channel_id: channelId});\n        return;\n      }\n  \n      appUsersManager.saveApiUsers(differenceResult.users);\n      appChatsManager.saveApiChats(differenceResult.chats);\n  \n      // Should be first because of updateMessageID\n      this.debug && this.log.debug('applying', differenceResult.other_updates.length, 'channel other updates');\n      differenceResult.other_updates.forEach((update) => {\n        this.saveUpdate(update);\n      });\n  \n      this.debug && this.log.debug('applying', differenceResult.new_messages.length, 'channel new messages');\n      differenceResult.new_messages.forEach((apiMessage) => {\n        this.saveUpdate({\n          _: 'updateNewChannelMessage',\n          message: apiMessage,\n          pts: channelState.pts,\n          pts_count: 0\n        });\n      });\n  \n      this.debug && this.log.debug('apply channel diff', channelState.pts);\n  \n      if(differenceResult._ === 'updates.channelDifference' &&\n        !differenceResult.pFlags['final']) {\n        return this.getChannelDifference(channelId);\n      } else {\n        this.debug && this.log.debug('finished channel get diff');\n      }\n    });\n\n    if(!wasSyncing) {\n      this.justAName(channelState, promise, channelId);\n    }\n\n    return promise;\n  }\n\n  private justAName(state: UpdatesState, promise: UpdatesState['syncLoading'], channelId?: number) {\n    state.syncLoading = promise;\n    rootScope.dispatchEvent('state_synchronizing', channelId);\n\n    promise.then(() => {\n      state.syncLoading = null;\n      rootScope.dispatchEvent('state_synchronized', channelId);\n    }, () => {\n      state.syncLoading = null;\n    });\n  }\n  \n  public addChannelState(channelId: number, pts: number) {\n    if(!pts) {\n      throw new Error('Add channel state without pts ' + channelId);\n    }\n\n    if(!(channelId in this.channelStates)) {\n      this.channelStates[channelId] = {\n        pts,\n        pendingPtsUpdates: [],\n        syncPending: null,\n        syncLoading: null\n      };\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public getChannelState(channelId: number, pts?: number) {\n    if(this.channelStates[channelId] === undefined) {\n      this.addChannelState(channelId, pts);\n    }\n\n    return this.channelStates[channelId];\n  }\n\n  private processUpdate(update: any, options: Partial<{\n    date: number,\n    seq: number,\n    seqStart: number/* ,\n    ignoreSyncLoading: boolean */\n  }> = {}) {\n    let channelId = 0;\n    switch(update._) {\n      case 'updateNewChannelMessage':\n      case 'updateEditChannelMessage':\n        channelId = -appPeersManager.getPeerId(update.message.peer_id);\n        break;\n      case 'updateDeleteChannelMessages':\n        channelId = update.channel_id;\n        break;\n      case 'updateChannelTooLong':\n        channelId = update.channel_id;\n        if(!(channelId in this.channelStates)) {\n          return false;\n        }\n        break;\n    }\n  \n    const curState = channelId ? this.getChannelState(channelId, update.pts) : this.updatesState;\n  \n    // this.log.log('process', channelId, curState.pts, update)\n  \n    if(curState.syncLoading/*  && !options.ignoreSyncLoading */) {\n      return false;\n    }\n  \n    if(update._ === 'updateChannelTooLong') {\n      if(!curState.lastPtsUpdateTime ||\n          curState.lastPtsUpdateTime < (Date.now() - SYNC_DELAY)) {\n        // this.log.trace('channel too long, get diff', channelId, update)\n        this.getChannelDifference(channelId);\n      }\n      return false;\n    }\n  \n    if(update._ === 'updateNewMessage' ||\n        update._ === 'updateEditMessage' ||\n        update._ === 'updateNewChannelMessage' ||\n        update._ === 'updateEditChannelMessage') {\n      const message = update.message;\n      const toPeerId = appPeersManager.getPeerId(message.peer_id);\n      const fwdHeader = message.fwd_from || {};\n      let reason: any = false;\n      if(message.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(message.from_id), message.pFlags.post/* || channelId*/) && (reason = 'author') ||\n          fwdHeader.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(fwdHeader.from_id), !!fwdHeader.channel_id) && (reason = 'fwdAuthor') ||\n          fwdHeader.channel_id && !appChatsManager.hasChat(fwdHeader.channel_id, true) && (reason = 'fwdChannel') ||\n          toPeerId > 0 && !appUsersManager.hasUser(toPeerId) && (reason = 'toPeer User') ||\n          toPeerId < 0 && !appChatsManager.hasChat(-toPeerId) && (reason = 'toPeer Chat')) {\n        this.log.warn('Not enough data for message update', toPeerId, reason, message)\n        if(channelId && appChatsManager.hasChat(channelId)) {\n          this.getChannelDifference(channelId);\n        } else {\n          this.forceGetDifference();\n        }\n        return false;\n      }\n    } else if(channelId && !appChatsManager.hasChat(channelId)) {\n      // this.log.log('skip update, missing channel', channelId, update)\n      return false;\n    }\n  \n    let popPts: boolean;\n    let popSeq: boolean;\n  \n    if(update.pts) {\n      const newPts = curState.pts + (update.pts_count || 0);\n      if(newPts < update.pts) {\n        this.debug && this.log.warn('Pts hole', curState, update, channelId && appChatsManager.getChat(channelId));\n        curState.pendingPtsUpdates.push(update);\n        if(!curState.syncPending && !curState.syncLoading) {\n          curState.syncPending = {\n            timeout: window.setTimeout(() => {\n              curState.syncPending = null;\n\n              if(curState.syncLoading) {\n                return;\n              }\n\n              if(channelId) {\n                this.getChannelDifference(channelId);\n              } else {\n                this.getDifference();\n              }\n            }, SYNC_DELAY)\n          };\n        }\n\n        curState.syncPending.ptsAwaiting = true;\n        return false;\n      }\n\n      if(update.pts > curState.pts) {\n        curState.pts = update.pts;\n        popPts = true;\n  \n        curState.lastPtsUpdateTime = Date.now();\n      } else if(update.pts_count) {\n        // this.log.warn('Duplicate update', update)\n        return false;\n      }\n\n      if(channelId && options.date && this.updatesState.date < options.date) {\n        this.updatesState.date = options.date;\n      }\n    } else if(!channelId && options.seq > 0) {\n      const seq = options.seq;\n      const seqStart = options.seqStart || seq;\n  \n      if(seqStart !== curState.seq + 1) {\n        if(seqStart > curState.seq) {\n          this.debug && this.log.warn('Seq hole', curState, curState.syncPending && curState.syncPending.seqAwaiting);\n  \n          if(curState.pendingSeqUpdates[seqStart] === undefined) {\n            curState.pendingSeqUpdates[seqStart] = {seq, date: options.date, updates: []};\n          }\n          curState.pendingSeqUpdates[seqStart].updates.push(update);\n  \n          if(!curState.syncPending) {\n            curState.syncPending = {\n              timeout: window.setTimeout(() => {\n                curState.syncPending = null;\n\n                if(curState.syncLoading) {\n                  return;\n                }\n\n                this.getDifference();\n              }, SYNC_DELAY)\n            };\n          }\n\n          if(!curState.syncPending.seqAwaiting ||\n            curState.syncPending.seqAwaiting < seqStart) {\n            curState.syncPending.seqAwaiting = seqStart;\n          }\n          return false;\n        }\n      }\n  \n      if(curState.seq !== seq) {\n        curState.seq = seq;\n        if(options.date && curState.date < options.date) {\n          curState.date = options.date;\n        }\n\n        popSeq = true;\n      }\n    }\n  \n    this.saveUpdate(update);\n  \n    if(popPts) {\n      this.popPendingPtsUpdate(channelId);\n    } else if(popSeq) {\n      this.popPendingSeqUpdate();\n    }\n  }\n\n  public saveUpdate(update: Update) {\n    //this.debug && this.log('saveUpdate', update);\n    rootScope.dispatchEvent(update._, update as any);\n  }\n  \n  public attach() {\n    if(this.attached) return;\n\n    //return;\n\n    this.log('attach');\n    \n    this.attached = true;\n\n    appStateManager.getState().then(_state => {\n      const state = _state.updates;\n\n      //rootScope.broadcast('state_synchronizing');\n      if(!state || !state.pts || !state.date || !state.seq) {\n        this.log('will get new state');\n\n        this.updatesState.syncLoading = new Promise((resolve) => {\n          apiManager.invokeApi('updates.getState', {}, {noErrorBox: true}).then((stateResult) => {\n            this.updatesState.seq = stateResult.seq;\n            this.updatesState.pts = stateResult.pts;\n            this.updatesState.date = stateResult.date;\n            this.saveUpdatesState();\n            //setTimeout(() => {\n              this.updatesState.syncLoading = null;\n              resolve();\n              //rootScope.broadcast('state_synchronized');\n            //}, 1000);\n        \n          // ! for testing\n          // updatesState.seq = 1\n          // updatesState.pts = stateResult.pts - 5000\n          // updatesState.date = 1\n          // getDifference()\n          });\n        });\n      } else {\n        // ! for testing\n        /* state.seq = 1;\n        state.pts = state.pts - 15;\n        state.date = 1; */\n        // state.pts -= 100;\n\n        Object.assign(this.updatesState, state);\n        \n        this.log('will get difference', Object.assign({}, state));\n        \n        this.getDifference(true)/* .finally(() => {\n          if(this.updatesState.syncLoading) {\n            rootScope.broadcast('state_synchronizing');\n          }\n        }) */;\n      }\n\n      apiManager.setUpdatesProcessor(this.processUpdateMessage);\n\n      // this.updatesState.syncLoading.then(() => {\n        this.setProxy();\n      // });\n    });\n  }\n}\n\nconst apiUpdatesManager = new ApiUpdatesManager();\nMOUNT_CLASS_TO.apiUpdatesManager = apiUpdatesManager;\nexport default apiUpdatesManager\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n/* import { copy } from \"./object\";\n\nexport function listMergeSorted(list1: any[] = [], list2: any[] = []) {\n  const result = copy(list1);\n\n  const minId = list1.length ? list1[list1.length - 1] : 0xFFFFFFFF;\n  for(let i = 0; i < list2.length; i++) {\n    if(list2[i] < minId) {\n      result.push(list2[i]);\n    }\n  }\n\n  return result;\n} */\n\nexport const accumulate = (arr: number[], initialValue: number) => arr.reduce((acc, value) => acc + value, initialValue);\n\nexport function findAndSpliceAll<T>(array: Array<T>, verify: (value: T, index: number, arr: typeof array) => boolean) {\n  const out: typeof array = [];\n  let idx = -1;\n  while((idx = array.findIndex(verify)) !== -1) {\n    out.push(array.splice(idx, 1)[0]);\n  }\n\n  return out;\n}\n\nexport function forEachReverse<T>(array: Array<T>, callback: (value: T, index?: number, array?: Array<T>) => void) {\n  for(let length = array.length, i = length - 1; i >= 0; --i) {\n    callback(array[i], i, array);\n  }\n};\n\nexport function insertInDescendSortedArray<T extends {[smth in K]?: number}, K extends keyof T>(array: Array<T>, element: T, property: K, pos?: number) {\n  if(pos === undefined) {\n    pos = array.indexOf(element);\n    if(pos !== -1) {\n      array.splice(pos, 1);\n    }\n  }\n\n  const sortProperty: number = element[property];\n  const len = array.length;\n  if(!len || sortProperty <= array[len - 1][property]) {\n    return array.push(element) - 1;\n  } else if(sortProperty >= array[0][property]) {\n    array.unshift(element);\n    return 0;\n  } else {\n    for(let i = 0; i < len; i++) {\n      if(sortProperty > array[i][property]) {\n        array.splice(i, 0, element);\n        return i;\n      }\n    }\n  }\n\n  console.error('wtf', array, element);\n  return array.indexOf(element);\n}\n\nexport function filterUnique<T extends Array<any>>(arr: T): T {\n  return [...new Set(arr)] as T;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport cleanSearchText from '../helpers/cleanSearchText';\n\nexport default class SearchIndex<SearchWhat> {\n  private fullTexts: Map<SearchWhat, string> = new Map();\n\n  // minChars can be 0 because it requires at least one word (one symbol) to be found\n  constructor(private cleanText = true, private latinize = true, private minChars: number = 0) {\n\n  }\n\n  public indexObject(id: SearchWhat, searchText: string) {\n    /* if(searchIndex.fullTexts.hasOwnProperty(id)) {\n      return false;\n    } */\n\n    if(searchText.trim() && this.cleanText) {\n      searchText = cleanSearchText(searchText, this.latinize);\n    }\n\n    if(!searchText) {\n      this.fullTexts.delete(id);\n      return false;\n    }\n\n    this.fullTexts.set(id, searchText);\n    \n    /* const shortIndexes = searchIndex.shortIndexes;\n    searchText.split(' ').forEach((searchWord) => {\n      let len = Math.min(searchWord.length, 3),\n        wordPart, i;\n      for(i = 1; i <= len; i++) {\n        wordPart = searchWord.substr(0, i);\n        if(shortIndexes[wordPart] === undefined) {\n          shortIndexes[wordPart] = [id];\n        } else {\n          shortIndexes[wordPart].push(id);\n        }\n      }\n    }); */\n  }\n\n  public search(query: string) {\n    const fullTexts = this.fullTexts;\n    //const shortIndexes = searchIndex.shortIndexes;\n\n    if(this.cleanText) {\n      query = cleanSearchText(query, this.latinize);\n    }\n\n    const newFoundObjs: Array<{fullText: string, fullTextLength: number, what: SearchWhat, foundChars: number}> = [];\n    const queryWords = query.split(' ');\n    const queryWordsLength = queryWords.length;\n    fullTexts.forEach((fullText, what) => {\n      let found = true;\n      let foundChars = 0;\n      for(let i = 0; i < queryWordsLength; ++i) { // * verify that all words are found\n        const word = queryWords[i];\n        const idx = fullText.indexOf(word);\n        if(idx === -1 || (idx !== 0 && fullText[idx - 1] !== ' ')) { // * search only from word beginning\n          found = false;\n          break;\n        }\n\n        foundChars += word.length;\n      }\n\n      if(found) {\n        foundChars += queryWordsLength - 1;\n        const fullTextLength = fullText.length;\n        if(this.minChars <= foundChars || fullTextLength <= foundChars) {\n          newFoundObjs.push({fullText, fullTextLength, what, foundChars});\n        }\n      }\n    });\n\n    newFoundObjs.sort((a, b) => a.fullTextLength - b.fullTextLength || b.foundChars - a.foundChars);\n\n    //newFoundObjs.sort((a, b) => a.fullText.localeCompare(b.fullText));\n    const newFoundObjs2: Set<SearchWhat> = new Set(newFoundObjs.map(o => o.what));\n\n    /* const queryWords = query.split(' ');\n    let foundArr: number[];\n    for(let i = 0; i < queryWords.length; i++) {\n      const newFound = shortIndexes[queryWords[i].substr(0, 3)];\n      if(!newFound) {\n        foundArr = [];\n        break;\n      }\n      \n      if(foundArr === undefined || foundArr.length > newFound.length) {\n        foundArr = newFound;\n      }\n    }\n\n    for(let j = 0; j < foundArr.length; j++) {\n      let found = true;\n      let searchText = fullTexts[foundArr[j]];\n      for(let i = 0; i < queryWords.length; i++) {\n        if(searchText.indexOf(queryWords[i]) === -1) {\n          found = false;\n          break;\n        }\n      }\n\n      if(found) {\n        newFoundObjs[foundArr[j]] = true;\n      }\n    } */\n\n    return newFoundObjs2;\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport Config from \"../lib/config\";\n\nconst badCharsRe = /[`~!@#$%^&*()\\-_=+\\[\\]\\\\|{}'\";:\\/?.>,<]+/g;\nconst trimRe = /^\\s+|\\s$/g;\n\nexport default function cleanSearchText(text: string, latinize = true) {\n  const hasTag = text.charAt(0) === '%';\n  text = text.replace(badCharsRe, '').replace(trimRe, '');\n  if(latinize) {\n    text = text.replace(/[^A-Za-z0-9]/g, (ch) => {\n      const latinizeCh = Config.LatinizeMap[ch];\n      return latinizeCh !== undefined ? latinizeCh : ch;\n    });\n  }\n  \n  text = text.toLowerCase();\n  if(hasTag) {\n    text = '%' + text;\n  }\n\n  return text;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n/**\n * Legacy Webogram's format, don't change dcID to camelCase. date is timestamp\n */\nexport type UserAuth = {dcID: number | string, date: number, id: number};\n\nexport const REPLIES_PEER_ID = 1271266957;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport default function htmlToSpan(html: string) {\n  const span = document.createElement('span');\n  span.innerHTML = html;\n  return span;\n}\n"],"sourceRoot":""}