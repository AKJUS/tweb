{"version":3,"sources":["webpack:///./src/helpers/dom/htmlToSpan.ts","webpack:///./src/pages/pagePassword.ts","webpack:///./src/helpers/dom/replaceContent.ts","webpack:///./src/helpers/cleanUsername.ts","webpack:///./src/lib/appManagers/appUsersManager.ts","webpack:///./src/components/inputField.ts","webpack:///./src/lib/appManagers/appChatsManager.ts","webpack:///./src/lib/appManagers/appPeersManager.ts","webpack:///./src/helpers/dom/getRichValue.ts","webpack:///./src/helpers/dom/toggleDisability.ts","webpack:///./src/lib/mtproto/serverTimeManager.ts","webpack:///./src/helpers/array.ts","webpack:///./src/lib/appManagers/apiUpdatesManager.ts","webpack:///./src/helpers/dom/getRichElementValue.ts","webpack:///./src/helpers/dom/findUpAttribute.ts","webpack:///./src/helpers/dom/isInputEmpty.ts","webpack:///./src/lib/mtproto/passwordManager.ts","webpack:///./src/pages/loginPage.ts","webpack:///./src/components/passwordInputField.ts","webpack:///./src/lib/searchIndex.ts","webpack:///./src/components/monkeys/password.ts","webpack:///./src/helpers/cleanSearchText.ts","webpack:///./src/lib/mtproto/mtproto_config.ts"],"names":["htmlToSpan","html","span","document","createElement","innerHTML","passwordInput","page","className","withInputWrapper","titleLangKey","subtitleLangKey","btnNext","btnNextI18n","IntlElement","key","append","element","passwordInputField","label","name","getStateInterval","input","inputWrapper","container","state","getState","window","setInterval","then","_state","hint","wrapEmojiText","setLabel","onSubmit","e","value","length","classList","add","toggle","update","preloader","check","response","_","clearInterval","m","default","mount","monkey","remove","removeAttribute","catch","err","type","select","addEventListener","this","size","isMobile","imageDiv","Promise","all","load","focus","pushToState","replaceContent","elem","node","firstChild","lastChild","replaceWith","textContent","cleanUsername","username","toLowerCase","appUsersManager","storage","appStateManager","storages","users","updateUsersStatuses","timestampNow","i","user","status","expires","was_online","rootScope","dispatchEvent","id","setUserToStateIfNeeded","clear","addMultipleEventsListeners","updateUserStatus","userId","user_id","serverTimeManager","serverTimeOffset","updateUserPhoto","forceUserOnline","photo","console","warn","updateUserName","saveApiUser","Object","assign","first_name","last_name","getSelf","contactsIndex","indexObject","getUserSearchText","storagesResults","contactsList","Array","isArray","forEach","pushContact","contactsFillPromise","resolve","peerId","getFromCache","set","getUser","delete","init","usernames","_userId","isPeerNeeded","findAndSplice","getTopPeersPromises","createSearchIndex","undefined","Set","updatedContactsList","promise","invokeApi","result","saveApiUsers","contacts","contact","onContactsModified","slice","resolvedPeer","appChatsManager","saveApiChats","chats","appPeersManager","getPeer","getPeerId","peer","requestPeer","phone","pFlags","self","format","filter","Boolean","join","query","includeSaved","sortBy","fillContacts","_contactsList","results","search","has","sort","userId1","userId2","sortName1","sortName","sortName2","localeCompare","status1","getUserStatusForSort","p","myId","testSelfSearch","unshift","block","invokeApiSingle","getInputPeerById","apiUpdatesManager","processLocalUpdate","peer_id","getOutputPeer","blocked","index","clearBadChars","ignoreCase","latinize","includeTag","apiUsers","override","oldUser","min","fullName","searchUsername","deleted","cleanSearchText","initials","getAbbreviation","changedPhoto","changedTitle","photo_id","formatted","access_hash","args","isBot","support","date","now","Date","d","getDate","getMonth","getHours","getMinutes","bot","isRegularUser","isContact","allowMin","eventTimestamp","timestamp","updatesState","syncLoading","cached","topPeersCache","cachedTime","peers","offset","limit","hash","topPeers","categories","map","topPeer","rating","contactsBlocked","count","peerIds","u","concat","c","invokeApiCacheable","q","cacheSeconds","my_results","offline","showPhone","getUserInput","add_phone_privacy_exception","updates","processUpdateMessage","onContactUpdated","userIds","target","preventDefault","text","originalEvent","clipboardData","getData","entities","parseEntities","wrapRichText","noLinks","wrappingDraft","execCommand","InputState","options","maxLength","showLengthOn","Math","round","placeholder","plainText","processInput","labelText","firstElementChild","observer","MutationObserver","inputFake","onFakeInput","observe","characterData","childList","subtree","animate","wasInputFakeClientHeight","setAttribute","border","labelEl","lastElementChild","showingLength","wasError","contains","inputLength","diff","isError","labelOptions","scrollHeight","clientHeight","style","height","setValueSilently","event","Event","bubbles","cancelable","fireFakeInput","originalValue","silent","wrapDraftText","Error","Valid","setState","onChatUpdated","chatId","isChannel","updateChannelParticipant","clearCache","params","channel","channel_id","updateChatDefaultBannedRights","chat","default_banned_rights","getChat","_chatId","apiChats","saveApiChat","oldChat","title","participants_count","rights","defaultRights","action","isThread","kicked","left","megagroup","deactivated","creator","admin_rights","banned_rights","myFlags","post_messages","delete_messages","broadcast","until_date","bind","isMegagroup","good","chat_id","about","channelId","getChannelInput","usersInputs","fwdLimit","fwd_limit","deleteChatUser","leaveChannel","leaveChat","deleteChannel","deleteChat","find","bool","inputFile","inputChatPhoto","file","participant","getParticipantPeerId","actor_id","qts","prev_participant","new_participant","keys","kicked_by","editBanned","view_messages","messagesChats","DialogColorsFg","DialogColors","DialogColorsMap","updatePeerBlocked","hasRights","getUserPhoto","getChatPhoto","migrated_to","onlyFirstName","trim","split","getUserString","getChatString","isUser","charAt","peerParams","substr","isBroadcast","ignorePeerId","getChannelInputPeer","getChatInputPeer","pic","getDialogType","getRichValue","field","withEntities","lines","line","push","replace","combineSameEntities","toggleDisability","elements","disable","el","get","to","addTaskListener","task","payload","accumulate","arr","initialValue","reduce","acc","findAndSpliceAll","array","verify","out","idx","findIndex","splice","forEachReverse","callback","insertInDescendSortedArray","property","pos","indexOf","sortProperty","len","error","filterUnique","pendingPtsUpdates","pendingSeqUpdates","syncPending","channelStates","attached","log","Warn","Log","debug","updateMessage","processOpts","seq","seqStart","seq_start","forceGetDifference","processUpdate","isOut","fromId","from_id","toId","message","fwd_from","reply_to","pts","pts_count","Proxy","saveUpdatesState","us","nextSeq","pendingUpdatesData","saveUpdate","popPendingSeqUpdate","seqAwaiting","ptsAwaiting","clearTimeout","timeout","curState","getChannelState","a","b","curPts","goodPts","goodIndex","getDifference","first","wasSyncing","pts_total_limit","differenceResult","other_updates","new_messages","apiMessage","nextState","intermediate_state","justAName","channelState","getChannelDifference","addChannelState","lastPtsUpdateTime","toPeerId","fwdHeader","reason","hasUser","post","hasChat","popPts","popSeq","setTimeout","popPendingPtsUpdate","noErrorBox","stateResult","setUpdatesProcessor","setProxy","markdownTags","bold","match","entityName","underline","italic","monospace","strikethrough","link","mentionName","getRichElementValue","selNode","selOffset","nodeType","nodeValue","parentNode","parentElement","tag","closest","getAttribute","url","href","dataset","follow","isSelected","isBlock","tagName","alt","curChild","nextSibling","findUpAttribute","attribute","isInputEmpty","hasAttribute","passwordManager","settings","currentHashPromise","newHashPromise","password","new_settings","email","currentPassword","invokeCrypto","newAlgo","new_algo","salt1","Uint8Array","randomize","newPassword","hashes","new_password_hash","inputCheckPassword","auth","setUserAuth","code","LoginPage","body","querySelector","subtitle","PasswordInputField","super","passwordVisible","onVisibilityClick","toggleVisible","onVisibilityClickAdditional","autocomplete","stealthy","tabIndex","prepend","insertBefore","cloneNode","SearchIndex","minChars","fullTexts","Map","searchText","newFoundObjs","queryWords","queryWordsLength","fullText","what","found","foundChars","word","fullTextLength","o","PasswordMonkey","needFrame","loadPromise","loadAnimationFromURL","loop","autoplay","width","noCache","_animation","animation","currentFrame","direction","setSpeed","pause","setDirection","curFrame","play","waitForFirstFrame","badCharsRe","trimRe","clearBadCharsAndTrim","latinizeString","ch","latinizeCh","LatinizeMap","hasTag","processSearchText","REPLIES_PEER_ID"],"mappings":"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","file":"12.a01db45e79163439287d.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function htmlToSpan(html: string) {\r\n  const span = document.createElement('span');\r\n  span.innerHTML = html;\r\n  return span;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { putPreloader } from '../components/misc';\r\nimport mediaSizes from '../helpers/mediaSizes';\r\nimport { AccountPassword } from '../layer';\r\nimport appStateManager from '../lib/appManagers/appStateManager';\r\nimport passwordManager from '../lib/mtproto/passwordManager';\r\nimport Page from './page';\r\nimport Button from '../components/button';\r\nimport PasswordInputField from '../components/passwordInputField';\r\nimport PasswordMonkey from '../components/monkeys/password';\r\nimport RichTextProcessor from '../lib/richtextprocessor';\r\nimport I18n from '../lib/langPack';\r\nimport LoginPage from './loginPage';\r\nimport { cancelEvent } from '../helpers/dom/cancelEvent';\r\nimport { attachClickEvent } from '../helpers/dom/clickEvent';\r\nimport htmlToSpan from '../helpers/dom/htmlToSpan';\r\nimport replaceContent from '../helpers/dom/replaceContent';\r\nimport toggleDisability from '../helpers/dom/toggleDisability';\r\n\r\nconst TEST = false;\r\nlet passwordInput: HTMLInputElement;\r\n\r\nlet onFirstMount = (): Promise<any> => {\r\n  const page = new LoginPage({\r\n    className: 'page-password',\r\n    withInputWrapper: true,\r\n    titleLangKey: 'Login.Password.Title',\r\n    subtitleLangKey: 'Login.Password.Subtitle'\r\n  });\r\n\r\n  const btnNext = Button('btn-primary btn-color-primary');\r\n  const btnNextI18n = new I18n.IntlElement({key: 'Login.Next'});\r\n\r\n  btnNext.append(btnNextI18n.element);\r\n\r\n  const passwordInputField = new PasswordInputField({\r\n    label: 'LoginPassword',\r\n    name: 'password'\r\n  });\r\n\r\n  passwordInput = passwordInputField.input as HTMLInputElement;\r\n\r\n  page.inputWrapper.append(passwordInputField.container, btnNext);\r\n\r\n  let getStateInterval: number;\r\n\r\n  let getState = () => {\r\n    // * just to check session relevance\r\n    if(!getStateInterval) {\r\n      getStateInterval = window.setInterval(getState, 10e3);\r\n    }\r\n\r\n    return !TEST && passwordManager.getState().then(_state => {\r\n      state = _state;\r\n\r\n      if(state.hint) {\r\n        replaceContent(passwordInputField.label, htmlToSpan(RichTextProcessor.wrapEmojiText(state.hint)));\r\n      } else {\r\n        passwordInputField.setLabel();\r\n      }\r\n    });\r\n  };\r\n\r\n  let state: AccountPassword;\r\n  \r\n  const onSubmit = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    if(!passwordInput.value.length) {\r\n      passwordInput.classList.add('error');\r\n      return;\r\n    }\r\n\r\n    const toggle = toggleDisability([passwordInput, btnNext], true);\r\n    let value = passwordInput.value;\r\n\r\n    btnNextI18n.update({key: 'PleaseWait'});\r\n    const preloader = putPreloader(btnNext);\r\n\r\n    passwordManager.check(value, state).then((response) => {\r\n      //console.log('passwordManager response:', response);\r\n        \r\n      switch(response._) {\r\n        case 'auth.authorization':\r\n          clearInterval(getStateInterval);\r\n          import('./pageIm').then(m => {\r\n            m.default.mount();\r\n          });\r\n          if(monkey) monkey.remove();\r\n          break;\r\n        default:\r\n          btnNext.removeAttribute('disabled');\r\n          btnNextI18n.update({key: response._ as any});\r\n          preloader.remove();\r\n          break;\r\n      }\r\n    }).catch((err: any) => {\r\n      toggle();\r\n      passwordInputField.input.classList.add('error');\r\n      \r\n      switch(err.type) {\r\n        default:\r\n          //btnNext.innerText = err.type;\r\n          btnNextI18n.update({key: 'PASSWORD_HASH_INVALID'});\r\n          passwordInput.select();\r\n          break;\r\n      }\r\n\r\n      preloader.remove();\r\n  \r\n      getState();\r\n    });\r\n  };\r\n  \r\n  attachClickEvent(btnNext, onSubmit);\r\n\r\n  passwordInput.addEventListener('keypress', function(this, e) {\r\n    this.classList.remove('error');\r\n    btnNextI18n.update({key: 'Login.Next'});\r\n\r\n    if(e.key === 'Enter') {\r\n      return onSubmit();\r\n    }\r\n  });\r\n\r\n  const size = mediaSizes.isMobile ? 100 : 166;\r\n  const monkey = new PasswordMonkey(passwordInputField, size);\r\n  page.imageDiv.append(monkey.container);\r\n  return Promise.all([\r\n    monkey.load(),\r\n    getState()\r\n  ]);\r\n};\r\n\r\nconst page = new Page('page-password', true, onFirstMount, null, () => {\r\n  //if(!isAppleMobile) {\r\n    passwordInput.focus();\r\n  //}\r\n\r\n  appStateManager.pushToState('authState', {_: 'authStatePassword'});\r\n});\r\n\r\nexport default page;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function replaceContent(elem: HTMLElement, node: string | Node) {\r\n  if(typeof(node) === 'string') {\r\n    elem.innerHTML = node;\r\n    return;\r\n  }\r\n\r\n  // * children.length doesn't count text nodes\r\n  const firstChild = elem.firstChild;\r\n  if(firstChild) {\r\n    if(elem.lastChild === firstChild) {\r\n      firstChild.replaceWith(node);\r\n    } else {\r\n      elem.textContent = '';\r\n      elem.append(node);\r\n    }\r\n  } else {\r\n    elem.append(node);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport default function cleanUsername(username: string) {\r\n  return username && username.toLowerCase() || '';\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { formatPhoneNumber } from \"../../components/misc\";\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport { filterUnique } from \"../../helpers/array\";\nimport cleanSearchText from \"../../helpers/cleanSearchText\";\nimport cleanUsername from \"../../helpers/cleanUsername\";\nimport { tsNow } from \"../../helpers/date\";\nimport { safeReplaceObject, isObject } from \"../../helpers/object\";\nimport { Chat, InputUser, User as MTUser, UserProfilePhoto, UserStatus } from \"../../layer\";\nimport I18n, { i18n, LangPackKey } from \"../langPack\";\n//import apiManager from '../mtproto/apiManager';\nimport apiManager from '../mtproto/mtprotoworker';\nimport { REPLIES_PEER_ID } from \"../mtproto/mtproto_config\";\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\nimport { RichTextProcessor } from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport SearchIndex from \"../searchIndex\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appChatsManager from \"./appChatsManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from \"./appStateManager\";\n\n// TODO: updateUserBlocked\n\nexport type User = MTUser.user;\nexport type TopPeerType = 'correspondents' | 'bots_inline';\nexport type MyTopPeer = {id: number, rating: number};\n\nexport class AppUsersManager {\n  private storage = appStateManager.storages.users;\n  \n  private users: {[userId: number]: User};\n  private usernames: {[username: string]: number};\n  private contactsIndex: SearchIndex<number>;\n  private contactsFillPromise: Promise<Set<number>>;\n  private contactsList: Set<number>;\n  private updatedContactsList: boolean;\n  \n  private getTopPeersPromises: {[type in TopPeerType]?: Promise<MyTopPeer[]>};\n\n  constructor() {\n    this.clear(true);\n\n    setInterval(this.updateUsersStatuses, 60000);\n\n    rootScope.addEventListener('state_synchronized', this.updateUsersStatuses);\n\n    rootScope.addMultipleEventsListeners({\n      updateUserStatus: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          user.status = update.status;\n          if(user.status) {\n            if('expires' in user.status) {\n              user.status.expires -= serverTimeManager.serverTimeOffset;\n            }\n\n            if('was_online' in user.status) {\n              user.status.was_online -= serverTimeManager.serverTimeOffset;\n            }\n          }\n\n          //user.sortStatus = this.getUserStatusForSort(user.status);\n          rootScope.dispatchEvent('user_update', userId);\n          this.setUserToStateIfNeeded(user);\n        } //////else console.warn('No user by id:', userId);\n      },\n\n      updateUserPhoto: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          this.forceUserOnline(userId);\n\n          if(update.photo._ === 'userProfilePhotoEmpty') {\n            delete user.photo;\n          } else {\n            user.photo = safeReplaceObject(user.photo, update.photo);\n          }\n\n          this.setUserToStateIfNeeded(user);\n\n          rootScope.dispatchEvent('user_update', userId);\n          rootScope.dispatchEvent('avatar_update', userId);\n        } else console.warn('No user by id:', userId);\n      },\n\n      updateUserName: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          this.forceUserOnline(userId);\n          \n          this.saveApiUser(Object.assign({}, user, {\n            first_name: update.first_name,\n            last_name: update.last_name,\n            username: update.username\n          }), true);\n        }\n      }\n    });\n\n    /* case 'updateContactLink':\n    this.onContactUpdated(update.user_id, update.my_link._ === 'contactLinkContact');\n    break; */\n\n    rootScope.addEventListener('language_change', (e) => {\n      const userId = this.getSelf().id;\n      this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\n    });\n\n    appStateManager.getState().then((state) => {\n      const users = appStateManager.storagesResults.users;\n      if(users.length) {\n        for(let i = 0, length = users.length; i < length; ++i) {\n          const user = users[i];\n          if(user) {\n            this.users[user.id] = user;\n          }\n        }\n      }\n\n      const contactsList = state.contactsList;\n      if(contactsList && Array.isArray(contactsList)) {\n        contactsList.forEach(userId => {\n          this.pushContact(userId);\n        });\n\n        if(contactsList.length) {\n          this.contactsFillPromise = Promise.resolve(this.contactsList);\n        }\n      }\n\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\n        if(peerId < 0 || this.storage.getFromCache(peerId)) {\n          return;\n        }\n\n        this.storage.set({\n          [peerId]: this.getUser(peerId)\n        });\n      });\n\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\n        if(peerId < 0 || !this.storage.getFromCache(peerId)) {\n          return;\n        }\n\n        this.storage.delete(peerId);\n      });\n    });\n  }\n\n  public clear(init = false) {\n    if(!init) {\n      const users = appStateManager.storagesResults.users;\n      for(const _userId in this.users) {\n        const userId = +_userId;\n        if(!userId) continue;\n        if(!appStateManager.isPeerNeeded(userId)) {\n          const user = this.users[userId];\n          if(user.username) {\n            delete this.usernames[cleanUsername(user.username)];\n          }\n\n          users.findAndSplice((user) => user.id === userId);\n          this.storage.delete(userId);\n          delete this.users[userId];\n        }\n      }\n    } else {\n      this.users = {};\n      this.usernames = {};\n    }\n    \n    this.getTopPeersPromises = {};\n    this.contactsIndex = this.createSearchIndex();\n    this.contactsFillPromise = undefined;\n    this.contactsList = new Set();\n    this.updatedContactsList = false;\n  }\n\n  private onContactsModified() {\n    const contactsList = [...this.contactsList];\n    appStateManager.pushToState('contactsList', contactsList);\n  }\n\n  public fillContacts() {\n    if(this.contactsFillPromise && this.updatedContactsList) {\n      return this.contactsFillPromise;\n    }\n\n    this.updatedContactsList = true;\n\n    const promise = apiManager.invokeApi('contacts.getContacts').then((result) => {\n      if(result._ === 'contacts.contacts') {\n        this.saveApiUsers(result.users);\n\n        result.contacts.forEach((contact) => {\n          this.pushContact(contact.user_id);\n        });\n\n        this.onContactsModified();\n      }\n\n      this.contactsFillPromise = promise;\n\n      return this.contactsList;\n    });\n\n    return this.contactsFillPromise || (this.contactsFillPromise = promise);\n  }\n\n  public resolveUsername(username: string): Promise<Chat | User> {\n    if(username[0] === '@') {\n      username = username.slice(1);\n    }\n\n    username = username.toLowerCase();\n    if(this.usernames[username]) {\n      return Promise.resolve(this.users[this.usernames[username]]);\n    }\n\n    return apiManager.invokeApi('contacts.resolveUsername', {username}).then(resolvedPeer => {\n      this.saveApiUsers(resolvedPeer.users);\n      appChatsManager.saveApiChats(resolvedPeer.chats);\n\n      return appPeersManager.getPeer(appPeersManager.getPeerId(resolvedPeer.peer));\n    });\n  }\n\n  public pushContact(userId: number) {\n    this.contactsList.add(userId);\n    this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\n    appStateManager.requestPeer(userId, 'contacts');\n  }\n\n  public getUserSearchText(id: number) {\n    const user = this.users[id];\n    if(!user) {\n      return '';\n    }\n\n    const arr: string[] = [\n      user.first_name,\n      user.last_name,\n      user.phone,\n      user.username,\n      user.pFlags.self ? I18n.format('SavedMessages', true) : '',\n      user.pFlags.self ? 'Saved Messages' : ''\n    ];\n\n    return arr.filter(Boolean).join(' ');\n  }\n\n  public getContacts(query?: string, includeSaved = false, sortBy: 'name' | 'online' | 'none' = 'name') {\n    return this.fillContacts().then(_contactsList => {\n      let contactsList = [..._contactsList];\n      if(query) {\n        const results = this.contactsIndex.search(query);\n        const filteredContactsList = [...contactsList].filter(id => results.has(id));\n\n        contactsList = filteredContactsList;\n      }\n\n      if(sortBy === 'name') {\n        contactsList.sort((userId1, userId2) => {\n          const sortName1 = (this.users[userId1] || {}).sortName || '';\n          const sortName2 = (this.users[userId2] || {}).sortName || '';\n          return sortName1.localeCompare(sortName2);\n        });\n      } else if(sortBy === 'online') {\n        contactsList.sort((userId1, userId2) => {\n          const status1 = appUsersManager.getUserStatusForSort(appUsersManager.getUser(userId1).status);\n          const status2 = appUsersManager.getUserStatusForSort(appUsersManager.getUser(userId2).status);\n          return status2 - status1;\n        });\n      }\n\n      contactsList.findAndSplice(p => p === rootScope.myId);\n      if(includeSaved) {\n        if(this.testSelfSearch(query)) {\n          contactsList.unshift(rootScope.myId);\n        }\n      }\n\n      return contactsList;\n    });\n  }\n\n  public toggleBlock(peerId: number, block: boolean) {\n    return apiManager.invokeApiSingle(block ? 'contacts.block' : 'contacts.unblock', {\n      id: appPeersManager.getInputPeerById(peerId)\n    }).then(value => {\n      if(value) {\n        apiUpdatesManager.processLocalUpdate({\n          _: 'updatePeerBlocked',\n          peer_id: appPeersManager.getOutputPeer(peerId),\n          blocked: block\n        });\n      }\n\n      return value;\n    });\n  }\n\n  public testSelfSearch(query: string) {\n    const user = this.getSelf();\n    const index = this.createSearchIndex();\n    index.indexObject(user.id, this.getUserSearchText(user.id));\n    return index.search(query).has(user.id);\n  }\n\n  private createSearchIndex() {\n    return new SearchIndex<number>({\n      clearBadChars: true,\n      ignoreCase: true,\n      latinize: true,\n      includeTag: true\n    });\n  }\n\n  public saveApiUsers(apiUsers: any[], override?: boolean) {\n    apiUsers.forEach((user) => this.saveApiUser(user, override));\n  }\n\n  public saveApiUser(user: MTUser, override?: boolean) {\n    if(user._ === 'userEmpty') return;\n\n    const userId = user.id;\n    const oldUser = this.users[userId];\n\n    // ! commented block can affect performance !\n    // if(oldUser && !override) {\n    //   console.log('saveApiUser same');\n    //   return;\n    // }\n\n    if(user.pFlags === undefined) {\n      user.pFlags = {};\n    }\n\n    if(user.pFlags.min && oldUser !== undefined) {\n      return;\n    }\n\n    // * exclude from state\n    // defineNotNumerableProperties(user, ['initials', 'num', 'rFirstName', 'rFullName', 'rPhone', 'sortName', 'sortStatus']);\n\n    const fullName = user.first_name + ' ' + (user.last_name || '');\n    if(user.username) {\n      const searchUsername = cleanUsername(user.username);\n      this.usernames[searchUsername] = userId;\n    }\n\n    user.sortName = user.pFlags.deleted ? '' : cleanSearchText(fullName, false);\n\n    user.initials = RichTextProcessor.getAbbreviation(fullName);\n\n    if(user.status) {\n      if((user.status as UserStatus.userStatusOnline).expires) {\n        (user.status as UserStatus.userStatusOnline).expires -= serverTimeManager.serverTimeOffset;\n      }\n\n      if((user.status as UserStatus.userStatusOffline).was_online) {\n        (user.status as UserStatus.userStatusOffline).was_online -= serverTimeManager.serverTimeOffset;\n      }\n    }\n\n    //user.sortStatus = user.pFlags.bot ? -1 : this.getUserStatusForSort(user.status);\n\n    let changedPhoto = false, changedTitle = false;\n    if(oldUser === undefined) {\n      this.users[userId] = user;\n    } else {\n      if(user.first_name !== oldUser.first_name \n        || user.last_name !== oldUser.last_name \n        || user.username !== oldUser.username) {\n        changedTitle = true;\n      }\n\n      const oldPhotoId = (oldUser.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\n      const newPhotoId = (user.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\n      if(oldPhotoId !== newPhotoId) {\n        changedPhoto = true;\n      }\n\n      /* if(user.pFlags.bot && user.bot_info_version !== oldUser.bot_info_version) {\n        \n      } */\n\n      safeReplaceObject(oldUser, user);\n      rootScope.dispatchEvent('user_update', userId);\n    }\n\n    if(changedPhoto) {\n      rootScope.dispatchEvent('avatar_update', user.id);\n    }\n\n    if(changedTitle) {\n      rootScope.dispatchEvent('peer_title_edit', user.id);\n    }\n\n    this.setUserToStateIfNeeded(user);\n  }\n\n  public setUserToStateIfNeeded(user: User) {\n    if(appStateManager.isPeerNeeded(user.id)) {\n      this.storage.set({\n        [user.id]: user\n      });\n    }\n  }\n\n  public formatUserPhone(phone: string) {\n    return '+' + formatPhoneNumber(phone).formatted;\n  }\n\n  public getUserStatusForSort(status: User['status'] | number) {\n    if(typeof(status) === 'number') {\n      status = this.getUser(status).status;\n    }\n\n    if(status) {\n      const expires = status._ === 'userStatusOnline' ? status.expires : (status._ === 'userStatusOffline' ? status.was_online : 0);\n      if(expires) {\n        return expires;\n      }\n\n      /* const timeNow = tsNow(true);\n      switch(status._) {\n        case 'userStatusRecently':\n          return timeNow - 86400 * 3;\n        case 'userStatusLastWeek':\n          return timeNow - 86400 * 7;\n        case 'userStatusLastMonth':\n          return timeNow - 86400 * 30;\n      } */\n      switch(status._) {\n        case 'userStatusRecently':\n          return 3;\n        case 'userStatusLastWeek':\n          return 2;\n        case 'userStatusLastMonth':\n          return 1;\n      }\n    }\n\n    return 0;\n  }\n\n  public getUser(id: any): User {\n    if(isObject(id)) {\n      return id;\n    }\n\n    return this.users[id] || {id: id, pFlags: {deleted: true}, access_hash: ''} as User;\n  }\n\n  public getSelf() {\n    return this.getUser(rootScope.myId);\n  }\n\n  public getUserStatusString(userId: number): HTMLElement {\n    let key: LangPackKey;\n    let args: any[];\n\n    switch(userId) {\n      case REPLIES_PEER_ID:\n        key = 'Peer.RepliesNotifications';\n        break;\n      case 777000:\n        key = 'Peer.ServiceNotifications';\n        break;\n      default: {\n        if(this.isBot(userId)) {\n          key = 'Bot';\n          break;\n        }\n\n        const user = this.getUser(userId);\n        if(!user) {\n          key = '' as any;\n          break;\n        }\n\n        if(user.pFlags.support) {\n          key = 'SupportStatus';\n          break;\n        }\n\n        switch(user.status?._) {\n          case 'userStatusRecently': {\n            key = 'Lately';\n            break;\n          }\n    \n          case 'userStatusLastWeek': {\n            key = 'WithinAWeek';\n            break;\n          }\n    \n          case 'userStatusLastMonth': {\n            key = 'WithinAMonth';\n            break;\n          }\n          \n          case 'userStatusOffline': {\n            const date = user.status.was_online;\n            const now = Date.now() / 1000;\n            \n            if((now - date) < 60) {\n              key = 'Peer.Status.justNow';\n            } else if((now - date) < 3600) {\n              key = 'Peer.Status.minAgo';\n              const c = (now - date) / 60 | 0;\n              args = [c];\n            } else if(now - date < 86400) {\n              key = 'LastSeen.HoursAgo';\n              const c = (now - date) / 3600 | 0;\n              args = [c];\n            } else {\n              key = 'Peer.Status.LastSeenAt';\n              const d = new Date(date * 1000);\n              args = [('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2), \n                ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2)];\n            }\n            \n            break;\n          }\n    \n          case 'userStatusOnline': {\n            key = 'Online';\n            break;\n          }\n    \n          default: {\n            key = 'ALongTimeAgo';\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n    \n    return i18n(key, args);\n  }\n\n  public isBot(id: number) {\n    return this.users[id] && this.users[id].pFlags.bot;\n  }\n\n  public isContact(id: number) {\n    return this.contactsList.has(id) || (this.users[id] && this.users[id].pFlags.contact);\n  }\n  \n  public isRegularUser(id: number) {\n    const user = this.users[id];\n    return user && !this.isBot(id) && !user.pFlags.deleted && !user.pFlags.support;\n  }\n\n  public isNonContactUser(id: number) {\n    return this.isRegularUser(id) && !this.isContact(id) && id !== rootScope.myId;\n  }\n\n  public hasUser(id: number, allowMin?: boolean) {\n    const user = this.users[id];\n    return isObject(user) && (allowMin || !user.pFlags.min);\n  }\n\n  public canSendToUser(id: number) {\n    const user = this.getUser(id);\n    return !user.pFlags.deleted && user.username !== 'replies';\n  }\n\n  public getUserPhoto(id: number) {\n    const user = this.getUser(id);\n\n    return user && user.photo || {\n      _: 'userProfilePhotoEmpty'\n    };\n  }\n\n  public getUserString(id: number) {\n    const user = this.getUser(id);\n    return 'u' + id + (user.access_hash ? '_' + user.access_hash : '');\n  }\n\n  public getUserInput(id: number): InputUser {\n    const user = this.getUser(id);\n    if(user.pFlags && user.pFlags.self) {\n      return {_: 'inputUserSelf'};\n    }\n\n    return {\n      _: 'inputUser',\n      user_id: id,\n      access_hash: user.access_hash\n    };\n  }\n\n  public updateUsersStatuses = () => {\n    const timestampNow = tsNow(true);\n    for(const i in this.users) {\n      const user = this.users[i];\n\n      if(user.status &&\n        user.status._ === 'userStatusOnline' &&\n        user.status.expires < timestampNow) {\n\n        user.status = {_: 'userStatusOffline', was_online: user.status.expires};\n        rootScope.dispatchEvent('user_update', user.id);\n\n        this.setUserToStateIfNeeded(user);\n      }\n    }\n  };\n\n  public forceUserOnline(id: number, eventTimestamp?: number) {\n    if(this.isBot(id)) {\n      return;\n    }\n\n    const timestamp = tsNow(true);\n    const onlineTimeFor = 60;\n    if(eventTimestamp) {\n      if((timestamp - eventTimestamp) >= onlineTimeFor) {\n        return;\n      }\n    } else if(apiUpdatesManager.updatesState.syncLoading) {\n      return;\n    }\n\n    const user = this.getUser(id);\n    if(user &&\n      user.status &&\n      user.status._ !== 'userStatusOnline' &&\n      user.status._ !== 'userStatusEmpty' &&\n      !user.pFlags.support &&\n      !user.pFlags.deleted) {\n\n      user.status = {\n        _: 'userStatusOnline',\n        expires: timestamp + onlineTimeFor\n      };\n      \n      //user.sortStatus = this.getUserStatusForSort(user.status);\n      rootScope.dispatchEvent('user_update', id);\n\n      this.setUserToStateIfNeeded(user);\n    }\n  }\n\n  /* function importContact (phone, firstName, lastName) {\n      return MtpApiManager.invokeApi('contacts.importContacts', {\n        contacts: [{\n          _: 'inputPhoneContact',\n          client_id: '1',\n          phone: phone,\n          first_name: firstName,\n          last_name: lastName\n        }],\n        replace: false\n      }).then(function (importedContactsResult) {\n        saveApiUsers(importedContactsResult.users)\n\n        var foundUserID = false\n        angular.forEach(importedContactsResult.imported, function (importedContact) {\n          onContactUpdated(foundUserID = importedContact.user_id, true)\n        })\n\n        return foundUserID || false\n      })\n  }\n\n  function importContacts (contacts) {\n    var inputContacts = [],\n      i\n    var j\n\n    for (i = 0; i < contacts.length; i++) {\n      for (j = 0; j < contacts[i].phones.length; j++) {\n        inputContacts.push({\n          _: 'inputPhoneContact',\n          client_id: (i << 16 | j).toString(10),\n          phone: contacts[i].phones[j],\n          first_name: contacts[i].first_name,\n          last_name: contacts[i].last_name\n        })\n      }\n    }\n\n    return MtpApiManager.invokeApi('contacts.importContacts', {\n      contacts: inputContacts,\n      replace: false\n    }).then(function (importedContactsResult) {\n      saveApiUsers(importedContactsResult.users)\n\n      var result = []\n      angular.forEach(importedContactsResult.imported, function (importedContact) {\n        onContactUpdated(importedContact.user_id, true)\n        result.push(importedContact.user_id)\n      })\n\n      return result\n    })\n  } */\n\n  /* public deleteContacts(userIds: number[]) {\n    var ids: any[] = [];\n    userIds.forEach((userId) => {\n      ids.push(this.getUserInput(userId));\n    })\n\n    return apiManager.invokeApi('contacts.deleteContacts', {\n      id: ids\n    }).then(() => {\n      userIds.forEach((userId) => {\n        this.onContactUpdated(userId, false);\n      });\n    });\n  } */\n\n  public getTopPeers(type: TopPeerType) {\n    if(this.getTopPeersPromises[type]) return this.getTopPeersPromises[type];\n\n    return this.getTopPeersPromises[type] = appStateManager.getState().then((state) => {\n      const cached = state.topPeersCache[type];\n      if(cached && (cached.cachedTime + 86400e3) > Date.now() && cached.peers) {\n        return cached.peers;\n      }\n\n      return apiManager.invokeApi('contacts.getTopPeers', {\n        [type]: true,\n        offset: 0,\n        limit: 15,\n        hash: 0\n      }).then((result) => {\n        let topPeers: MyTopPeer[] = [];\n        if(result._ === 'contacts.topPeers') {\n          //console.log(result);\n          this.saveApiUsers(result.users);\n          appChatsManager.saveApiChats(result.chats);\n\n          if(result.categories.length) {\n            topPeers = result.categories[0].peers.map((topPeer) => {\n              const peerId = appPeersManager.getPeerId(topPeer.peer);\n              appStateManager.requestPeer(peerId, 'topPeer');\n              return {id: peerId, rating: topPeer.rating};\n            });\n          }\n        }\n  \n        state.topPeersCache[type] = {\n          peers: topPeers,\n          cachedTime: Date.now()\n        };\n        appStateManager.pushToState('topPeersCache', state.topPeersCache);\n  \n        return topPeers;\n      });\n    });\n  }\n\n  public getBlocked(offset = 0, limit = 0) {\n    return apiManager.invokeApiSingle('contacts.getBlocked', {offset, limit}).then(contactsBlocked => {\n      this.saveApiUsers(contactsBlocked.users);\n      appChatsManager.saveApiChats(contactsBlocked.chats);\n      const count = contactsBlocked._ === 'contacts.blocked' ? contactsBlocked.users.length + contactsBlocked.chats.length : contactsBlocked.count;\n\n      const peerIds = contactsBlocked.users.map(u => u.id).concat(contactsBlocked.chats.map(c => -c.id));\n\n      return {count, peerIds};\n    });\n  }\n\n  /* public searchContacts(query: string, limit = 20) {\n    return Promise.all([\n      this.getContacts(query),\n      apiManager.invokeApi('contacts.search', {\n        q: query,\n        limit\n      })\n    ]).then(results => {\n      const [myContacts, peers] = results;\n\n      this.saveApiUsers(peers.users);\n      appChatsManager.saveApiChats(peers.chats);\n\n      // * contacts.search returns duplicates in my_results\n      const myResults = new Set(myContacts.concat(peers.my_results.map(p => appPeersManager.getPeerID(p))));\n\n      const out = {\n        my_results: [...myResults].slice(0, limit),\n        results: peers.results.map(p => appPeersManager.getPeerID(p))\n      };\n\n      return out;\n    });\n  } */\n  public searchContacts(query: string, limit = 20) {\n    return apiManager.invokeApiCacheable('contacts.search', {\n      q: query,\n      limit\n    }, {cacheSeconds: 60}).then(peers => {\n      this.saveApiUsers(peers.users);\n      appChatsManager.saveApiChats(peers.chats);\n\n      const out = {\n        my_results: filterUnique(peers.my_results.map(p => appPeersManager.getPeerId(p))), // ! contacts.search returns duplicates in my_results\n        results: peers.results.map(p => appPeersManager.getPeerId(p))\n      };\n\n      return out;\n    });\n  }\n\n  private onContactUpdated(userId: number, isContact: boolean) {\n    const curIsContact = this.isContact(userId);\n    if(isContact !== curIsContact) {\n      if(isContact) {\n        this.pushContact(userId);\n      } else {\n        this.contactsList.delete(userId);\n      }\n\n      this.onContactsModified();\n\n      rootScope.dispatchEvent('contacts_update', userId);\n    }\n  }\n\n  public updateUsername(username: string) {\n    return apiManager.invokeApi('account.updateUsername', {\n      username\n    }).then((user) => {\n      this.saveApiUser(user);\n    });\n  }\n\n  public setUserStatus(userId: number, offline: boolean) {\n    if(this.isBot(userId)) {\n      return;\n    }\n\n    const user = this.users[userId];\n    if(user) {\n      const status: any = offline ? {\n        _: 'userStatusOffline',\n        was_online: tsNow(true)\n      } : {\n        _: 'userStatusOnline',\n        expires: tsNow(true) + 500\n      };\n\n      user.status = status;\n      //user.sortStatus = this.getUserStatusForSort(user.status);\n      rootScope.dispatchEvent('user_update', userId);\n    }\n  }\n\n  public addContact(userId: number, first_name: string, last_name: string, phone: string, showPhone?: true) {\n    return apiManager.invokeApi('contacts.addContact', {\n      id: this.getUserInput(userId),\n      first_name,\n      last_name,\n      phone,\n      add_phone_privacy_exception: showPhone\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\n\n      this.onContactUpdated(userId, true);\n    });\n  }\n\n  public deleteContacts(userIds: number[]) {\n    return apiManager.invokeApi('contacts.deleteContacts', {\n      id: userIds.map(userId => this.getUserInput(userId))\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\n\n      userIds.forEach(userId => {\n        this.onContactUpdated(userId, false);\n      });\n    });\n  }\n}\n\nconst appUsersManager = new AppUsersManager();\nMOUNT_CLASS_TO.appUsersManager = appUsersManager;\nexport default appUsersManager\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport findUpAttribute from \"../helpers/dom/findUpAttribute\";\r\nimport getRichValue from \"../helpers/dom/getRichValue\";\r\nimport isInputEmpty from \"../helpers/dom/isInputEmpty\";\r\nimport debounce from \"../helpers/schedulers/debounce\";\r\nimport { i18n, LangPackKey, _i18n } from \"../lib/langPack\";\r\nimport RichTextProcessor from \"../lib/richtextprocessor\";\r\n\r\nlet init = () => {\r\n  document.addEventListener('paste', (e) => {\r\n    if(!findUpAttribute(e.target, 'contenteditable=\"true\"')) {\r\n      return;\r\n    }\r\n    //console.log('document paste');\r\n\r\n    //console.log('messageInput paste');\r\n\r\n    e.preventDefault();\r\n    // @ts-ignore\r\n    let text = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n\r\n    let entities = RichTextProcessor.parseEntities(text);\r\n    //console.log('messageInput paste', text, entities);\r\n    entities = entities.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n    //text = RichTextProcessor.wrapEmojiText(text);\r\n    text = RichTextProcessor.wrapRichText(text, {entities, noLinks: true, wrappingDraft: true});\r\n\r\n    // console.log('messageInput paste after', text);\r\n\r\n    // @ts-ignore\r\n    //let html = (e.originalEvent || e).clipboardData.getData('text/html');\r\n\r\n    // @ts-ignore\r\n    //console.log('paste text', text, );\r\n    window.document.execCommand('insertHTML', false, text);\r\n  });\r\n\r\n  init = null;\r\n};\r\n\r\n// ! it doesn't respect symbols other than strongs\r\n/* const checkAndSetRTL = (input: HTMLElement) => {\r\n  //const isEmpty = isInputEmpty(input);\r\n  //console.log('input', isEmpty);\r\n\r\n  //const char = [...getRichValue(input)][0];\r\n  const char = (input instanceof HTMLInputElement ? input.value : input.innerText)[0];\r\n  let direction = 'ltr';\r\n  if(char && checkRTL(char)) {\r\n    direction = 'rtl';\r\n  }\r\n\r\n  //console.log('RTL', direction, char);\r\n\r\n  input.style.direction = direction;\r\n}; */\r\n\r\nexport enum InputState {\r\n  Neutral = 0,\r\n  Valid = 1,\r\n  Error = 2\r\n};\r\n\r\nexport type InputFieldOptions = {\r\n  placeholder?: LangPackKey, \r\n  label?: LangPackKey, \r\n  labelOptions?: any[],\r\n  labelText?: string,\r\n  name?: string, \r\n  maxLength?: number, \r\n  showLengthOn?: number,\r\n  plainText?: true,\r\n  animate?: true\r\n};\r\n\r\nclass InputField {\r\n  public container: HTMLElement;\r\n  public input: HTMLElement;\r\n  public inputFake: HTMLElement;\r\n  public label: HTMLLabelElement;\r\n\r\n  public originalValue: string;\r\n\r\n  //public onLengthChange: (length: number, isOverflow: boolean) => void;\r\n  protected wasInputFakeClientHeight: number;\r\n  // protected showScrollDebounced: () => void;\r\n\r\n  constructor(public options: InputFieldOptions = {}) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('input-field');\r\n\r\n    if(options.maxLength) {\r\n      options.showLengthOn = Math.round(options.maxLength / 3);\r\n    }\r\n\r\n    const {placeholder, maxLength, showLengthOn, name, plainText} = options;\r\n\r\n    let label = options.label || options.labelText;\r\n\r\n    let input: HTMLElement;\r\n    if(!plainText) {\r\n      if(init) {\r\n        init();\r\n      }\r\n\r\n      this.container.innerHTML = `\r\n      <div contenteditable=\"true\" class=\"input-field-input\"></div>\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      const observer = new MutationObserver(() => {\r\n        //checkAndSetRTL(input);\r\n\r\n        if(processInput) {\r\n          processInput();\r\n        }\r\n      });\r\n\r\n      // * because if delete all characters there will br left\r\n      input.addEventListener('input', () => {\r\n        if(isInputEmpty(input)) {\r\n          input.innerHTML = '';\r\n        }\r\n\r\n        if(this.inputFake) {\r\n          this.inputFake.innerHTML = input.innerHTML;\r\n          this.onFakeInput();\r\n        }\r\n      });\r\n      \r\n      // ! childList for paste first symbol\r\n      observer.observe(input, {characterData: true, childList: true, subtree: true});\r\n\r\n      if(options.animate) {\r\n        input.classList.add('scrollable', 'scrollable-y');\r\n        this.wasInputFakeClientHeight = 0;\r\n        // this.showScrollDebounced = debounce(() => this.input.classList.remove('no-scrollbar'), 150, false, true);\r\n        this.inputFake = document.createElement('div');\r\n        this.inputFake.setAttribute('contenteditable', 'true');\r\n        this.inputFake.className = input.className + ' input-field-input-fake';\r\n      }\r\n    } else {\r\n      this.container.innerHTML = `\r\n      <input type=\"text\" ${name ? `name=\"${name}\"` : ''} autocomplete=\"off\" ${label ? 'required=\"\"' : ''} class=\"input-field-input\">\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      //input.addEventListener('input', () => checkAndSetRTL(input));\r\n    }\r\n\r\n    input.setAttribute('dir', 'auto');\r\n\r\n    if(placeholder) {\r\n      _i18n(input, placeholder, undefined, 'placeholder');\r\n\r\n      if(this.inputFake) {\r\n        _i18n(this.inputFake, placeholder, undefined, 'placeholder');\r\n      }\r\n    }\r\n\r\n    if(label || placeholder) {\r\n      const border = document.createElement('div');\r\n      border.classList.add('input-field-border');\r\n      this.container.append(border);\r\n    }\r\n\r\n    if(label) {\r\n      this.label = document.createElement('label');\r\n      this.setLabel();\r\n      this.container.append(this.label);\r\n    }\r\n\r\n    let processInput: () => void;\r\n    if(maxLength) {\r\n      const labelEl = this.container.lastElementChild as HTMLLabelElement;\r\n      let showingLength = false;\r\n\r\n      processInput = () => {\r\n        const wasError = input.classList.contains('error');\r\n        // * https://stackoverflow.com/a/54369605 #2 to count emoji as 1 symbol\r\n        const inputLength = plainText ? (input as HTMLInputElement).value.length : [...getRichValue(input, false).value].length;\r\n        const diff = maxLength - inputLength;\r\n        const isError = diff < 0;\r\n        input.classList.toggle('error', isError);\r\n\r\n        //this.onLengthChange && this.onLengthChange(inputLength, isError);\r\n\r\n        if(isError || diff <= showLengthOn) {\r\n          this.setLabel();\r\n          labelEl.append(` (${maxLength - inputLength})`);\r\n          if(!showingLength) showingLength = true;\r\n        } else if((wasError && !isError) || showingLength) {\r\n          this.setLabel();\r\n          showingLength = false;\r\n        }\r\n      };\r\n\r\n      input.addEventListener('input', processInput);\r\n    }\r\n\r\n    this.input = input;\r\n  }\r\n\r\n  public select() {\r\n    if((this.input as HTMLInputElement).value) { // * avoid selecting whole empty field on iOS devices\r\n      (this.input as HTMLInputElement).select(); // * select text\r\n    }\r\n  }\r\n\r\n  public setLabel() {\r\n    this.label.textContent = '';\r\n    if(this.options.labelText) {\r\n      this.label.innerHTML = this.options.labelText;\r\n    } else {\r\n      this.label.append(i18n(this.options.label, this.options.labelOptions));\r\n    }\r\n  }\r\n\r\n  public onFakeInput() {\r\n    const {scrollHeight, clientHeight} = this.inputFake;\r\n    /* if(this.wasInputFakeClientHeight && this.wasInputFakeClientHeight !== clientHeight) {\r\n      this.input.classList.add('no-scrollbar'); // ! в сафари может вообще не появиться скролл после анимации, так как ему нужен полный reflow блока с overflow.\r\n      this.showScrollDebounced();\r\n    } */\r\n\r\n    this.wasInputFakeClientHeight = clientHeight;\r\n    this.input.style.height = scrollHeight ? scrollHeight + 'px' : '';\r\n  }\r\n\r\n  get value() {\r\n    return this.options.plainText ? (this.input as HTMLInputElement).value : getRichValue(this.input, false).value;\r\n    //return getRichValue(this.input);\r\n  }\r\n\r\n  set value(value: string) {\r\n    this.setValueSilently(value, false);\r\n\r\n    const event = new Event('input', {bubbles: true, cancelable: true});\r\n    this.input.dispatchEvent(event);\r\n  }\r\n\r\n  public setValueSilently(value: string, fireFakeInput = true) {\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).value = value;\r\n    } else {\r\n      this.input.innerHTML = value;\r\n      \r\n      if(this.inputFake) {\r\n        this.inputFake.innerHTML = value;\r\n\r\n        if(fireFakeInput) {\r\n          this.onFakeInput();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public isValid() {\r\n    return !this.input.classList.contains('error') && this.value !== this.originalValue;\r\n  }\r\n\r\n  public setOriginalValue(value: InputField['originalValue'] = '', silent = false) {\r\n    this.originalValue = value;\r\n\r\n    if(!this.options.plainText) {\r\n      value = RichTextProcessor.wrapDraftText(value);\r\n    }\r\n\r\n    if(silent) {\r\n      this.setValueSilently(value, false); \r\n    } else {\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  public setState(state: InputState, label?: LangPackKey) {\r\n    if(label) {\r\n      this.label.textContent = '';\r\n      this.label.append(i18n(label, this.options.labelOptions));\r\n    }\r\n\r\n    this.input.classList.toggle('error', !!(state & InputState.Error));\r\n    this.input.classList.toggle('valid', !!(state & InputState.Valid));\r\n  }\r\n\r\n  public setError(label?: LangPackKey) {\r\n    this.setState(InputState.Error, label);\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport { isObject, safeReplaceObject, copy, deepEqual } from \"../../helpers/object\";\nimport { ChannelParticipant, Chat, ChatAdminRights, ChatBannedRights, ChatParticipant, ChatPhoto, InputChannel, InputChatPhoto, InputFile, InputPeer, Update, Updates } from \"../../layer\";\nimport apiManagerProxy from \"../mtproto/mtprotoworker\";\nimport apiManager from '../mtproto/mtprotoworker';\nimport { RichTextProcessor } from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from \"./appStateManager\";\nimport appUsersManager from \"./appUsersManager\";\n\nexport type Channel = Chat.channel;\n\nexport type ChatRights = keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags'] | 'change_type' | 'change_permissions' | 'delete_chat' | 'view_participants';\n\nexport class AppChatsManager {\n  private storage = appStateManager.storages.chats;\n  \n  private chats: {[id: number]: Chat.channel | Chat.chat | any};\n  //private usernames: any;\n  //private channelAccess: any;\n  //private megagroups: {[id: number]: true};\n\n  constructor() {\n    this.clear(true);\n\n    rootScope.addMultipleEventsListeners({\n      /* updateChannel: (update) => {\n        const channelId = update.channel_id;\n        //console.log('updateChannel:', update);\n        rootScope.broadcast('channel_settings', {channelId});\n      }, */\n\n      updateChannelParticipant: (update) => {\n        apiManagerProxy.clearCache('channels.getParticipants', (params) => {\n          return (params.channel as InputChannel.inputChannel).channel_id === update.channel_id;\n        });\n      },\n\n      updateChatDefaultBannedRights: (update) => {\n        const chatId = -appPeersManager.getPeerId(update.peer);\n        const chat: Chat.chat = this.chats[chatId];\n        if(chat) {\n          chat.default_banned_rights = update.default_banned_rights;\n          rootScope.dispatchEvent('chat_update', chatId);\n        }\n      }\n    });\n\n    appStateManager.getState().then((state) => {\n      const chats = appStateManager.storagesResults.chats;\n      if(chats.length) {\n        for(let i = 0, length = chats.length; i < length; ++i) {\n          const chat = chats[i];\n          if(chat) {\n            this.chats[chat.id] = chat;\n          }\n        }\n      }\n\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\n        if(peerId > 0 || this.storage.getFromCache(-peerId)) {\n          return;\n        }\n\n        this.storage.set({\n          [-peerId]: this.getChat(-peerId)\n        });\n      });\n\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\n        if(peerId > 0 || !this.storage.getFromCache(-peerId)) {\n          return;\n        }\n\n        this.storage.delete(-peerId);\n      });\n    });\n  }\n\n  public clear(init = false) {\n    if(!init) {\n      const chats = appStateManager.storagesResults.chats;\n      for(const _chatId in this.chats) {\n        const chatId = +_chatId;\n        if(!chatId) continue;\n        if(!appStateManager.isPeerNeeded(-chatId)) {\n          /* const chat = this.chats[chatId];\n          if(chat.username) {\n            delete this.usernames[cleanUsername(chat.username)];\n          } */\n          \n          chats.findAndSplice((chat) => chat.id === chatId);\n          this.storage.delete(chatId);\n          delete this.chats[chatId];\n        }\n      }\n    } else {\n      this.chats = {};\n    }\n  }\n\n  public saveApiChats(apiChats: any[], override?: boolean) {\n    apiChats.forEach(chat => this.saveApiChat(chat, override));\n  }\n\n  public saveApiChat(chat: Chat, override?: boolean) {\n    if(chat._ === 'chatEmpty') return;\n    /* if(chat._ !== 'chat' && chat._ !== 'channel') {\n      return;\n    } */\n    \n    // * exclude from state\n    // defineNotNumerableProperties(chat, ['rTitle', 'initials']);\n\n    const oldChat: Exclude<Chat, Chat.chatEmpty> = this.chats[chat.id];\n\n    /* if(oldChat && !override) {\n      return;\n    } */\n\n    if((chat as Chat.chat).pFlags === undefined) {\n      (chat as Chat.chat).pFlags = {};\n    }\n\n    if((chat as Chat.channel).pFlags.min && oldChat !== undefined) {\n      return;\n    }\n\n    chat.initials = RichTextProcessor.getAbbreviation(chat.title);\n\n    if(chat._ === 'channel' &&\n        chat.participants_count === undefined &&\n        oldChat !== undefined &&\n        (oldChat as Chat.channel).participants_count) {\n      chat.participants_count = (oldChat as Chat.channel).participants_count;\n    }\n\n    /* if(chat.username) {\n      let searchUsername = searchIndexManager.cleanUsername(chat.username);\n      this.usernames[searchUsername] = chat.id;\n    } */\n\n    let changedPhoto = false, changedTitle = false;\n    if(oldChat === undefined) {\n      this.chats[chat.id] = chat;\n    } else {\n      const oldPhotoId = ((oldChat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\n      const newPhotoId = ((chat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\n      if(oldPhotoId !== newPhotoId) {\n        changedPhoto = true;\n      }\n\n      if(oldChat.title !== chat.title) {\n        changedTitle = true;\n      }\n\n      safeReplaceObject(oldChat, chat);\n      rootScope.dispatchEvent('chat_update', chat.id);\n    }\n\n    if(changedPhoto) {\n      rootScope.dispatchEvent('avatar_update', -chat.id);\n    }\n\n    if(changedTitle) {\n      rootScope.dispatchEvent('peer_title_edit', -chat.id);\n    }\n\n    if(appStateManager.isPeerNeeded(-chat.id)) {\n      this.storage.set({\n        [chat.id]: chat\n      });\n    }\n  }\n\n  public getChat(id: number) {\n    if(id < 0) id = -id;\n    return this.chats[id] || {_: 'chatEmpty', id, deleted: true, access_hash: '', pFlags: {}/* this.channelAccess[id] */};\n  }\n\n  public combineParticipantBannedRights(id: number, rights: ChatBannedRights) {\n    const chat: Chat.channel = this.getChat(id);\n\n    if(chat.default_banned_rights) {\n      rights = copy(rights);\n      const defaultRights = chat.default_banned_rights.pFlags;\n      for(let i in defaultRights) {\n        // @ts-ignore\n        rights.pFlags[i] = defaultRights[i];\n      }\n    }\n\n    return rights;\n  }\n\n  public hasRights(id: number, action: ChatRights, rights?: ChatAdminRights | ChatBannedRights, isThread?: boolean) {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'chatEmpty') return false;\n\n    if(chat._ === 'chatForbidden' ||\n        chat._ === 'channelForbidden' ||\n        (chat as Chat.chat).pFlags.kicked ||\n        (chat.pFlags.left && !(chat as Chat.channel).pFlags.megagroup)) {\n      return false;\n    }\n\n    if((chat as Chat.chat).pFlags.deactivated && action !== 'view_messages') {\n      return false;\n    }\n\n    if(chat.pFlags.creator && rights === undefined) {\n      return true;\n    }\n\n    if(!rights) {\n      rights = chat.admin_rights || (chat as Chat.channel).banned_rights || chat.default_banned_rights;\n\n      if(!rights) {\n        return false;\n      }\n    }\n\n    let myFlags: Partial<{[flag in keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags']]: true}> = {};\n    if(rights) {\n      myFlags = rights.pFlags as any;\n    }\n\n    switch(action) {\n      case 'embed_links':\n      case 'send_games':\n      case 'send_gifs':\n      case 'send_inline':\n      case 'send_media':\n      case 'send_messages':\n      case 'send_polls':\n      case 'send_stickers': {\n        if(!isThread && chat.pFlags.left) {\n          return false;\n        }\n\n        if(rights._ === 'chatBannedRights' && myFlags[action]) {\n          return false;\n        }\n\n        if(chat._ === 'channel') {\n          if(!chat.pFlags.megagroup && !myFlags.post_messages) {\n            return false;\n          }\n        }\n\n        break;\n      }\n\n      // * revoke foreign messages\n      case 'delete_messages': {\n        return !!myFlags.delete_messages;\n      }\n\n      case 'pin_messages': {\n        return rights._ === 'chatAdminRights' ? myFlags[action] || !!myFlags.post_messages : !myFlags[action];\n      }\n\n      case 'invite_users':\n      case 'change_info': {\n        return rights._ === 'chatAdminRights' ? myFlags[action] : !myFlags[action];\n      }\n\n      // * only creator can do that\n      case 'change_type':\n      case 'delete_chat': {\n        return false;\n      }\n\n      case 'change_permissions': {\n        return rights._ === 'chatAdminRights' && myFlags['ban_users'];\n      }\n\n      case 'view_participants': {\n        return !!(chat._ === 'chat' || !chat.pFlags.broadcast || chat.pFlags.creator || chat.admin_rights);\n      }\n    }\n\n    return true;\n  }\n\n  public editChatDefaultBannedRights(id: number, banned_rights: ChatBannedRights) {\n    const chat: Chat.chat = this.getChat(id);\n    if(chat.default_banned_rights) {\n      if(chat.default_banned_rights.until_date === banned_rights.until_date && deepEqual(chat.default_banned_rights.pFlags, banned_rights.pFlags)) {\n        return Promise.resolve();\n      }\n    }\n    \n    return apiManager.invokeApi('messages.editChatDefaultBannedRights', {\n      peer: appPeersManager.getInputPeerById(-id),\n      banned_rights\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  /* public resolveUsername(username: string) {\n    return this.usernames[username] || 0;\n  } */\n\n  /* public saveChannelAccess(id: number, accessHash: string) {\n    this.channelAccess[id] = accessHash;\n  } */\n\n  /* public saveIsMegagroup(id: number) {\n    this.megagroups[id] = true;\n  } */\n\n  public isChannel(id: number) {\n    const chat = this.chats[id];\n    return chat && (chat._ === 'channel' || chat._ === 'channelForbidden')/*  || this.channelAccess[id] */;\n  }\n\n  public isMegagroup(id: number) {\n    /* if(this.megagroups[id]) {\n      return true;\n    } */\n\n    const chat = this.chats[id];\n    return chat && chat._ === 'channel' && chat.pFlags.megagroup;\n  }\n\n  public isBroadcast(id: number) {\n    return this.isChannel(id) && !this.isMegagroup(id);\n  }\n\n  public isInChat(id: number) {\n    let good = true;\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'channelForbidden' \n      || chat._ === 'chatForbidden' \n      || chat._ === 'chatEmpty' \n      || (chat as Chat.chat).pFlags.left \n      || (chat as Chat.chat).pFlags.kicked \n      || (chat as Chat.chat).pFlags.deactivated) {\n      good = false;\n    }\n\n    return good;\n  }\n\n  public getChannelInput(id: number): InputChannel {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'chatEmpty' || !(chat as Chat.channel).access_hash) {\n      return {\n        _: 'inputChannelEmpty'\n      };\n    } else {\n      return {\n        _: 'inputChannel',\n        channel_id: id,\n        access_hash: (chat as Chat.channel).access_hash/*  || this.channelAccess[id] */ || '0'\n      };\n    }\n  }\n\n  public getChatInputPeer(id: number): InputPeer.inputPeerChat {\n    return {\n      _: 'inputPeerChat',\n      chat_id: id\n    };\n  }\n\n  public getChannelInputPeer(id: number): InputPeer.inputPeerChannel {\n    return {\n      _: 'inputPeerChannel',\n      channel_id: id,\n      access_hash: this.getChat(id).access_hash/*  || this.channelAccess[id] */ || 0\n    };\n  }\n\n  public hasChat(id: number, allowMin?: true) {\n    const chat = this.chats[id]\n    return isObject(chat) && (allowMin || !chat.pFlags.min);\n  }\n\n  public getChatPhoto(id: number) {\n    const chat: Chat.chat = this.getChat(id);\n\n    return chat && chat.photo || {\n      _: 'chatPhotoEmpty'\n    };\n  }\n\n  public getChatString(id: number) {\n    const chat = this.getChat(id);\n    if(this.isChannel(id)) {\n      return (this.isMegagroup(id) ? 's' : 'c') + id + '_' + chat.access_hash;\n    }\n    return 'g' + id;\n  }\n\n  /* public wrapForFull(id: number, fullChat: any) {\n    const chatFull = copy(fullChat);\n    const chat = this.getChat(id);\n\n    if(!chatFull.participants_count) {\n      chatFull.participants_count = chat.participants_count;\n    }\n\n    if(chatFull.participants &&\n        chatFull.participants._ === 'chatParticipants') {\n      chatFull.participants.participants = this.wrapParticipants(id, chatFull.participants.participants);\n    }\n\n    if(chatFull.about) {\n      chatFull.rAbout = RichTextProcessor.wrapRichText(chatFull.about, {noLinebreaks: true});\n    }\n\n    //chatFull.peerString = this.getChatString(id);\n    chatFull.chat = chat;\n\n    return chatFull;\n  }\n\n  public wrapParticipants(id: number, participants: any[]) {\n    const chat = this.getChat(id);\n    const myId = appUsersManager.getSelf().id;\n    if(this.isChannel(id)) {\n      const isAdmin = chat.pFlags.creator;\n      participants.forEach((participant) => {\n        participant.canLeave = myId === participant.user_id;\n        participant.canKick = isAdmin && participant._ === 'channelParticipant';\n\n        // just for order by last seen\n        participant.user = appUsersManager.getUser(participant.user_id);\n      });\n    } else {\n      const isAdmin = chat.pFlags.creator || chat.pFlags.admins_enabled && chat.pFlags.admin;\n      participants.forEach((participant) => {\n        participant.canLeave = myId === participant.user_id;\n        participant.canKick = !participant.canLeave && (\n          chat.pFlags.creator ||\n          participant._ === 'chatParticipant' && (isAdmin || myId === participant.inviter_id)\n        );\n\n        // just for order by last seen\n        participant.user = appUsersManager.getUser(participant.user_id);\n      });\n    }\n\n    return participants;\n  } */\n\n  public createChannel(title: string, about: string): Promise<number> {\n    return apiManager.invokeApi('channels.createChannel', {\n      broadcast: true,\n      title,\n      about\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n\n      const channelId = (updates as any).chats[0].id;\n      rootScope.dispatchEvent('history_focus', {peerId: -channelId});\n\n      return channelId;\n    });\n  }\n\n  public inviteToChannel(id: number, userIds: number[]) {\n    const input = this.getChannelInput(id);\n    const usersInputs = userIds.map(u => appUsersManager.getUserInput(u));\n\n    return apiManager.invokeApi('channels.inviteToChannel', {\n      channel: input,\n      users: usersInputs\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public createChat(title: string, userIds: number[]): Promise<number> {\n    return apiManager.invokeApi('messages.createChat', {\n      users: userIds.map(u => appUsersManager.getUserInput(u)),\n      title\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n\n      const chatId = (updates as any as Updates.updates).chats[0].id;\n      rootScope.dispatchEvent('history_focus', {peerId: -chatId});\n\n      return chatId;\n    });\n  }\n\n  private onChatUpdated = (chatId: number, updates: any) => {\n    //console.log('onChatUpdated', chatId, updates);\n\n    apiUpdatesManager.processUpdateMessage(updates);\n    if(updates &&\n        /* updates.updates &&\n        updates.updates.length && */\n        this.isChannel(chatId)) {\n      rootScope.dispatchEvent('invalidate_participants', chatId);\n    }\n  };\n\n  public leaveChannel(id: number) {\n    return apiManager.invokeApi('channels.leaveChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public joinChannel(id: number) {\n    return apiManager.invokeApi('channels.joinChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public addChatUser(id: number, userId: number, fwdLimit = 100) {\n    return apiManager.invokeApi('messages.addChatUser', {\n      chat_id: id,\n      user_id: appUsersManager.getUserInput(userId),\n      fwd_limit: fwdLimit\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public deleteChatUser(id: number, userId: number) {\n    return apiManager.invokeApi('messages.deleteChatUser', {\n      chat_id: id,\n      user_id: appUsersManager.getUserInput(userId)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public leaveChat(id: number) {\n    return this.deleteChatUser(id, appUsersManager.getSelf().id);\n  }\n\n  public leave(id: number) {\n    return this.isChannel(id) ? this.leaveChannel(id) : this.leaveChat(id);\n  }\n\n  public delete(id: number) {\n    return this.isChannel(id) ? this.deleteChannel(id) : this.deleteChat(id);\n  }\n\n  public deleteChannel(id: number) {\n    return apiManager.invokeApi('channels.deleteChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public deleteChat(id: number) {\n    //return this.leaveChat(id).then(() => {\n      return apiManager.invokeApi('messages.deleteChat', {\n        chat_id: id\n      });\n    //});\n  }\n\n  public migrateChat(id: number): Promise<number> {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'channel') return Promise.resolve(chat.id);\n    return apiManager.invokeApi('messages.migrateChat', {\n      chat_id: id\n    }).then((updates) => {\n      this.onChatUpdated(id, updates);\n      const update: Update.updateChannel = (updates as Updates.updates).updates.find(u => u._ === 'updateChannel') as any;\n      return update.channel_id;\n    });\n  }\n\n  public updateUsername(id: number, username: string) {\n    return apiManager.invokeApi('channels.updateUsername', {\n      channel: this.getChannelInput(id),\n      username\n    }).then((bool) => {\n      if(bool) {\n        const chat: Chat.channel = this.getChat(id);\n        chat.username = username;\n      }\n\n      return bool;\n    });\n  }\n\n  public editPhoto(id: number, inputFile: InputFile) {\n    const inputChatPhoto: InputChatPhoto = {\n      _: 'inputChatUploadedPhoto',\n      file: inputFile\n    };\n\n    let promise: any;\n    if(this.isChannel(id)) {\n      promise = apiManager.invokeApi('channels.editPhoto', {\n        channel: this.getChannelInput(id),\n        photo: inputChatPhoto\n      });\n    } else {\n      promise = apiManager.invokeApi('messages.editChatPhoto', {\n        chat_id: id,\n        photo: inputChatPhoto\n      });\n    }\n\n    return promise.then((updates: any) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public editTitle(id: number, title: string) {\n    let promise: any;\n\n    if(this.isChannel(id)) {\n      promise = apiManager.invokeApi('channels.editTitle', {\n        channel: this.getChannelInput(id),\n        title\n      });\n    } else {\n      promise = apiManager.invokeApi('messages.editChatTitle', {\n        chat_id: id,\n        title\n      });\n    }\n\n    return promise.then((updates: any) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public editAbout(id: number, about: string) {\n    return apiManager.invokeApi('messages.editChatAbout', {\n      peer: appPeersManager.getInputPeerById(-id),\n      about\n    }).then(bool => {\n      //apiUpdatesManager.processUpdateMessage(updates);\n      rootScope.dispatchEvent('peer_bio_edit', -id);\n    });\n  }\n\n  public getParticipantPeerId(participant: ChannelParticipant | ChatParticipant) {\n    const peerId = (participant as ChannelParticipant.channelParticipantBanned).peer ? \n      appPeersManager.getPeerId((participant as ChannelParticipant.channelParticipantBanned).peer) : \n      (participant as ChatParticipant.chatParticipant).user_id;\n    return peerId;\n  }\n\n  public editBanned(id: number, participant: number | ChannelParticipant, banned_rights: ChatBannedRights) {\n    const peerId = typeof(participant) === 'number' ? participant : this.getParticipantPeerId(participant);\n    return apiManager.invokeApi('channels.editBanned', {\n      channel: this.getChannelInput(id),\n      participant: appPeersManager.getInputPeerById(peerId),\n      banned_rights\n    }).then((updates) => {\n      this.onChatUpdated(id, updates);\n\n      if(typeof(participant) !== 'number') {\n        const timestamp = Date.now() / 1000 | 0;\n        apiUpdatesManager.processLocalUpdate({\n          _: 'updateChannelParticipant',\n          channel_id: id,\n          date: timestamp,\n          actor_id: undefined,\n          qts: undefined,\n          user_id: peerId,\n          prev_participant: participant,\n          new_participant: Object.keys(banned_rights.pFlags).length ? {\n            _: 'channelParticipantBanned',\n            date: timestamp,\n            banned_rights,\n            kicked_by: appUsersManager.getSelf().id,\n            peer: appPeersManager.getOutputPeer(peerId),\n            pFlags: {}\n          } : undefined\n        });\n      }\n    });\n  }\n\n  public clearChannelParticipantBannedRights(id: number, participant: number | ChannelParticipant) {\n    return this.editBanned(id, participant, {\n      _: 'chatBannedRights',\n      until_date: 0,\n      pFlags: {}\n    });\n  }\n  \n  public kickFromChannel(id: number, participant: number | ChannelParticipant) {\n    return this.editBanned(id, participant, {\n      _: 'chatBannedRights',\n      until_date: 0,\n      pFlags: {\n        view_messages: true\n      }\n    });\n  }\n\n  public resolveChannel(id: number) {\n    return apiManager.invokeApiSingle('channels.getChannels', {\n      id: [{\n        _: 'inputChannel',\n        channel_id: id,\n        access_hash: '0'\n      }]\n    }).then(messagesChats => {\n      this.saveApiChats(messagesChats.chats);\n    });\n  }\n}\n\nconst appChatsManager = new AppChatsManager();\nMOUNT_CLASS_TO.appChatsManager = appChatsManager;\nexport default appChatsManager;\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { ChatPhoto, DialogPeer, InputDialogPeer, InputNotifyPeer, InputPeer, Peer, Update, UserProfilePhoto } from \"../../layer\";\r\nimport type { LangPackKey } from \"../langPack\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { isObject } from \"../../helpers/object\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport I18n from '../langPack';\r\n\r\n// https://github.com/eelcohn/Telegram-API/wiki/Calculating-color-for-a-Telegram-user-on-IRC\r\n/*\r\n  HTML-color  IRC-color  Description\r\n  #c03d33     4          red\r\n  #4fad2d     3          green\r\n  #d09306     7          yellow\r\n  #168acd     10         blue\r\n  #8544d6     6          purple\r\n  #cd4073     13         pink\r\n  #2996ad     11         sea\r\n  #ce671b     5          orange\r\n  */\r\nconst DialogColorsFg = ['#fc5c51', '#0fb297', '#d09306', '#3d72ed', '#895dd5', '#cd4073', '#00c1a6', '#fa790f'];\r\nconst DialogColors = ['red', 'green', 'yellow', 'blue', 'violet', 'pink', 'cyan', 'orange'];\r\nconst DialogColorsMap = [0, 7, 4, 1, 6, 3, 5];\r\n\r\nexport type PeerType = 'channel' | 'chat' | 'megagroup' | 'group' | 'saved';\r\nexport class AppPeersManager {\r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      updatePeerBlocked: (update) => {\r\n        rootScope.dispatchEvent('peer_block', {peerId: this.getPeerId(update.peer_id), blocked: update.blocked});\r\n      }\r\n    });\r\n  }\r\n  /* public savePeerInstance(peerId: number, instance: any) {\r\n    if(peerId < 0) appChatsManager.saveApiChat(instance);\r\n    else appUsersManager.saveApiUser(instance);\r\n  } */\r\n\r\n  public canPinMessage(peerId: number) {\r\n    return peerId > 0 || appChatsManager.hasRights(-peerId, 'pin_messages');\r\n  }\r\n\r\n  public getPeerPhoto(peerId: number): UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto {\r\n    const photo = peerId > 0\r\n      ? appUsersManager.getUserPhoto(peerId)\r\n      : appChatsManager.getChatPhoto(-peerId);\r\n\r\n    return photo._ !== 'chatPhotoEmpty' && photo._ !== 'userProfilePhotoEmpty' ? photo : null;\r\n  }\r\n\r\n  public getPeerMigratedTo(peerId: number) {\r\n    if(peerId >= 0) {\r\n      return false;\r\n    }\r\n\r\n    let chat = appChatsManager.getChat(-peerId);\r\n    if(chat && chat.migrated_to && chat.pFlags.deactivated) {\r\n      return this.getPeerId(chat.migrated_to);\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  public getPeerTitle(peerId: number | any, plainText = false, onlyFirstName = false) {\r\n    if(!peerId) {\r\n      peerId = rootScope.myId;\r\n    }\r\n    \r\n    let peer: any = {}; \r\n    if(!isObject(peerId)) {\r\n      peer = this.getPeer(peerId);\r\n    } else peer = peerId;\r\n\r\n    let title = '';\r\n    if(peerId > 0) {\r\n      if(peer.first_name) title += peer.first_name;\r\n      if(peer.last_name) title += ' ' + peer.last_name;\r\n  \r\n      if(!title) title = peer.pFlags.deleted ? I18n.format('HiddenName', true) : peer.username;\r\n      else title = title.trim();\r\n    } else {\r\n      title = peer.title;\r\n    }\r\n\r\n    if(onlyFirstName) {\r\n      title = title.split(' ')[0];\r\n    }\r\n    \r\n    return plainText ? title : RichTextProcessor.wrapEmojiText(title);\r\n  }\r\n  \r\n  public getOutputPeer(peerId: number): Peer {\r\n    if(peerId > 0) {\r\n      return {_: 'peerUser', user_id: peerId};\r\n    }\r\n\r\n    let chatId = -peerId;\r\n    if(appChatsManager.isChannel(chatId)) {\r\n      return {_: 'peerChannel', channel_id: chatId};\r\n    }\r\n\r\n    return {_: 'peerChat', chat_id: chatId};\r\n  }\r\n\r\n  public getPeerString(peerId: number) {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUserString(peerId);\r\n    }\r\n    return appChatsManager.getChatString(-peerId);\r\n  }\r\n\r\n  public getPeerUsername(peerId: number): string {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUser(peerId).username || '';\r\n    }\r\n    return appChatsManager.getChat(-peerId).username || '';\r\n  }\r\n\r\n  public getPeer(peerId: number) {\r\n    return peerId > 0\r\n      ? appUsersManager.getUser(peerId)\r\n      : appChatsManager.getChat(-peerId)\r\n  }\r\n\r\n  public getPeerId(peerId: Peer | InputPeer | number | string): number {\r\n    if(typeof(peerId) === 'number') return peerId;\r\n    else if(isObject(peerId)) return (peerId as Peer.peerUser).user_id || -((peerId as Peer.peerChannel).channel_id || (peerId as Peer.peerChat).chat_id);\r\n    else if(!peerId) return 0;\r\n    \r\n    const isUser = (peerId as string).charAt(0) === 'u';\r\n    const peerParams = (peerId as string).substr(1).split('_');\r\n\r\n    return isUser ? +peerParams[0] : -peerParams[0] || 0;\r\n  }\r\n\r\n  public getDialogPeer(peerId: number): DialogPeer {\r\n    return {\r\n      _: 'dialogPeer',\r\n      peer: this.getOutputPeer(peerId)\r\n    };\r\n  }\r\n\r\n  public isChannel(peerId: number): boolean {\r\n    return (peerId < 0) && appChatsManager.isChannel(-peerId);\r\n  }\r\n\r\n  public isMegagroup(peerId: number) {\r\n    return (peerId < 0) && appChatsManager.isMegagroup(-peerId);\r\n  }\r\n\r\n  public isAnyGroup(peerId: number): boolean {\r\n    return (peerId < 0) && !appChatsManager.isBroadcast(-peerId);\r\n  }\r\n\r\n  public isBroadcast(peerId: number): boolean {\r\n    return this.isChannel(peerId) && !this.isMegagroup(peerId);\r\n  }\r\n\r\n  public isBot(peerId: number): boolean {\r\n    return (peerId > 0) && appUsersManager.isBot(peerId);\r\n  }\r\n\r\n  /* public getInputPeer(peerString: string): InputPeer {\r\n    var firstChar = peerString.charAt(0);\r\n    var peerParams = peerString.substr(1).split('_');\r\n    let id = +peerParams[0];\r\n\r\n    if(firstChar === 'u') {\r\n      //appUsersManager.saveUserAccess(id, peerParams[1]);\r\n\r\n      return {\r\n        _: 'inputPeerUser',\r\n        user_id: id,\r\n        access_hash: peerParams[1]\r\n      };\r\n    } else if(firstChar === 'c' || firstChar === 's') {\r\n      //appChatsManager.saveChannelAccess(id, peerParams[1]);\r\n      if(firstChar === 's') {\r\n        appChatsManager.saveIsMegagroup(id);\r\n      }\r\n\r\n      return {\r\n        _: 'inputPeerChannel',\r\n        channel_id: id,\r\n        access_hash: peerParams[1] || '0'\r\n      };\r\n    } else {\r\n      return {\r\n        _: 'inputPeerChat',\r\n        chat_id: id\r\n      };\r\n    }\r\n  } */\r\n\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId: true): Exclude<InputNotifyPeer, InputNotifyPeer.inputNotifyPeer>;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: false): InputNotifyPeer.inputNotifyPeer;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: boolean): InputNotifyPeer {\r\n    if(ignorePeerId) {\r\n      if(peerId > 0) {\r\n        return {_: 'inputNotifyUsers'};\r\n      } else {\r\n        if(appPeersManager.isBroadcast(peerId)) {\r\n          return {_: 'inputNotifyBroadcasts'};\r\n        } else {\r\n          return {_: 'inputNotifyChats'};\r\n        }\r\n      }\r\n    } else {\r\n      return {\r\n        _: 'inputNotifyPeer', \r\n        peer: this.getInputPeerById(peerId)\r\n      };\r\n    }\r\n  }\r\n\r\n  public getInputPeerById(peerId: number): InputPeer {\r\n    if(!peerId) {\r\n      return {_: 'inputPeerEmpty'};\r\n    }\r\n\r\n    if(peerId < 0) {\r\n      const chatId = -peerId;\r\n      if(!appChatsManager.isChannel(chatId)) {\r\n        return appChatsManager.getChatInputPeer(chatId);\r\n      } else {\r\n        return appChatsManager.getChannelInputPeer(chatId);\r\n      }\r\n    }\r\n\r\n    return {\r\n      _: 'inputPeerUser',\r\n      user_id: peerId,\r\n      access_hash: appUsersManager.getUser(peerId).access_hash\r\n    };\r\n  }\r\n\r\n  public getInputDialogPeerById(peerId: number): InputDialogPeer {\r\n    return {\r\n      _: 'inputDialogPeer',\r\n      peer: this.getInputPeerById(peerId)\r\n    }\r\n  }\r\n\r\n  public getPeerColorById(peerId: number, pic = true) {\r\n    if(!peerId) return '';\r\n\r\n    const idx = DialogColorsMap[(peerId < 0 ? -peerId : peerId) % 7];\r\n    const color = (pic ? DialogColors : DialogColorsFg)[idx];\r\n    return color;\r\n  }\r\n\r\n  public getPeerSearchText(peerId: number) {\r\n    let text;\r\n    if(peerId > 0) {\r\n      text = '%pu ' + appUsersManager.getUserSearchText(peerId);\r\n    } else if(peerId < 0) {\r\n      const chat = appChatsManager.getChat(-peerId);\r\n      text = '%pg ' + (chat.title || '');\r\n    }\r\n    return text;\r\n  }\r\n\r\n  public getDialogType(peerId: number): PeerType {\r\n    if(appPeersManager.isMegagroup(peerId)) {\r\n      return 'megagroup';\r\n    } else if(appPeersManager.isChannel(peerId)) {\r\n      return 'channel';\r\n    } else if(peerId < 0) {\r\n      return 'group';\r\n    } else {\r\n      return peerId === rootScope.myId ? 'saved' : 'chat';\r\n    }\r\n  }\r\n\r\n  public getDeleteButtonText(peerId: number): LangPackKey {\r\n    switch(this.getDialogType(peerId)) {\r\n      case 'channel':\r\n        return 'ChatList.Context.LeaveChannel';\r\n\r\n      case 'megagroup':\r\n        return 'ChatList.Context.LeaveGroup';\r\n\r\n      case 'group':\r\n        return 'ChatList.Context.DeleteAndExit';\r\n      \r\n      default:\r\n        return 'ChatList.Context.DeleteChat';\r\n    }\r\n  }\r\n}\r\n\r\nconst appPeersManager = new AppPeersManager();\r\nMOUNT_CLASS_TO.appPeersManager = appPeersManager;\r\nexport default appPeersManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { MessageEntity } from \"../../layer\";\r\nimport RichTextProcessor from \"../../lib/richtextprocessor\";\r\nimport getRichElementValue from \"./getRichElementValue\";\r\n\r\nexport default function getRichValue(field: HTMLElement, withEntities = true) {\r\n  const lines: string[] = [];\r\n  const line: string[] = [];\r\n\r\n  const entities: MessageEntity[] = withEntities ? [] : undefined;\r\n  getRichElementValue(field, lines, line, undefined, undefined, entities);\r\n  if(line.length) {\r\n    lines.push(line.join(''));\r\n  }\r\n\r\n  let value = lines.join('\\n');\r\n  value = value.replace(/\\u00A0/g, ' ');\r\n\r\n  if(entities) {\r\n    RichTextProcessor.combineSameEntities(entities);\r\n  }\r\n\r\n  //console.log('getRichValue:', value, entities);\r\n\r\n  return {value, entities};\r\n}\r\n\r\nMOUNT_CLASS_TO.getRichValue = getRichValue;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function toggleDisability(elements: HTMLElement[], disable: boolean) {\r\n  if(disable) {\r\n    elements.forEach(el => el.setAttribute('disabled', 'true'));\r\n  } else {\r\n    elements.forEach(el => el.removeAttribute('disabled'));\r\n  }\r\n\r\n  return () => toggleDisability(elements, !disable);\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { ApplyServerTimeOffsetTask } from './timeManager';\r\nimport { MOUNT_CLASS_TO } from '../../config/debug';\r\n// import { tsNow } from '../../helpers/date';\r\nimport sessionStorage from '../sessionStorage';\r\nimport apiManager from './mtprotoworker';\r\n\r\nexport class ServerTimeManager {\r\n  /* private midnightNoOffset: number;\r\n  private midnightOffseted: Date;\r\n\r\n  private midnightOffset: number; */\r\n\r\n  public serverTimeOffset: number; // in seconds\r\n  /* private timeParams: {\r\n    midnightOffset: number,\r\n    serverTimeOffset: number\r\n  }; */\r\n\r\n  constructor() {\r\n    /* const timestampNow = tsNow(true);\r\n    this.midnightNoOffset = timestampNow - (timestampNow % 86400);\r\n    this.midnightOffseted = new Date();\r\n    this.midnightOffseted.setHours(0, 0, 0, 0);\r\n    \r\n    this.midnightOffset = this.midnightNoOffset - (Math.floor(+this.midnightOffseted / 1000)); */\r\n\r\n    this.serverTimeOffset = 0;\r\n    /* this.timeParams = {\r\n      midnightOffset: this.midnightOffset,\r\n      serverTimeOffset: this.serverTimeOffset\r\n    }; */\r\n\r\n    sessionStorage.get('server_time_offset').then((to) => {\r\n      if(to) {\r\n        this.serverTimeOffset = to;\r\n        // this.timeParams.serverTimeOffset = to;\r\n      }\r\n    });\r\n\r\n    apiManager.addTaskListener('applyServerTimeOffset', (task: ApplyServerTimeOffsetTask) => {\r\n      this.serverTimeOffset = task.payload;\r\n    });\r\n  }\r\n}\r\n\r\nconst serverTimeManager = new ServerTimeManager();\r\nMOUNT_CLASS_TO && (MOUNT_CLASS_TO.serverTimeManager = serverTimeManager);\r\nexport default serverTimeManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n/* import { copy } from \"./object\";\r\n\r\nexport function listMergeSorted(list1: any[] = [], list2: any[] = []) {\r\n  const result = copy(list1);\r\n\r\n  const minId = list1.length ? list1[list1.length - 1] : 0xFFFFFFFF;\r\n  for(let i = 0; i < list2.length; i++) {\r\n    if(list2[i] < minId) {\r\n      result.push(list2[i]);\r\n    }\r\n  }\r\n\r\n  return result;\r\n} */\r\n\r\nexport const accumulate = (arr: number[], initialValue: number) => arr.reduce((acc, value) => acc + value, initialValue);\r\n\r\nexport function findAndSpliceAll<T>(array: Array<T>, verify: (value: T, index: number, arr: typeof array) => boolean) {\r\n  const out: typeof array = [];\r\n  let idx = -1;\r\n  while((idx = array.findIndex(verify)) !== -1) {\r\n    out.push(array.splice(idx, 1)[0]);\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\nexport function forEachReverse<T>(array: Array<T>, callback: (value: T, index?: number, array?: Array<T>) => void) {\r\n  for(let length = array.length, i = length - 1; i >= 0; --i) {\r\n    callback(array[i], i, array);\r\n  }\r\n};\r\n\r\nexport function insertInDescendSortedArray<T extends {[smth in K]?: number}, K extends keyof T>(array: Array<T>, element: T, property: K, pos?: number) {\r\n  if(pos === undefined) {\r\n    pos = array.indexOf(element);\r\n    if(pos !== -1) {\r\n      array.splice(pos, 1);\r\n    }\r\n  }\r\n\r\n  const sortProperty: number = element[property];\r\n  const len = array.length;\r\n  if(!len || sortProperty <= array[len - 1][property]) {\r\n    return array.push(element) - 1;\r\n  } else if(sortProperty >= array[0][property]) {\r\n    array.unshift(element);\r\n    return 0;\r\n  } else {\r\n    for(let i = 0; i < len; i++) {\r\n      if(sortProperty > array[i][property]) {\r\n        array.splice(i, 0, element);\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n\r\n  console.error('wtf', array, element);\r\n  return array.indexOf(element);\r\n}\r\n\r\nexport function filterUnique<T extends Array<any>>(arr: T): T {\r\n  return [...new Set(arr)] as T;\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\n//import apiManager from '../mtproto/apiManager';\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\nimport { Message, MessageFwdHeader, Peer, Update, Updates } from '../../layer';\nimport { logger, LogTypes } from '../logger';\nimport apiManager from '../mtproto/mtprotoworker';\nimport rootScope from '../rootScope';\n//import networkerFactory from '../mtproto/networkerFactory';\nimport appUsersManager from \"./appUsersManager\";\nimport appChatsManager from \"./appChatsManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from './appStateManager';\nimport serverTimeManager from '../mtproto/serverTimeManager';\n\ntype UpdatesState = {\n  pendingPtsUpdates: (Update & {pts: number, pts_count: number})[],\n  pendingSeqUpdates?: {[seq: number]: {seq: number, date: number, updates: any[]}},\n  syncPending: {\n    seqAwaiting?: number,\n    ptsAwaiting?: true,\n    timeout: number\n  },\n  syncLoading: Promise<void>,\n\n  seq?: number,\n  pts?: number,\n  date?: number,\n  lastPtsUpdateTime?: number\n};\n\nconst SYNC_DELAY = 6;\n\nexport class ApiUpdatesManager {\n  public updatesState: UpdatesState = {\n    pendingPtsUpdates: [],\n    pendingSeqUpdates: {},\n    syncPending: null,\n    syncLoading: null\n  };\n\n  private channelStates: {[channelId: number]: UpdatesState} = {};\n  private attached = false;\n\n  private log = logger('UPDATES', LogTypes.Error | LogTypes.Warn | LogTypes.Log/*  | LogTypes.Debug */);\n  private debug = DEBUG;\n\n  private setProxy() {\n    const self = this;\n    this.updatesState = new Proxy(this.updatesState, {\n      set: function(target: ApiUpdatesManager['updatesState'], key: keyof ApiUpdatesManager['updatesState'], value: ApiUpdatesManager['updatesState'][typeof key]) {\n        // @ts-ignore\n        target[key] = value;\n        self.saveUpdatesState();\n        return true;\n      }\n    });\n  }\n\n  public saveUpdatesState() {\n    const us = this.updatesState;\n    appStateManager.pushToState('updates', {\n      seq: us.seq,\n      pts: us.pts,\n      date: us.date\n    });\n  }\n\n  private popPendingSeqUpdate() {\n    const state = this.updatesState;\n    const nextSeq = state.seq + 1;\n    const pendingUpdatesData = state.pendingSeqUpdates[nextSeq];\n    if(!pendingUpdatesData) {\n      return false;\n    }\n\n    const updates = pendingUpdatesData.updates;\n    for(let i = 0, length = updates.length; i < length; ++i) {\n      this.saveUpdate(updates[i]);\n    }\n\n    state.seq = pendingUpdatesData.seq;\n    if(pendingUpdatesData.date && state.date < pendingUpdatesData.date) {\n      state.date = pendingUpdatesData.date;\n    }\n    delete state.pendingSeqUpdates[nextSeq];\n  \n    if(!this.popPendingSeqUpdate() &&\n      state.syncPending &&\n      state.syncPending.seqAwaiting &&\n      state.seq >= state.syncPending.seqAwaiting) {\n      if(!state.syncPending.ptsAwaiting) {\n        clearTimeout(state.syncPending.timeout);\n        state.syncPending = null;\n      } else {\n        delete state.syncPending.seqAwaiting;\n      }\n    }\n  \n    return true;\n  }\n\n  private popPendingPtsUpdate(channelId: number) {\n    const curState = channelId ? this.getChannelState(channelId) : this.updatesState;\n    if(!curState.pendingPtsUpdates.length) {\n      return false;\n    }\n\n    curState.pendingPtsUpdates.sort((a, b) => {\n      return a.pts - b.pts;\n    });\n    // this.log('pop update', channelId, curState.pendingPtsUpdates)\n  \n    let curPts = curState.pts;\n    let goodPts = 0;\n    let goodIndex = 0;\n    for(let i = 0, length = curState.pendingPtsUpdates.length; i < length; ++i) {\n      const update = curState.pendingPtsUpdates[i];\n      curPts += update.pts_count;\n      if(curPts >= update.pts) {\n        goodPts = update.pts;\n        goodIndex = i;\n      }\n    }\n  \n    if(!goodPts) {\n      return false;\n    }\n  \n    this.debug && this.log.debug('pop pending pts updates', goodPts, curState.pendingPtsUpdates.slice(0, goodIndex + 1));\n  \n    curState.pts = goodPts;\n    for(let i = 0; i <= goodIndex; ++i) {\n      const update = curState.pendingPtsUpdates[i];\n\n      // @ts-ignore\n      this.saveUpdate(update);\n    }\n    curState.pendingPtsUpdates.splice(0, goodIndex + 1);\n  \n    if(!curState.pendingPtsUpdates.length && curState.syncPending) {\n      if(!curState.syncPending.seqAwaiting) {\n        clearTimeout(curState.syncPending.timeout);\n        curState.syncPending = null;\n      } else {\n        delete curState.syncPending.ptsAwaiting;\n      }\n    }\n  \n    return true;\n  }\n\n  public forceGetDifference() {\n    if(!this.updatesState.syncLoading) {\n      this.getDifference();\n    }\n  }\n\n  public processLocalUpdate(update: Update) {\n    this.processUpdateMessage({\n      _: 'updateShort',\n      update\n    } as Updates);\n  }\n\n  public processUpdateMessage = (updateMessage: any, options: Partial<{\n    override: boolean\n  }> = {}) => {\n    // return forceGetDifference()\n    const processOpts = {\n      date: updateMessage.date,\n      seq: updateMessage.seq,\n      seqStart: updateMessage.seq_start,\n      //ignoreSyncLoading: options.ignoreSyncLoading\n    };\n\n    this.debug && this.log.debug('processUpdateMessage', updateMessage);\n  \n    switch(updateMessage._) {\n      case 'updatesTooLong':\n      case 'new_session_created':\n        this.forceGetDifference();\n        break;\n  \n      case 'updateShort':\n        this.processUpdate(updateMessage.update, processOpts);\n        break;\n  \n      case 'updateShortMessage':\n      case 'updateShortChatMessage': {\n        this.debug && this.log.debug('updateShortMessage | updateShortChatMessage', {...updateMessage});\n        const isOut = updateMessage.pFlags.out;\n        const fromId = updateMessage.from_id || (isOut ? rootScope.myId : updateMessage.user_id);\n        const toId = updateMessage.chat_id\n          ? -updateMessage.chat_id\n          : (updateMessage.user_id || rootScope.myId);\n  \n        this.processUpdate({\n          _: 'updateNewMessage',\n          message: {\n            _: 'message',\n            pFlags: updateMessage.pFlags,\n            id: updateMessage.id,\n            from_id: appPeersManager.getOutputPeer(fromId),\n            peer_id: appPeersManager.getOutputPeer(toId),\n            date: updateMessage.date,\n            message: updateMessage.message,\n            fwd_from: updateMessage.fwd_from,\n            reply_to: updateMessage.reply_to,\n            entities: updateMessage.entities\n          },\n          pts: updateMessage.pts,\n          pts_count: updateMessage.pts_count\n        }, processOpts);\n        break;\n      }\n  \n      case 'updatesCombined':\n      case 'updates':\n        appUsersManager.saveApiUsers(updateMessage.users, options.override);\n        appChatsManager.saveApiChats(updateMessage.chats, options.override);\n  \n        updateMessage.updates.forEach((update: Update) => {\n          this.processUpdate(update, processOpts);\n        });\n        break;\n  \n      default:\n        this.log.warn('Unknown update message', updateMessage);\n    }\n  };\n  \n  private getDifference(first = false): Promise<void> {\n    // this.trace('Get full diff')\n    const updatesState = this.updatesState;\n    let wasSyncing = updatesState.syncLoading;\n    if(!wasSyncing) {\n      updatesState.pendingSeqUpdates = {};\n      updatesState.pendingPtsUpdates = [];\n    }\n  \n    if(updatesState.syncPending) {\n      clearTimeout(updatesState.syncPending.timeout);\n      updatesState.syncPending = null;\n    }\n\n    const promise = apiManager.invokeApi('updates.getDifference', {\n      pts: updatesState.pts, \n      pts_total_limit: first /* && false  */? /* 50 */1200 : undefined,\n      date: updatesState.date, \n      qts: -1\n    }, {\n      timeout: 0x7fffffff\n    }).then((differenceResult) => {\n      this.debug && this.log.debug('Get diff result', differenceResult);\n\n      if(differenceResult._ === 'updates.differenceEmpty') {\n        this.debug && this.log.debug('apply empty diff', differenceResult.seq);\n        updatesState.date = differenceResult.date;\n        updatesState.seq = differenceResult.seq;\n        return;\n      }\n\n      // ! SORRY I'M SORRY I'M SORRY\n      if(first) {\n        rootScope.dispatchEvent('state_synchronizing');\n      }\n\n      if(differenceResult._ !== 'updates.differenceTooLong') {\n        appUsersManager.saveApiUsers(differenceResult.users);\n        appChatsManager.saveApiChats(differenceResult.chats);\n\n        // Should be first because of updateMessageID\n        // this.log('applying', differenceResult.other_updates.length, 'other updates')\n    \n        differenceResult.other_updates.forEach((update) => {\n          switch(update._) {\n            case 'updateChannelTooLong':\n            case 'updateNewChannelMessage':\n            case 'updateEditChannelMessage':\n              this.processUpdate(update);\n              return;\n          }\n          \n          this.saveUpdate(update);\n        });\n\n        // this.log('applying', differenceResult.new_messages.length, 'new messages')\n        differenceResult.new_messages.forEach((apiMessage) => {\n          this.saveUpdate({\n            _: 'updateNewMessage',\n            message: apiMessage,\n            pts: updatesState.pts,\n            pts_count: 0\n          });\n        });\n\n        const nextState = differenceResult._ === 'updates.difference' ? differenceResult.state : differenceResult.intermediate_state;\n        updatesState.seq = nextState.seq;\n        updatesState.pts = nextState.pts;\n        updatesState.date = nextState.date;\n      } else {\n        updatesState.pts = differenceResult.pts;\n        updatesState.date = (Date.now() / 1000 | 0) + serverTimeManager.serverTimeOffset;\n        delete updatesState.seq;\n        \n        this.channelStates = {};\n        \n        this.log.warn('getDifference:', differenceResult._);\n        rootScope.dispatchEvent('state_cleared');\n      }\n  \n      // this.log('apply diff', updatesState.seq, updatesState.pts)\n  \n      if(differenceResult._ === 'updates.differenceSlice') {\n        return this.getDifference();\n      } else {\n        this.debug && this.log.debug('finished get diff');\n      }\n    });\n\n    if(!wasSyncing) {\n      this.justAName(updatesState, promise);\n    }\n  \n    return promise;\n  }\n\n  private getChannelDifference(channelId: number): Promise<void> {\n    const channelState = this.getChannelState(channelId);\n    const wasSyncing = channelState.syncLoading;\n    if(!wasSyncing) {\n      channelState.pendingPtsUpdates = [];\n    }\n\n    if(channelState.syncPending) {\n      clearTimeout(channelState.syncPending.timeout);\n      channelState.syncPending = null;\n    }\n\n    //this.log.trace('Get channel diff', appChatsManager.getChat(channelId), channelState.pts);\n    const promise = apiManager.invokeApi('updates.getChannelDifference', {\n      channel: appChatsManager.getChannelInput(channelId),\n      filter: {_: 'channelMessagesFilterEmpty'},\n      pts: channelState.pts,\n      limit: 30\n    }, {timeout: 0x7fffffff}).then((differenceResult) => {\n      this.debug && this.log.debug('Get channel diff result', differenceResult)\n      channelState.pts = 'pts' in differenceResult ? differenceResult.pts : undefined;\n  \n      if(differenceResult._ === 'updates.channelDifferenceEmpty') {\n        this.debug && this.log.debug('apply channel empty diff', differenceResult);\n        return;\n      }\n  \n      if(differenceResult._ === 'updates.channelDifferenceTooLong') {\n        this.debug && this.log.debug('channel diff too long', differenceResult);\n        delete this.channelStates[channelId];\n\n        this.saveUpdate({_: 'updateChannelReload', channel_id: channelId});\n        return;\n      }\n  \n      appUsersManager.saveApiUsers(differenceResult.users);\n      appChatsManager.saveApiChats(differenceResult.chats);\n  \n      // Should be first because of updateMessageID\n      this.debug && this.log.debug('applying', differenceResult.other_updates.length, 'channel other updates');\n      differenceResult.other_updates.forEach((update) => {\n        this.saveUpdate(update);\n      });\n  \n      this.debug && this.log.debug('applying', differenceResult.new_messages.length, 'channel new messages');\n      differenceResult.new_messages.forEach((apiMessage) => {\n        this.saveUpdate({\n          _: 'updateNewChannelMessage',\n          message: apiMessage,\n          pts: channelState.pts,\n          pts_count: 0\n        });\n      });\n  \n      this.debug && this.log.debug('apply channel diff', channelState.pts);\n  \n      if(differenceResult._ === 'updates.channelDifference' &&\n        !differenceResult.pFlags['final']) {\n        return this.getChannelDifference(channelId);\n      } else {\n        this.debug && this.log.debug('finished channel get diff');\n      }\n    });\n\n    if(!wasSyncing) {\n      this.justAName(channelState, promise, channelId);\n    }\n\n    return promise;\n  }\n\n  private justAName(state: UpdatesState, promise: UpdatesState['syncLoading'], channelId?: number) {\n    state.syncLoading = promise;\n    rootScope.dispatchEvent('state_synchronizing', channelId);\n\n    promise.then(() => {\n      state.syncLoading = null;\n      rootScope.dispatchEvent('state_synchronized', channelId);\n    }, () => {\n      state.syncLoading = null;\n    });\n  }\n  \n  public addChannelState(channelId: number, pts: number) {\n    if(!pts) {\n      throw new Error('Add channel state without pts ' + channelId);\n    }\n\n    if(!(channelId in this.channelStates)) {\n      this.channelStates[channelId] = {\n        pts,\n        pendingPtsUpdates: [],\n        syncPending: null,\n        syncLoading: null\n      };\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public getChannelState(channelId: number, pts?: number) {\n    if(this.channelStates[channelId] === undefined) {\n      this.addChannelState(channelId, pts);\n    }\n\n    return this.channelStates[channelId];\n  }\n\n  private processUpdate(update: Update, options: Partial<{\n    date: number,\n    seq: number,\n    seqStart: number/* ,\n    ignoreSyncLoading: boolean */\n  }> = {}) {\n    let channelId = 0;\n    switch(update._) {\n      case 'updateNewChannelMessage':\n      case 'updateEditChannelMessage':\n        channelId = -appPeersManager.getPeerId(update.message.peer_id);\n        break;\n      /* case 'updateDeleteChannelMessages':\n        channelId = update.channel_id;\n        break; */\n      case 'updateChannelTooLong':\n        channelId = update.channel_id;\n        if(!(channelId in this.channelStates)) {\n          return false;\n        }\n        break;\n      default:\n        if('channel_id' in update && 'pts' in update) {\n          channelId = update.channel_id;\n        }\n        break;\n    }\n  \n    const {pts, pts_count} = update as Update.updateNewMessage;\n    const curState = channelId ? this.getChannelState(channelId, pts) : this.updatesState;\n  \n    // this.log.log('process', channelId, curState.pts, update)\n  \n    if(curState.syncLoading/*  && !options.ignoreSyncLoading */) {\n      return false;\n    }\n  \n    if(update._ === 'updateChannelTooLong') {\n      if(!curState.lastPtsUpdateTime ||\n          curState.lastPtsUpdateTime < (Date.now() - SYNC_DELAY)) {\n        // this.log.trace('channel too long, get diff', channelId, update)\n        this.getChannelDifference(channelId);\n      }\n      return false;\n    }\n  \n    if(update._ === 'updateNewMessage' ||\n        update._ === 'updateEditMessage' ||\n        update._ === 'updateNewChannelMessage' ||\n        update._ === 'updateEditChannelMessage') {\n      const message = update.message as Message.message;\n      const toPeerId = appPeersManager.getPeerId(message.peer_id);\n      const fwdHeader: MessageFwdHeader.messageFwdHeader = message.fwd_from || {} as any;\n      let reason: string;\n      if(message.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(message.from_id), message.pFlags.post/* || channelId*/) && (reason = 'author') ||\n          fwdHeader.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(fwdHeader.from_id), !!(fwdHeader.from_id as Peer.peerChannel).channel_id) && (reason = 'fwdAuthor') ||\n          (fwdHeader.from_id as Peer.peerChannel)?.channel_id && !appChatsManager.hasChat((fwdHeader.from_id as Peer.peerChannel).channel_id, true) && (reason = 'fwdChannel') ||\n          toPeerId > 0 && !appUsersManager.hasUser(toPeerId) && (reason = 'toPeer User') ||\n          toPeerId < 0 && !appChatsManager.hasChat(-toPeerId) && (reason = 'toPeer Chat')) {\n        this.log.warn('Not enough data for message update', toPeerId, reason, message);\n        if(channelId && appChatsManager.hasChat(channelId)) {\n          this.getChannelDifference(channelId);\n        } else {\n          this.forceGetDifference();\n        }\n        return false;\n      }\n    } else if(channelId && !appChatsManager.hasChat(channelId)) {\n      // this.log.log('skip update, missing channel', channelId, update)\n      return false;\n    }\n  \n    let popPts: boolean;\n    let popSeq: boolean;\n  \n    if(pts) {\n      const newPts = curState.pts + (pts_count || 0);\n      if(newPts < pts) {\n        this.debug && this.log.warn('Pts hole', curState, update, channelId && appChatsManager.getChat(channelId));\n        curState.pendingPtsUpdates.push(update as Update.updateNewMessage);\n        if(!curState.syncPending && !curState.syncLoading) {\n          curState.syncPending = {\n            timeout: window.setTimeout(() => {\n              curState.syncPending = null;\n\n              if(curState.syncLoading) {\n                return;\n              }\n\n              if(channelId) {\n                this.getChannelDifference(channelId);\n              } else {\n                this.getDifference();\n              }\n            }, SYNC_DELAY)\n          };\n        }\n\n        curState.syncPending.ptsAwaiting = true;\n        return false;\n      }\n\n      if(pts > curState.pts) {\n        curState.pts = pts;\n        popPts = true;\n  \n        curState.lastPtsUpdateTime = Date.now();\n      } else if(pts_count) {\n        // this.log.warn('Duplicate update', update)\n        return false;\n      }\n\n      if(channelId && options.date && this.updatesState.date < options.date) {\n        this.updatesState.date = options.date;\n      }\n    } else if(!channelId && options.seq > 0) {\n      const seq = options.seq;\n      const seqStart = options.seqStart || seq;\n  \n      if(seqStart !== curState.seq + 1) {\n        if(seqStart > curState.seq) {\n          this.debug && this.log.warn('Seq hole', curState, curState.syncPending && curState.syncPending.seqAwaiting);\n  \n          if(curState.pendingSeqUpdates[seqStart] === undefined) {\n            curState.pendingSeqUpdates[seqStart] = {seq, date: options.date, updates: []};\n          }\n          curState.pendingSeqUpdates[seqStart].updates.push(update);\n  \n          if(!curState.syncPending) {\n            curState.syncPending = {\n              timeout: window.setTimeout(() => {\n                curState.syncPending = null;\n\n                if(curState.syncLoading) {\n                  return;\n                }\n\n                this.getDifference();\n              }, SYNC_DELAY)\n            };\n          }\n\n          if(!curState.syncPending.seqAwaiting ||\n            curState.syncPending.seqAwaiting < seqStart) {\n            curState.syncPending.seqAwaiting = seqStart;\n          }\n          return false;\n        }\n      }\n  \n      if(curState.seq !== seq) {\n        curState.seq = seq;\n        if(options.date && curState.date < options.date) {\n          curState.date = options.date;\n        }\n\n        popSeq = true;\n      }\n    }\n  \n    this.saveUpdate(update);\n  \n    if(popPts) {\n      this.popPendingPtsUpdate(channelId);\n    } else if(popSeq) {\n      this.popPendingSeqUpdate();\n    }\n  }\n\n  public saveUpdate(update: Update) {\n    //this.debug && this.log('saveUpdate', update);\n    rootScope.dispatchEvent(update._, update as any);\n  }\n  \n  public attach() {\n    if(this.attached) return;\n\n    //return;\n\n    this.log('attach');\n    \n    this.attached = true;\n\n    appStateManager.getState().then(_state => {\n      const state = _state.updates;\n\n      //rootScope.broadcast('state_synchronizing');\n      if(!state || !state.pts || !state.date || !state.seq) {\n        this.log('will get new state');\n\n        this.updatesState.syncLoading = new Promise((resolve) => {\n          apiManager.invokeApi('updates.getState', {}, {noErrorBox: true}).then((stateResult) => {\n            this.updatesState.seq = stateResult.seq;\n            this.updatesState.pts = stateResult.pts;\n            this.updatesState.date = stateResult.date;\n            this.saveUpdatesState();\n            //setTimeout(() => {\n              this.updatesState.syncLoading = null;\n              resolve();\n              //rootScope.broadcast('state_synchronized');\n            //}, 1000);\n        \n          // ! for testing\n          // updatesState.seq = 1\n          // updatesState.pts = stateResult.pts - 5000\n          // updatesState.date = 1\n          // getDifference()\n          });\n        });\n      } else {\n        // ! for testing\n        /* state.seq = 1;\n        state.pts = state.pts - 15;\n        state.date = 1; */\n        // state.pts -= 100;\n\n        Object.assign(this.updatesState, state);\n        \n        this.log('will get difference', Object.assign({}, state));\n        \n        this.getDifference(true)/* .finally(() => {\n          if(this.updatesState.syncLoading) {\n            rootScope.broadcast('state_synchronizing');\n          }\n        }) */;\n      }\n\n      apiManager.setUpdatesProcessor(this.processUpdateMessage);\n\n      // this.updatesState.syncLoading.then(() => {\n        this.setProxy();\n      // });\n    });\n  }\n}\n\nconst apiUpdatesManager = new ApiUpdatesManager();\nMOUNT_CLASS_TO.apiUpdatesManager = apiUpdatesManager;\nexport default apiUpdatesManager\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MessageEntity } from \"../../layer\";\r\n\r\nexport type MarkdownType = 'bold' | 'italic' | 'underline' | 'strikethrough' | 'monospace' | 'link' | 'mentionName';\r\nexport type MarkdownTag = {\r\n  match: string,\r\n  entityName: 'messageEntityBold' | 'messageEntityUnderline' | 'messageEntityItalic' | 'messageEntityPre' | 'messageEntityStrike' | 'messageEntityTextUrl' | 'messageEntityMentionName';\r\n};\r\nexport const markdownTags: {[type in MarkdownType]: MarkdownTag} = {\r\n  bold: {\r\n    match: '[style*=\"font-weight\"], b',\r\n    entityName: 'messageEntityBold'\r\n  },\r\n  underline: {\r\n    match: '[style*=\"underline\"], u',\r\n    entityName: 'messageEntityUnderline'\r\n  },\r\n  italic: {\r\n    match: '[style*=\"italic\"], i',\r\n    entityName: 'messageEntityItalic'\r\n  },\r\n  monospace: {\r\n    match: '[style*=\"monospace\"], [face=\"monospace\"]',\r\n    entityName: 'messageEntityPre'\r\n  },\r\n  strikethrough: {\r\n    match: '[style*=\"line-through\"], strike',\r\n    entityName: 'messageEntityStrike'\r\n  },\r\n  link: {\r\n    match: 'A:not(.follow)',\r\n    entityName: 'messageEntityTextUrl'\r\n  },\r\n  mentionName: {\r\n    match: 'A.follow',\r\n    entityName: 'messageEntityMentionName'\r\n  }\r\n};\r\n\r\nexport default function getRichElementValue(node: HTMLElement, lines: string[], line: string[], selNode?: Node, selOffset?: number, entities?: MessageEntity[], offset = {offset: 0}) {\r\n  if(node.nodeType === 3) { // TEXT\r\n    const nodeValue = node.nodeValue;\r\n\r\n    if(selNode === node) {\r\n      line.push(nodeValue.substr(0, selOffset) + '\\x01' + nodeValue.substr(selOffset));\r\n    } else {\r\n      line.push(nodeValue);\r\n    }\r\n\r\n    if(entities && nodeValue.trim()) {\r\n      if(node.parentNode) {\r\n        const parentElement = node.parentElement;\r\n        \r\n        for(const type in markdownTags) {\r\n          const tag = markdownTags[type as MarkdownType];\r\n          const closest = parentElement.closest(tag.match + ', [contenteditable]');\r\n          if(closest && closest.getAttribute('contenteditable') === null) {\r\n            if(tag.entityName === 'messageEntityTextUrl') {\r\n              entities.push({\r\n                _: tag.entityName,\r\n                url: (parentElement as HTMLAnchorElement).href,\r\n                offset: offset.offset,\r\n                length: nodeValue.length\r\n              });\r\n            } else if(tag.entityName === 'messageEntityMentionName') {\r\n              entities.push({\r\n                _: tag.entityName,\r\n                offset: offset.offset,\r\n                length: nodeValue.length,\r\n                user_id: +parentElement.dataset.follow\r\n              });\r\n            } else {\r\n              entities.push({\r\n                _: tag.entityName as any,\r\n                offset: offset.offset,\r\n                length: nodeValue.length\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    offset.offset += nodeValue.length;\r\n\r\n    return;\r\n  }\r\n\r\n  if(node.nodeType !== 1) { // NON-ELEMENT\r\n    return;\r\n  }\r\n\r\n  const isSelected = (selNode === node);\r\n  const isBlock = node.tagName === 'DIV' || node.tagName === 'P';\r\n  if(isBlock && line.length || node.tagName === 'BR') {\r\n    lines.push(line.join(''));\r\n    line.splice(0, line.length);\r\n  } else if(node.tagName === 'IMG') {\r\n    const alt = (node as HTMLImageElement).alt;\r\n    if(alt) {\r\n      line.push(alt);\r\n      offset.offset += alt.length;\r\n    }\r\n  }\r\n\r\n  if(isSelected && !selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  let curChild = node.firstChild as HTMLElement;\r\n  while(curChild) {\r\n    getRichElementValue(curChild, lines, line, selNode, selOffset, entities, offset);\r\n    curChild = curChild.nextSibling as any;\r\n  }\r\n\r\n  if(isSelected && selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  if(isBlock && line.length) {\r\n    lines.push(line.join(''));\r\n    line.splice(0, line.length);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function findUpAttribute(el: any, attribute: string): HTMLElement {\r\n  return el.closest(`[${attribute}]`);\r\n  /* if(el.getAttribute(attribute) !== null) return el; // 03.02.2020\r\n\r\n  while(el.parentElement) {\r\n    el = el.parentElement;\r\n    if(el.getAttribute(attribute) !== null) \r\n      return el;\r\n  }\r\n  return null; */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport getRichValue from \"./getRichValue\";\r\n\r\nexport default function isInputEmpty(element: HTMLElement) {\r\n  if(element.hasAttribute('contenteditable') || element.tagName !== 'INPUT') {\r\n    /* const value = element.innerText;\r\n\r\n    return !value.trim() && !serializeNodes(Array.from(element.childNodes)).trim(); */\r\n    return !getRichValue(element, false).value.trim();\r\n  } else {\r\n    return !(element as HTMLInputElement).value.trim();\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { AccountPassword, AccountUpdatePasswordSettings, InputCheckPasswordSRP, PasswordKdfAlgo } from '../../layer';\r\nimport { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport appUsersManager from '../appManagers/appUsersManager';\r\nimport apiManager from './mtprotoworker';\r\n\r\nexport class PasswordManager {\r\n  public getState(): Promise<AccountPassword> {\r\n    return apiManager.invokeApi('account.getPassword').then((result) => {\r\n      return result;\r\n    });\r\n  }\r\n\r\n  public updateSettings(settings: {\r\n    hint?: string,\r\n    email?: string,\r\n    newPassword?: string,\r\n    currentPassword?: string\r\n  } = {}) {\r\n    //state = Object.assign({}, state);\r\n    //state.new_algo = Object.assign({}, state.new_algo);\r\n\r\n    return this.getState().then(state => {\r\n      let currentHashPromise: Promise<InputCheckPasswordSRP>;\r\n      let newHashPromise: Promise<Uint8Array>;\r\n      const params: AccountUpdatePasswordSettings = {\r\n        password: null,\r\n        new_settings: {\r\n          _: 'account.passwordInputSettings',\r\n          hint: settings.hint,\r\n          email: settings.email\r\n        }\r\n      };\r\n  \r\n      if(settings.currentPassword) {\r\n        currentHashPromise = apiManager.invokeCrypto('computeSRP', settings.currentPassword, state, false) as any;\r\n      } else {\r\n        currentHashPromise = Promise.resolve({\r\n          _: 'inputCheckPasswordEmpty'\r\n        });\r\n      }\r\n  \r\n      // * https://core.telegram.org/api/srp#setting-a-new-2fa-password, but still there is a mistake, TDesktop passes 'new_algo' everytime\r\n      const newAlgo = state.new_algo as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\r\n      const salt1 = new Uint8Array(newAlgo.salt1.length + 32);\r\n      salt1.randomize();\r\n      salt1.set(newAlgo.salt1, 0);\r\n      newAlgo.salt1 = salt1;\r\n  \r\n      if(settings.newPassword) {\r\n        newHashPromise = apiManager.invokeCrypto('computeSRP', settings.newPassword, state, true) as any;\r\n      } else {\r\n        newHashPromise = Promise.resolve(new Uint8Array());\r\n      }\r\n  \r\n      return Promise.all([currentHashPromise, newHashPromise]).then((hashes) => {\r\n        params.password = hashes[0];\r\n        params.new_settings.new_algo = newAlgo;\r\n        params.new_settings.new_password_hash = hashes[1];\r\n  \r\n        return apiManager.invokeApi('account.updatePasswordSettings', params);\r\n      });\r\n    });\r\n  }\r\n\r\n  public check(password: string, state: AccountPassword, options: any = {}) {\r\n    return apiManager.invokeCrypto('computeSRP', password, state, false).then((inputCheckPassword) => {\r\n      //console.log('SRP', inputCheckPassword);\r\n      return apiManager.invokeApi('auth.checkPassword', {\r\n        password: inputCheckPassword as InputCheckPasswordSRP.inputCheckPasswordSRP\r\n      }, options).then(auth => {\r\n        if(auth._ === 'auth.authorization') {\r\n          appUsersManager.saveApiUser(auth.user);\r\n          apiManager.setUserAuth(auth.user.id);\r\n        }\r\n\r\n        return auth;\r\n      });\r\n    });\r\n  }\r\n\r\n  public confirmPasswordEmail(code: string) {\r\n    return apiManager.invokeApi('account.confirmPasswordEmail', {code});\r\n  }\r\n\r\n  public resendPasswordEmail() {\r\n    return apiManager.invokeApi('account.resendPasswordEmail');\r\n  }\r\n\r\n  public cancelPasswordEmail() {\r\n    return apiManager.invokeApi('account.cancelPasswordEmail');\r\n  }\r\n\r\n  /* public requestRecovery(options: any = {}) {\r\n    return apiManager.invokeApi('auth.requestPasswordRecovery', {}, options);\r\n  }\r\n\r\n  public recover(code: any, options: any = {}) {\r\n    return apiManager.invokeApi('auth.recoverPassword', {\r\n      code\r\n    }, options);\r\n  } */\r\n}\r\n\r\nconst passwordManager = new PasswordManager();\r\nMOUNT_CLASS_TO.passwordManager = passwordManager;\r\nexport default passwordManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { LangPackKey, i18n } from \"../lib/langPack\";\r\n\r\nexport default class LoginPage {\r\n  public element: HTMLElement;\r\n  public container: HTMLElement;\r\n  public imageDiv: HTMLElement;\r\n  public inputWrapper: HTMLElement;\r\n  public title: HTMLElement;\r\n  public subtitle: HTMLParagraphElement;\r\n\r\n  constructor(options: {\r\n    className: string,\r\n    withInputWrapper?: boolean,\r\n    titleLangKey?: LangPackKey,\r\n    subtitleLangKey?: LangPackKey,\r\n  }) {\r\n    this.element = document.body.querySelector('.' + options.className) as HTMLDivElement;\r\n    //this.element = document.createElement('div');\r\n    //this.element.className = 'page-' + options.className;\r\n\r\n    this.container = document.createElement('div');\r\n    this.container.className = 'container center-align';\r\n\r\n    this.imageDiv = document.createElement('div');\r\n    this.imageDiv.className = 'auth-image';\r\n\r\n    this.title = document.createElement('h4');\r\n    if(options.titleLangKey) {\r\n      this.title.append(i18n(options.titleLangKey));\r\n    }\r\n\r\n    this.subtitle = document.createElement('p');\r\n    this.subtitle.className = 'subtitle';\r\n    if(options.subtitleLangKey) {\r\n      this.subtitle.append(i18n(options.subtitleLangKey));\r\n    }\r\n    \r\n    this.container.append(this.imageDiv, this.title, this.subtitle);\r\n\r\n    if(options.withInputWrapper) {\r\n      this.inputWrapper = document.createElement('div');\r\n      this.inputWrapper.className = 'input-wrapper';\r\n      this.container.append(this.inputWrapper);\r\n    }\r\n\r\n    this.element.append(this.container);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { cancelEvent } from \"../helpers/dom/cancelEvent\";\r\nimport InputField, { InputFieldOptions } from \"./inputField\";\r\n\r\nexport default class PasswordInputField extends InputField {\r\n  public passwordVisible = false;\r\n  public toggleVisible: HTMLElement;\r\n  public onVisibilityClickAdditional: () => void;\r\n\r\n  constructor(options: InputFieldOptions = {}) {\r\n    super({\r\n      plainText: true,\r\n      ...options\r\n    });\r\n\r\n    const input = this.input as HTMLInputElement;\r\n    input.type = 'password';\r\n    input.setAttribute('required', '');\r\n    input.autocomplete = 'off';\r\n    /* input.readOnly = true;\r\n\r\n    input.addEventListener('focus', () => {\r\n      input.removeAttribute('readonly');\r\n    }, {once: true}); */\r\n\r\n    // * https://stackoverflow.com/a/35949954/6758968\r\n    const stealthy = document.createElement('input');\r\n    stealthy.classList.add('stealthy');\r\n    stealthy.tabIndex = -1;\r\n    stealthy.type = 'password';\r\n    input.parentElement.prepend(stealthy);\r\n    input.parentElement.insertBefore(stealthy.cloneNode(), input.nextSibling);\r\n\r\n    const toggleVisible = this.toggleVisible = document.createElement('span');\r\n    toggleVisible.classList.add('toggle-visible', 'tgico');\r\n\r\n    this.container.classList.add('input-field-password');\r\n    this.container.append(toggleVisible);\r\n\r\n    toggleVisible.addEventListener('click', this.onVisibilityClick);\r\n    toggleVisible.addEventListener('touchend', this.onVisibilityClick);\r\n  }\r\n\r\n  public onVisibilityClick = (e: Event) => {\r\n    cancelEvent(e);\r\n    this.passwordVisible = !this.passwordVisible;\r\n\r\n    this.toggleVisible.classList.toggle('eye-hidden', this.passwordVisible);\r\n    (this.input as HTMLInputElement).type = this.passwordVisible ? 'text' : 'password';\r\n    this.onVisibilityClickAdditional && this.onVisibilityClickAdditional();\r\n  };\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { processSearchText, ProcessSearchTextOptions } from '../helpers/cleanSearchText';\n\nexport default class SearchIndex<SearchWhat> {\n  private fullTexts: Map<SearchWhat, string> = new Map();\n\n  // minChars can be 0 because it requires at least one word (one symbol) to be found\n  constructor(private options?: ProcessSearchTextOptions, private minChars = 0) {\n  }\n\n  public indexObject(id: SearchWhat, searchText: string) {\n    /* if(searchIndex.fullTexts.hasOwnProperty(id)) {\n      return false;\n    } */\n\n    if(this.options && searchText.trim()) {\n      searchText = processSearchText(searchText, this.options);\n    }\n\n    if(!searchText) {\n      this.fullTexts.delete(id);\n      return false;\n    }\n\n    this.fullTexts.set(id, searchText);\n    \n    /* const shortIndexes = searchIndex.shortIndexes;\n    searchText.split(' ').forEach((searchWord) => {\n      let len = Math.min(searchWord.length, 3),\n        wordPart, i;\n      for(i = 1; i <= len; i++) {\n        wordPart = searchWord.substr(0, i);\n        if(shortIndexes[wordPart] === undefined) {\n          shortIndexes[wordPart] = [id];\n        } else {\n          shortIndexes[wordPart].push(id);\n        }\n      }\n    }); */\n  }\n\n  public search(query: string) {\n    const fullTexts = this.fullTexts;\n    //const shortIndexes = searchIndex.shortIndexes;\n\n    if(this.options) {\n      query = processSearchText(query, this.options);\n    }\n\n    const newFoundObjs: Array<{fullText: string, fullTextLength: number, what: SearchWhat, foundChars: number}> = [];\n    const queryWords = query.split(' ');\n    const queryWordsLength = queryWords.length;\n    fullTexts.forEach((fullText, what) => {\n      let found = true;\n      let foundChars = 0;\n      for(let i = 0; i < queryWordsLength; ++i) { // * verify that all words are found\n        const word = queryWords[i];\n        const idx = fullText.indexOf(word);\n        if(idx === -1 || (idx !== 0 && fullText[idx - 1] !== ' ')) { // * search only from word beginning\n          found = false;\n          break;\n        }\n\n        foundChars += word.length;\n      }\n\n      if(found) {\n        foundChars += queryWordsLength - 1;\n        const fullTextLength = fullText.length;\n        if(this.minChars <= foundChars || fullTextLength <= foundChars) {\n          newFoundObjs.push({fullText, fullTextLength, what, foundChars});\n        }\n      }\n    });\n\n    newFoundObjs.sort((a, b) => a.fullTextLength - b.fullTextLength || b.foundChars - a.foundChars);\n\n    //newFoundObjs.sort((a, b) => a.fullText.localeCompare(b.fullText));\n    const newFoundObjs2: Set<SearchWhat> = new Set(newFoundObjs.map(o => o.what));\n\n    /* const queryWords = query.split(' ');\n    let foundArr: number[];\n    for(let i = 0; i < queryWords.length; i++) {\n      const newFound = shortIndexes[queryWords[i].substr(0, 3)];\n      if(!newFound) {\n        foundArr = [];\n        break;\n      }\n      \n      if(foundArr === undefined || foundArr.length > newFound.length) {\n        foundArr = newFound;\n      }\n    }\n\n    for(let j = 0; j < foundArr.length; j++) {\n      let found = true;\n      let searchText = fullTexts[foundArr[j]];\n      for(let i = 0; i < queryWords.length; i++) {\n        if(searchText.indexOf(queryWords[i]) === -1) {\n          found = false;\n          break;\n        }\n      }\n\n      if(found) {\n        newFoundObjs[foundArr[j]] = true;\n      }\n    } */\n\n    return newFoundObjs2;\n  }\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport lottieLoader, { RLottiePlayer } from \"../../lib/lottieLoader\";\r\nimport PasswordInputField from \"../passwordInputField\";\r\n\r\nexport default class PasswordMonkey {\r\n  public container: HTMLElement;\r\n  public animation: RLottiePlayer;\r\n  public needFrame = 0;\r\n  protected loadPromise: Promise<void>;\r\n\r\n  constructor(protected passwordInputField: PasswordInputField, protected size: number) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('media-sticker-wrapper');\r\n  }\r\n\r\n  public load() {\r\n    if(this.loadPromise) return this.loadPromise;\r\n    return this.loadPromise = lottieLoader.loadAnimationFromURL({\r\n      container: this.container,\r\n      loop: false,\r\n      autoplay: false,\r\n      width: this.size,\r\n      height: this.size,\r\n      noCache: true\r\n    //}, 'assets/img/TwoFactorSetupMonkeyClose.tgs').then(_animation => {\r\n    }, 'assets/img/TwoFactorSetupMonkeyPeek.tgs').then(_animation => {\r\n      //return;\r\n      this.animation = _animation;\r\n      this.animation.addEventListener('enterFrame', currentFrame => {\r\n        //console.log('enterFrame', currentFrame, this.needFrame);\r\n\r\n        if((this.animation.direction === 1 && currentFrame >= this.needFrame) ||\r\n          (this.animation.direction === -1 && currentFrame <= this.needFrame)) {\r\n            this.animation.setSpeed(1);\r\n            this.animation.pause();\r\n        } \r\n      });\r\n\r\n      this.passwordInputField.onVisibilityClickAdditional = () => {\r\n        if(this.passwordInputField.passwordVisible) {\r\n          this.animation.setDirection(1);\r\n          this.animation.curFrame = 0;\r\n          this.needFrame = 16;\r\n          this.animation.play();\r\n        } else {\r\n          this.animation.setDirection(-1);\r\n          this.animation.curFrame = 16;\r\n          this.needFrame = 0;\r\n          this.animation.play();\r\n        }\r\n      };\r\n\r\n      return lottieLoader.waitForFirstFrame(_animation);\r\n    });\r\n  }\r\n\r\n  public remove() {\r\n    if(this.animation) {\r\n      this.animation.remove();\r\n    }\r\n  }\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport Config from \"../lib/config\";\n\nconst badCharsRe = /[`~!@#$%^&*()\\-_=+\\[\\]\\\\|{}'\";:\\/?.>,<]+/g;\nconst trimRe = /^\\s+|\\s$/g;\n\nexport function clearBadCharsAndTrim(text: string) {\n  return text.replace(badCharsRe, '').replace(trimRe, '');\n}\n\nexport function latinizeString(text: string) {\n  return text.replace(/[^A-Za-z0-9]/g, (ch) => {\n    const latinizeCh = Config.LatinizeMap[ch];\n    return latinizeCh !== undefined ? latinizeCh : ch;\n  });\n}\n\nexport default function cleanSearchText(text: string, latinize = true) {\n  const hasTag = text.charAt(0) === '%';\n  text = clearBadCharsAndTrim(text);\n  if(latinize) text = latinizeString(text);\n  \n  text = text.toLowerCase();\n  if(hasTag) text = '%' + text;\n\n  return text;\n}\n\nexport type ProcessSearchTextOptions = Partial<{\n  clearBadChars: boolean,\n  latinize: boolean,\n  ignoreCase: boolean,\n  includeTag: boolean\n}>;\n\nexport function processSearchText(text: string, options: ProcessSearchTextOptions = {}) {\n  const hasTag = options.includeTag && text.charAt(0) === '%';\n  if(options.clearBadChars) text = clearBadCharsAndTrim(text);\n  if(options.latinize) text = latinizeString(text);\n  if(options.ignoreCase) text = text.toLowerCase();\n  if(hasTag) text = '%' + text;\n  return text;\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n/**\r\n * Legacy Webogram's format, don't change dcID to camelCase. date is timestamp\r\n */\r\nexport type UserAuth = {dcID: number | string, date: number, id: number};\r\n\r\nexport const REPLIES_PEER_ID = 1271266957;\r\n"],"sourceRoot":""}