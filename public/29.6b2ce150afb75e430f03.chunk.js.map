{"version":3,"sources":["webpack:///./src/pages/pageSignIn.ts"],"names":["btnQr","btnNext","page","countries","countriesList","filter","country","pFlags","hidden","sort","a","b","name","default_name","localeCompare","liMap","Map","lastCountrySelected","lastCountryCodeSelected","inputWrapper","document","createElement","classList","add","countryInputField","label","container","countryInput","input","autocomplete","selectWrapper","arrowDown","append","selectList","appendChild","initSelect","forEach","c","emoji","iso2","liArr","country_codes","countryCode","li","wrapped","wrapEmojiText","emojiSupported","spanEmoji","innerHTML","el","dataset","defaultName","span","innerText","country_code","push","set","addEventListener","e","button","target","selectCountryByTarget","childNodes","phoneCode","querySelector","find","telInputField","value","lastValue","hidePicker","setTimeout","telEl","focus","hideTimeout","get","style","display","clearTimeout","undefined","remove","offsetWidth","select","pageEl","parentElement","mouseDownHandlerAttached","onMouseDown","capture","removeEventListener","window","ctrlKey","key","_value","this","toLowerCase","matches","good","Boolean","str","indexOf","length","cancelBubble","preventDefault","blur","pasted","HTMLInputElement","type","inputMode","pixelRatio","devicePixelRatio","letterSpacing","setProperty","originalFunc","setValueSilently","bind","loadLottieWorkers","Math","abs","setLabel","formatted","leftPattern","replace","o","code","countryName","visibility","test","metaKey","shiftKey","onSubmit","signedCheckboxField","text","withRipple","checked","keepSigned","pushToState","toggleStorage","getState","then","state","storage","isAvailable","toggle","phone_number","invokeApi","api_id","id","api_hash","hash","settings","_","m","default","mount","Object","assign","catch","err","setError","console","error","h4","subtitle","nearestDcResult","langPack","getFromCache","getLangPack","lang_code","dcs","Set","done","this_dc","promise","nearest_dc","getNetworker","Promise","resolve","dcId","delete","_dcs","g","shift","dbKey","finally","removeAttribute"],"mappings":"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","file":"29.6b2ce150afb75e430f03.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { putPreloader } from \"../components/misc\";\r\nimport Scrollable from '../components/scrollable';\r\nimport appStateManager from \"../lib/appManagers/appStateManager\";\r\nimport apiManager from \"../lib/mtproto/mtprotoworker\";\r\nimport { RichTextProcessor } from '../lib/richtextprocessor';\r\nimport Page from \"./page\";\r\nimport InputField from \"../components/inputField\";\r\nimport CheckboxField from \"../components/checkboxField\";\r\nimport Button from \"../components/button\";\r\nimport { isAndroid, isApple, isAppleMobile } from \"../helpers/userAgent\";\r\nimport fastSmoothScroll from \"../helpers/fastSmoothScroll\";\r\nimport { isTouchSupported } from \"../helpers/touchSupport\";\r\nimport App from \"../config/app\";\r\nimport Modes from \"../config/modes\";\r\nimport I18n, { _i18n, i18n } from \"../lib/langPack\";\r\nimport lottieLoader from \"../lib/lottieLoader\";\r\nimport { ripple } from \"../components/ripple\";\r\nimport findUpTag from \"../helpers/dom/findUpTag\";\r\nimport findUpClassName from \"../helpers/dom/findUpClassName\";\r\nimport { randomLong } from \"../helpers/random\";\r\nimport AppStorage from \"../lib/storage\";\r\nimport CacheStorageController from \"../lib/cacheStorage\";\r\nimport pageSignQR from \"./pageSignQR\";\r\nimport getLanguageChangeButton from \"../components/languageChangeButton\";\r\nimport { cancelEvent } from \"../helpers/dom/cancelEvent\";\r\nimport { attachClickEvent } from \"../helpers/dom/clickEvent\";\r\nimport replaceContent from \"../helpers/dom/replaceContent\";\r\nimport toggleDisability from \"../helpers/dom/toggleDisability\";\r\nimport sessionStorage from \"../lib/sessionStorage\";\r\nimport { DcAuthKey } from \"../types\";\r\nimport placeCaretAtEnd from \"../helpers/dom/placeCaretAtEnd\";\r\nimport { formatPhoneNumber } from \"../helpers/formatPhoneNumber\";\r\nimport { HelpCountry, HelpCountryCode } from \"../layer\";\r\nimport { getCountryEmoji } from \"../vendor/emoji\";\r\nimport simulateEvent from \"../helpers/dom/dispatchEvent\";\r\nimport stateStorage from \"../lib/stateStorage\";\r\n\r\n//import _countries from '../countries_pretty.json';\r\nlet btnNext: HTMLButtonElement = null, btnQr: HTMLButtonElement;\r\n\r\nlet onFirstMount = () => {\r\n  /* if(Modes.test) {\r\n    Countries.push({\r\n      _: 'help.country',\r\n      default_name: 'Test Country',\r\n      country_codes: [{\r\n        _: 'help.countryCode',\r\n        country_code: '999 66',\r\n        patterns: ['999 66 XXX XX']\r\n      }],\r\n      iso2: 'KK'\r\n    });\r\n  \r\n    console.log('Added test country to list!');\r\n  } */\r\n\r\n  //const countries: Country[] = _countries.default.filter(c => c.emoji);\r\n  // const countries: Country[] = Countries.filter(c => c.emoji).sort((a, b) => a.name.localeCompare(b.name));\r\n  // const countries = I18n.countriesList.filter(country => !country.pFlags?.hidden);\r\n  const countries = I18n.countriesList\r\n  .filter(country => !country.pFlags?.hidden)\r\n  .sort((a, b) => (a.name || a.default_name).localeCompare(b.name || b.default_name));\r\n\r\n  const liMap: Map<string, HTMLLIElement[]> = new Map();\r\n\r\n  let lastCountrySelected: HelpCountry, lastCountryCodeSelected: HelpCountryCode;\r\n\r\n  const inputWrapper = document.createElement('div');\r\n  inputWrapper.classList.add('input-wrapper');\r\n\r\n  const countryInputField = new InputField({\r\n    label: 'Login.CountrySelectorLabel',\r\n    name: randomLong()\r\n  });\r\n\r\n  countryInputField.container.classList.add('input-select');\r\n\r\n  const countryInput = countryInputField.input as HTMLInputElement;\r\n  countryInput.autocomplete = randomLong();\r\n\r\n  const selectWrapper = document.createElement('div');\r\n  selectWrapper.classList.add('select-wrapper', 'z-depth-3', 'hide');\r\n\r\n  const arrowDown = document.createElement('span');\r\n  arrowDown.classList.add('arrow', 'arrow-down');\r\n  countryInputField.container.append(arrowDown);\r\n\r\n  const selectList = document.createElement('ul');\r\n  selectWrapper.appendChild(selectList);\r\n\r\n  const scroll = new Scrollable(selectWrapper);\r\n\r\n  let initSelect = () => {\r\n    initSelect = null;\r\n\r\n    countries.forEach((c) => {\r\n      const emoji = getCountryEmoji(c.iso2);\r\n\r\n      const liArr: Array<HTMLLIElement> = [];\r\n      c.country_codes.forEach((countryCode) => {\r\n        const li = document.createElement('li');\r\n\r\n        let wrapped = RichTextProcessor.wrapEmojiText(emoji);\r\n        if(RichTextProcessor.emojiSupported) {\r\n          const spanEmoji = document.createElement('span');\r\n          spanEmoji.innerHTML = wrapped;\r\n          li.append(spanEmoji);\r\n        } else {\r\n          li.innerHTML = wrapped;\r\n        }\r\n        \r\n        const el = i18n(c.default_name as any);\r\n        el.dataset.defaultName = c.default_name;\r\n        li.append(el);\r\n\r\n        const span = document.createElement('span');\r\n        span.classList.add('phone-code');\r\n        span.innerText = '+' + countryCode.country_code;\r\n        li.appendChild(span);\r\n\r\n        liArr.push(li);\r\n        selectList.append(li);\r\n      });\r\n\r\n      liMap.set(c.iso2, liArr);\r\n    });\r\n    \r\n    selectList.addEventListener('mousedown', (e) => {\r\n      if(e.button !== 0) { // other buttons but left shall not pass\r\n        return;\r\n      }\r\n      \r\n      const target = findUpTag(e.target, 'LI')\r\n      selectCountryByTarget(target);\r\n      //console.log('clicked', e, countryName, phoneCode);\r\n    });\r\n\r\n    countryInputField.container.appendChild(selectWrapper);\r\n  };\r\n\r\n  const selectCountryByTarget = (target: HTMLElement) => {\r\n    const defaultName = (target.childNodes[1] as HTMLElement).dataset.defaultName;\r\n    const phoneCode = target.querySelector<HTMLElement>('.phone-code').innerText;\r\n\r\n    replaceContent(countryInput, i18n(defaultName as any));\r\n    simulateEvent(countryInput, 'input');\r\n    lastCountrySelected = countries.find(c => c.default_name === defaultName);\r\n    \r\n    telInputField.value = lastValue = phoneCode;\r\n    hidePicker();\r\n    setTimeout(() => {\r\n      telEl.focus();\r\n      placeCaretAtEnd(telEl, true);\r\n    }, 0);\r\n  };\r\n  \r\n  initSelect();\r\n\r\n  let hideTimeout: number;\r\n\r\n  countryInput.addEventListener('focus', function(this: typeof countryInput, e) {\r\n    if(initSelect) {\r\n      initSelect();\r\n    } else {\r\n      countries.forEach((c) => {\r\n        liMap.get(c.iso2).forEach(li => li.style.display = '');\r\n      });\r\n    }\r\n\r\n    clearTimeout(hideTimeout);\r\n    hideTimeout = undefined;\r\n\r\n    selectWrapper.classList.remove('hide');\r\n    void selectWrapper.offsetWidth; // reflow\r\n    selectWrapper.classList.add('active');\r\n\r\n    countryInputField.select();\r\n\r\n    fastSmoothScroll(page.pageEl.parentElement.parentElement, countryInput, 'start', 4);\r\n\r\n    setTimeout(() => {\r\n      if(!mouseDownHandlerAttached) {\r\n        document.addEventListener('mousedown', onMouseDown, {capture: true});\r\n        mouseDownHandlerAttached = true;\r\n      }\r\n    }, 0);\r\n  });\r\n\r\n  let mouseDownHandlerAttached = false;\r\n  const onMouseDown = (e: MouseEvent) => {\r\n    if(findUpClassName(e.target, 'input-select')) {\r\n      return;\r\n    }\r\n    if(e.target === countryInput) {\r\n      return;\r\n    }\r\n\r\n    hidePicker();\r\n    document.removeEventListener('mousedown', onMouseDown, {capture: true});\r\n    mouseDownHandlerAttached = false;\r\n  };\r\n\r\n  const hidePicker = () => {\r\n    if(hideTimeout !== undefined) return;\r\n    selectWrapper.classList.remove('active');\r\n    hideTimeout = window.setTimeout(() => {\r\n      selectWrapper.classList.add('hide');\r\n      hideTimeout = undefined;\r\n    }, 200);\r\n  };\r\n  /* false && countryInput.addEventListener('blur', function(this: typeof countryInput, e) {\r\n    hidePicker();\r\n    \r\n    e.cancelBubble = true;\r\n  }, {capture: true}); */\r\n\r\n  countryInput.addEventListener('keyup', function(this: typeof countryInput, e) {\r\n    if(e.ctrlKey || e.key === 'Control') return false;\r\n\r\n    //let i = new RegExp('^' + this.value, 'i');\r\n    let _value = this.value.toLowerCase();\r\n    let matches: HelpCountry[] = [];\r\n    countries.forEach((c) => {\r\n      let good = !![c.name, c.default_name].filter(Boolean).find(str => str.toLowerCase().indexOf(_value) !== -1)/*  === 0 */;//i.test(c.name);\r\n\r\n      liMap.get(c.iso2).forEach(li => li.style.display = good ? '' : 'none');\r\n      if(good) matches.push(c);\r\n    });\r\n\r\n    // Код ниже автоматически выберет страну если она осталась одна при поиске\r\n    /* if(matches.length === 1 && matches[0].li.length === 1) {\r\n      if(matches[0].name === lastCountrySelected) return false;\r\n      //console.log('clicking', matches[0]);\r\n\r\n      var clickEvent = document.createEvent('MouseEvents');\r\n      clickEvent.initEvent('mousedown', true, true);\r\n      matches[0].li[0].dispatchEvent(clickEvent);\r\n      return false;\r\n    } else  */if(matches.length === 0) {\r\n      countries.forEach((c) => {\r\n        liMap.get(c.iso2).forEach(li => li.style.display = '');\r\n      });\r\n    } else if(matches.length === 1 && e.key === 'Enter') {\r\n      selectCountryByTarget(liMap.get(matches[0].iso2)[0]);\r\n    }\r\n  });\r\n\r\n  arrowDown.addEventListener('mousedown', function(this: typeof arrowDown, e) {\r\n    e.cancelBubble = true;\r\n    e.preventDefault();\r\n    if(countryInput.matches(':focus')) countryInput.blur();\r\n    else countryInput.focus();\r\n  });\r\n\r\n  let pasted = false;\r\n  let lastValue = '';\r\n  \r\n  const telInputField = new InputField({\r\n    label: 'Login.PhoneLabel',\r\n    //plainText: true,\r\n    name: 'phone'\r\n  });\r\n\r\n  telInputField.container.classList.add('input-field-phone');\r\n\r\n  let telEl = telInputField.input;\r\n  if(telEl instanceof HTMLInputElement) {\r\n    telEl.type = 'tel';\r\n    telEl.autocomplete = 'rr55RandomRR55';\r\n  } else {\r\n    telEl.inputMode = 'decimal';\r\n\r\n    const pixelRatio = window.devicePixelRatio;\r\n    if(pixelRatio > 1) {\r\n      let letterSpacing: number;\r\n      if(isApple) {\r\n        letterSpacing = pixelRatio * -.16;\r\n      } else if(isAndroid) {\r\n        letterSpacing = 0;\r\n      }\r\n\r\n      telEl.style.setProperty('--letter-spacing', letterSpacing + 'px');\r\n    }\r\n\r\n    const originalFunc = telInputField.setValueSilently.bind(telInputField);\r\n    telInputField.setValueSilently = (value) => {\r\n      originalFunc(value);\r\n      placeCaretAtEnd(telInputField.input, true);\r\n    };\r\n  }\r\n  \r\n  telEl.addEventListener('input', () => {\r\n    //console.log('input', this.value);\r\n    telEl.classList.remove('error');\r\n\r\n    lottieLoader.loadLottieWorkers();\r\n\r\n    const value = telInputField.value;\r\n    const diff = Math.abs(value.length - lastValue.length);\r\n    if(diff > 1 && !pasted && isAppleMobile) {\r\n      telInputField.setValueSilently(lastValue + value);\r\n    }\r\n\r\n    pasted = false;\r\n\r\n    telInputField.setLabel();\r\n\r\n    let formatted: string, country: HelpCountry, countryCode: HelpCountryCode, leftPattern = '';\r\n    if(telInputField.value.replace(/\\++/, '+') === '+') {\r\n      telInputField.setValueSilently('+');\r\n    } else {\r\n      const o = formatPhoneNumber(telInputField.value);\r\n      formatted = o.formatted;\r\n      country = o.country;\r\n      leftPattern = o.leftPattern;\r\n      countryCode = o.code;\r\n      telInputField.setValueSilently(lastValue = formatted ? '+' + formatted : '');\r\n    }\r\n\r\n    telEl.dataset.leftPattern = leftPattern/* .replace(/X/g, '0') */;\r\n\r\n    //console.log(formatted, country);\r\n\r\n    let countryName = country ? country.name || country.default_name : ''/* 'Unknown' */;\r\n    if(countryName !== countryInputField.value && (\r\n        !lastCountrySelected || \r\n        !country || (\r\n          lastCountrySelected !== country && \r\n          lastCountryCodeSelected.country_code !== countryCode.country_code\r\n        )\r\n      )\r\n    ) {\r\n      replaceContent(countryInput, country ? i18n(country.default_name as any) : countryName);\r\n      lastCountrySelected = country;\r\n      lastCountryCodeSelected = countryCode;\r\n    }\r\n\r\n    //if(country && (telInputField.value.length - 1) >= (country.pattern ? country.pattern.length : 9)) {\r\n    if(country || (telInputField.value.length - 1) > 1) {\r\n      btnNext.style.visibility = '';\r\n    } else {\r\n      btnNext.style.visibility = 'hidden';\r\n    }\r\n  });\r\n\r\n  telEl.addEventListener('paste', () => {\r\n    pasted = true;\r\n    //console.log('paste', telEl.value);\r\n  });\r\n\r\n  /* telEl.addEventListener('change', (e) => {\r\n    console.log('change', telEl.value);\r\n  }); */\r\n\r\n  telEl.addEventListener('keypress', (e) => {\r\n    //console.log('keypress', this.value);\r\n    if(!btnNext.style.visibility &&/* this.value.length >= 9 && */ e.key === 'Enter') {\r\n      return onSubmit();\r\n    } else if(/\\D/.test(e.key) && !(e.metaKey || e.ctrlKey) && e.key !== 'Backspace' && !(e.key === '+' && e.shiftKey/*  && !this.value */)) {\r\n      e.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n\r\n  /* telEl.addEventListener('focus', function(this: typeof telEl, e) {\r\n    this.removeAttribute('readonly'); // fix autocomplete\r\n  });*/\r\n\r\n  const signedCheckboxField = new CheckboxField({\r\n    text: 'Login.KeepSigned', \r\n    name: 'keepSession',\r\n    withRipple: true,\r\n    checked: true\r\n  });\r\n\r\n  signedCheckboxField.input.addEventListener('change', () => {\r\n    const keepSigned = signedCheckboxField.checked;\r\n    appStateManager.pushToState('keepSigned', keepSigned);\r\n    \r\n    AppStorage.toggleStorage(keepSigned);\r\n    CacheStorageController.toggleStorage(keepSigned);\r\n    apiManager.toggleStorage(keepSigned);\r\n    sessionStorage.toggleStorage(keepSigned);\r\n  });\r\n\r\n  appStateManager.getState().then(state => {\r\n    if(!appStateManager.storage.isAvailable()) {\r\n      signedCheckboxField.checked = false;\r\n      signedCheckboxField.label.classList.add('checkbox-disabled');\r\n    } else {\r\n      signedCheckboxField.checked = state.keepSigned;\r\n    }\r\n  });\r\n\r\n  btnNext = Button('btn-primary btn-color-primary', {text: 'Login.Next'});\r\n  btnNext.style.visibility = 'hidden';\r\n\r\n  const onSubmit = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    const toggle = toggleDisability([/* telEl, countryInput,  */btnNext, btnQr], true);\r\n\r\n    replaceContent(btnNext, i18n('PleaseWait'));\r\n    putPreloader(btnNext);\r\n\r\n    //return;\r\n\r\n    let phone_number = telInputField.value;\r\n    apiManager.invokeApi('auth.sendCode', {\r\n      phone_number: phone_number,\r\n      api_id: App.id,\r\n      api_hash: App.hash,\r\n      settings: {\r\n        _: 'codeSettings' // that's how we sending Type\r\n      }\r\n      //lang_code: navigator.language || 'en'\r\n    }).then((code) => {\r\n      //console.log('got code', code);\r\n\r\n      import('./pageAuthCode').then(m => m.default.mount(Object.assign(code, {phone_number: phone_number})));\r\n    }).catch(err => {\r\n      toggle();\r\n\r\n      switch(err.type) {\r\n        case 'PHONE_NUMBER_INVALID':\r\n          telInputField.setError();\r\n          replaceContent(telInputField.label, i18n('Login.PhoneLabelInvalid'));\r\n          telEl.classList.add('error');\r\n          replaceContent(btnNext, i18n('Login.Next'));\r\n          break;\r\n        default:\r\n          console.error('auth.sendCode error:', err);\r\n          btnNext.innerText = err.type;\r\n          break;\r\n      }\r\n    });\r\n  };\r\n\r\n  attachClickEvent(btnNext, onSubmit);\r\n\r\n  btnQr = Button('btn-primary btn-secondary btn-primary-transparent primary', {text: 'Login.QR.Login'});\r\n\r\n  let qrMounted = false;\r\n  btnQr.addEventListener('click', () => {\r\n    pageSignQR.mount();\r\n    /* const promise = import('./pageSignQR');\r\n    btnQr.disabled = true;\r\n\r\n    let preloaderDiv: HTMLElement;\r\n    if(!qrMounted) {\r\n      preloaderDiv = putPreloader(btnQr);\r\n      qrMounted = true;\r\n    }\r\n\r\n    promise.then(module => {\r\n      module.default.mount();\r\n\r\n      setTimeout(() => {\r\n        btnQr.removeAttribute('disabled');\r\n        if(preloaderDiv) {\r\n          preloaderDiv.remove();\r\n        }\r\n      }, 200);\r\n    }); */\r\n  });\r\n\r\n  inputWrapper.append(countryInputField.container, telInputField.container, signedCheckboxField.label, btnNext, btnQr);\r\n\r\n  const h4 = document.createElement('h4');\r\n  h4.classList.add('text-center');\r\n  _i18n(h4, 'Login.Title');\r\n\r\n  const subtitle = document.createElement('div');\r\n  subtitle.classList.add('subtitle', 'text-center');\r\n  _i18n(subtitle, 'Login.StartText');\r\n\r\n  page.pageEl.querySelector('.container').append(h4, subtitle, inputWrapper);\r\n\r\n  let tryAgain = () => {\r\n    apiManager.invokeApi('help.getNearestDc').then((nearestDcResult) => {\r\n      const langPack = stateStorage.getFromCache('langPack');\r\n      if(langPack && !langPack.countries?.hash) {\r\n        I18n.getLangPack(langPack.lang_code).then(() => {\r\n          simulateEvent(telEl, 'input');\r\n        });\r\n      }\r\n\r\n      const dcs = new Set([1, 2, 3, 4, 5]);\r\n      const done: number[] = [nearestDcResult.this_dc];\r\n\r\n      let promise: Promise<any>;\r\n      if(nearestDcResult.nearest_dc !== nearestDcResult.this_dc) {\r\n        promise = apiManager.getNetworker(nearestDcResult.nearest_dc).then(() => {\r\n          done.push(nearestDcResult.nearest_dc);\r\n        });\r\n      }\r\n\r\n      (promise || Promise.resolve()).then(() => {\r\n        done.forEach(dcId => {\r\n          dcs.delete(dcId);\r\n        });\r\n\r\n        const _dcs = [...dcs];\r\n        const g = async(): Promise<void> => {\r\n          const dcId = _dcs.shift();\r\n          if(!dcId) return;\r\n\r\n          const dbKey: DcAuthKey = `dc${dcId}_auth_key` as any;\r\n          const key = await sessionStorage.get(dbKey);\r\n          if(key) {\r\n            return g();\r\n          }\r\n\r\n          setTimeout(() => { // * если одновременно запросить все нетворкеры, не будет проходить запрос на код\r\n            apiManager.getNetworker(dcId/* , {fileDownload: true} */).finally(g);\r\n          }, /* done.includes(dcId) ? 0 :  */3000);\r\n        };\r\n        \r\n        g();\r\n      });\r\n      \r\n      return nearestDcResult;\r\n    }).then((nearestDcResult) => {\r\n      if(!countryInputField.value.length && !telInputField.value.length) {\r\n        selectCountryByTarget(liMap.get(nearestDcResult.country)[0]);\r\n      }\r\n  \r\n      //console.log('woohoo', nearestDcResult, country);\r\n    })//.catch(tryAgain);\r\n  };\r\n\r\n  if(!isTouchSupported) {\r\n    setTimeout(() => {\r\n      telEl.focus();\r\n    }, 0);\r\n  }\r\n\r\n  getLanguageChangeButton(inputWrapper);\r\n\r\n  tryAgain();\r\n};\r\n\r\nconst page = new Page('page-sign', true, onFirstMount, () => {\r\n  if(btnNext) {\r\n    replaceContent(btnNext, i18n('Login.Next'));\r\n    ripple(btnNext, undefined, undefined, true);\r\n    btnNext.removeAttribute('disabled');\r\n  }\r\n\r\n  if(btnQr) {\r\n    btnQr.removeAttribute('disabled');\r\n  }\r\n\r\n  appStateManager.pushToState('authState', {_: 'authStateSignIn'});\r\n});\r\n\r\nexport default page;\r\n"],"sourceRoot":""}