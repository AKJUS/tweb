{"version":3,"sources":["webpack:///./src/components/languageChangeButton.ts","webpack:///./src/pages/pageSignQR.ts"],"names":["cachedPromise","set","times","getLanguageChangeButton","appendTo","invokeApiCacheable","then","config","suggested_lang_code","lastRequestedLangCode","Promise","all","getStrings","getCacheLangPack","strings","backup","forEach","string","backupString","get","key","push","btnChangeLanguage","text","window","requestAnimationFrame","append","addEventListener","remove","e","disabled","getLangPack","console","log","page","imageDiv","pageEl","querySelector","preloader","inputWrapper","document","createElement","classList","add","btnBack","container","parentElement","h4","helpList","li","m","default","mount","stop","QRCodeStyling","prevToken","options","ignoreErrors","iterate","isLoop","loginToken","invokeApi","api_id","id","api_hash","hash","except_ids","_","dcId","dc_id","setBaseDcId","token","authorization","setUserAuth","user","url","replace","style","getComputedStyle","documentElement","surfaceColor","getPropertyValue","trim","textColor","primaryColor","logoUrl","fetch","res","blob","Blob","type","resolve","reader","FileReader","onload","target","result","readAsDataURL","qrCode","width","devicePixelRatio","height","data","image","dotsOptions","color","cornersSquareOptions","imageOptions","imageSize","margin","backgroundOptions","qrOptions","errorCorrectionLevel","promise","lastChild","_drawingPromise","race","_canvas","_image","once","animation","c","children","display","setTimeout","undefined","Array","from","slice","el","timestamp","Date","now","diff","expires","serverTimeOffset","err","warn","handled","error","func","pushToState"],"mappings":"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","file":"24.3ecb55b49499e663354d.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { cancelEvent } from \"../helpers/dom/cancelEvent\";\nimport { attachClickEvent } from \"../helpers/dom/clickEvent\";\nimport loadFonts from \"../helpers/dom/loadFonts\";\nimport { Config, LangPackDifference, LangPackString } from \"../layer\";\nimport I18n, { LangPackKey } from \"../lib/langPack\";\nimport apiManager from \"../lib/mtproto/mtprotoworker\";\nimport rootScope from \"../lib/rootScope\";\nimport Button from \"./button\";\nimport { putPreloader } from \"./misc\";\n\nlet set = false, times = 0;\nrootScope.addEventListener('language_change', () => {\n  if(++times < 2) {\n    return;\n  }\n\n  console.log('language_change');\n  set = true;\n});\n\nfunction getLang(): Promise<[Config.config, LangPackString[], LangPackDifference.langPackDifference]> {\n  if(cachedPromise) return cachedPromise;\n  return cachedPromise = apiManager.invokeApiCacheable('help.getConfig').then(config => {\n    if(config.suggested_lang_code !== I18n.lastRequestedLangCode) {\n      //I18n.loadLangPack(config.suggested_lang_code);\n\n      return Promise.all([\n        config,\n        I18n.getStrings(config.suggested_lang_code, ['Login.ContinueOnLanguage']),\n        I18n.getCacheLangPack()\n      ]);\n    } else {\n      return [] as any;\n    }\n  });\n}\n\nlet cachedPromise: ReturnType<typeof getLang>;\n\nexport default function getLanguageChangeButton(appendTo: HTMLElement) {\n  if(set) return;\n  getLang().then(([config, strings]) => {\n    if(!config) {\n      return;\n    }\n\n    const backup: LangPackString[] = [];\n    strings.forEach(string => {\n      const backupString = I18n.strings.get(string.key as LangPackKey);\n      if(!backupString) {\n        return;\n      }\n      \n      backup.push(backupString);\n      I18n.strings.set(string.key as LangPackKey, string);\n    });\n\n    const btnChangeLanguage = Button('btn-primary btn-secondary btn-primary-transparent primary', {text: 'Login.ContinueOnLanguage'});\n    loadFonts().then(() => {\n      window.requestAnimationFrame(() => {\n        appendTo.append(btnChangeLanguage);\n      });\n    });\n\n    rootScope.addEventListener('language_change', () => {\n      btnChangeLanguage.remove();\n    }, true);\n\n    backup.forEach(string => {\n      I18n.strings.set(string.key as LangPackKey, string);\n    });\n    \n    attachClickEvent(btnChangeLanguage, (e) => {\n      cancelEvent(e);\n\n      btnChangeLanguage.disabled = true;\n      putPreloader(btnChangeLanguage);\n\n      I18n.getLangPack(config.suggested_lang_code);\n    });\n  });\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport apiManager from '../lib/mtproto/mtprotoworker';\nimport Page from './page';\nimport serverTimeManager from '../lib/mtproto/serverTimeManager';\nimport { AuthAuthorization, AuthLoginToken } from '../layer';\nimport { bytesCmp, bytesToBase64 } from '../helpers/bytes';\nimport { pause } from '../helpers/schedulers';\nimport App from '../config/app';\nimport Button from '../components/button';\nimport { _i18n, i18n, LangPackKey } from '../lib/langPack';\nimport appStateManager from '../lib/appManagers/appStateManager';\nimport rootScope from '../lib/rootScope';\nimport { putPreloader } from '../components/misc';\nimport getLanguageChangeButton from '../components/languageChangeButton';\n\nconst FETCH_INTERVAL = 3;\n\nlet onFirstMount = async() => {\n  const pageElement = page.pageEl;\n  const imageDiv = pageElement.querySelector('.auth-image') as HTMLDivElement;\n\n  let preloader = putPreloader(imageDiv, true);\n\n  const inputWrapper = document.createElement('div');\n  inputWrapper.classList.add('input-wrapper');\n\n  const btnBack = Button('btn-primary btn-secondary btn-primary-transparent primary', {text: 'Login.QR.Cancel'});\n  inputWrapper.append(btnBack);\n\n  getLanguageChangeButton(inputWrapper);\n\n  const container = imageDiv.parentElement;\n\n  const h4 = document.createElement('h4');\n  _i18n(h4, 'Login.QR.Title');\n\n  const helpList = document.createElement('ol');\n  helpList.classList.add('qr-description');\n  (['Login.QR.Help1', 'Login.QR.Help2', 'Login.QR.Help3'] as LangPackKey[]).forEach((key) => {\n    const li = document.createElement('li');\n    li.append(i18n(key));\n    helpList.append(li);\n  });\n\n  container.append(h4, helpList, inputWrapper);\n\n  btnBack.addEventListener('click', () => {\n    import('./pageSignIn').then(m => m.default.mount());\n    stop = true;\n  });\n  \n  const results = await Promise.all([\n    import('qr-code-styling' as any)\n  ]);\n  const QRCodeStyling = results[0].default;\n\n  let stop = false;\n  rootScope.addEventListener('user_auth', () => {\n    stop = true;\n    cachedPromise = null;\n  }, true);\n  \n  let options: {dcId?: number, ignoreErrors: true} = {ignoreErrors: true};\n  let prevToken: Uint8Array | number[];\n\n  const iterate = async(isLoop: boolean) => {\n    try {\n      let loginToken = await apiManager.invokeApi('auth.exportLoginToken', {\n        api_id: App.id,\n        api_hash: App.hash,\n        except_ids: []\n      }, {ignoreErrors: true});\n  \n      if(loginToken._ === 'auth.loginTokenMigrateTo') {\n        if(!options.dcId) {\n          options.dcId = loginToken.dc_id;\n          apiManager.setBaseDcId(loginToken.dc_id);\n          //continue;\n        }\n        \n        loginToken = await apiManager.invokeApi('auth.importLoginToken', {\n          token: loginToken.token\n        }, options) as AuthLoginToken.authLoginToken;\n      }\n\n      if(loginToken._ === 'auth.loginTokenSuccess') {\n        const authorization = loginToken.authorization as any as AuthAuthorization.authAuthorization;\n        apiManager.setUserAuth(authorization.user.id);\n        import('./pageIm').then(m => m.default.mount());\n        return true;\n      }\n\n      /* // to base64\n      var decoder = new TextDecoder('utf8');\n      var b64encoded = btoa(String.fromCharCode.apply(null, [...loginToken.token])); */\n\n      if(!prevToken || !bytesCmp(prevToken, loginToken.token)) {\n        prevToken = loginToken.token;\n\n        let encoded = bytesToBase64(loginToken.token);\n        let url = \"tg://login?token=\" + encoded.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=+$/, \"\");\n\n        const style = window.getComputedStyle(document.documentElement);\n        const surfaceColor = style.getPropertyValue('--surface-color').trim();\n        const textColor = style.getPropertyValue('--primary-text-color').trim();\n        const primaryColor = style.getPropertyValue('--primary-color').trim();\n\n        const logoUrl = await fetch('assets/img/logo_padded.svg')\n        .then(res => res.text())\n        .then(text => {\n          text = text.replace(/(fill:).+?(;)/, `$1${primaryColor}$2`);\n          const blob = new Blob([text], {type: 'image/svg+xml;charset=utf-8'});\n\n          // * because iOS Safari doesn't want to eat objectURL\n          return new Promise<string>((resolve) => {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n              resolve(e.target.result as string);\n            };\n            reader.readAsDataURL(blob);\n          });\n          //return URL.createObjectURL(blob);\n        });\n\n        const qrCode = new QRCodeStyling({\n          width: 240 * window.devicePixelRatio,\n          height: 240 * window.devicePixelRatio,\n          data: url,\n          image: logoUrl,\n          dotsOptions: {\n            color: textColor,\n            type: 'rounded'\n          },\n          cornersSquareOptions: {\n            type: 'extra-rounded'\n          },\n          imageOptions: {\n            imageSize: 1,\n            margin: 0\n          },\n          backgroundOptions: {\n            color: surfaceColor\n          },\n          qrOptions: {\n            errorCorrectionLevel: \"L\"\n          }\n        });\n\n        qrCode.append(imageDiv);\n        (imageDiv.lastChild as HTMLCanvasElement).classList.add('qr-canvas');\n\n        let promise: Promise<void>;\n        if(qrCode._drawingPromise) {\n          promise = qrCode._drawingPromise;\n        } else {\n          promise = Promise.race([\n            pause(1000),\n            new Promise<void>((resolve) => {\n              qrCode._canvas._image.addEventListener('load', () => {\n                window.requestAnimationFrame(() => resolve());\n              }, {once: true});\n            })\n          ]);\n        }\n\n        // * это костыль, но библиотека не предоставляет никаких событий\n        await promise.then(() => {\n          if(preloader) {\n            preloader.style.animation = 'hide-icon .4s forwards';\n\n            const c = imageDiv.children[1] as HTMLElement;\n            c.style.display = 'none';\n            c.style.animation = 'grow-icon .4s forwards';\n            setTimeout(() => {\n              c.style.display = '';\n            }, 150);\n\n            setTimeout(() => {\n              c.style.animation = '';\n            }, 500);\n            preloader = undefined;\n          } else {\n            Array.from(imageDiv.children).slice(0, -1).forEach(el => {\n              el.remove();\n            });\n          }\n        });\n      }\n\n      if(isLoop) {\n        let timestamp = Date.now() / 1000;\n        let diff = loginToken.expires - timestamp - serverTimeManager.serverTimeOffset;\n  \n        await pause(diff > FETCH_INTERVAL ? 1e3 * FETCH_INTERVAL : 1e3 * diff | 0);\n      }\n    } catch(err) {\n      switch(err.type) {\n        case 'SESSION_PASSWORD_NEEDED':\n          console.warn('pageSignQR: SESSION_PASSWORD_NEEDED');\n          err.handled = true;\n          import('./pagePassword').then(m => m.default.mount());\n          stop = true;\n          cachedPromise = null;\n          break;\n        default:\n          console.error('pageSignQR: default error:', err);\n          stop = true;\n          break;\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  //await iterate(false);\n\n  return async() => {\n    stop = false;\n\n    do {\n      if(stop) {\n        break;\n      }\n  \n      const needBreak = await iterate(true);\n      if(needBreak) {\n        break;\n      }\n    } while(true);\n  };\n};\n\nlet cachedPromise: Promise<() => Promise<void>>;\nconst page = new Page('page-signQR', true, () => {\n  return cachedPromise;\n}, () => {\n  //console.log('onMount');\n  if(!cachedPromise) cachedPromise = onFirstMount();\n  cachedPromise.then(func => {\n    func();\n  });\n\n  appStateManager.pushToState('authState', {_: 'authStateSignQr'});\n});\n\nexport default page;\n"],"sourceRoot":""}