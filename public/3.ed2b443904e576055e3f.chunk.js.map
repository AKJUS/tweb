{"version":3,"sources":["webpack:///./src/lib/searchIndex.ts","webpack:///./src/helpers/cleanSearchText.ts","webpack:///./src/lib/mtproto/mtproto_config.ts","webpack:///./src/helpers/dom/htmlToSpan.ts","webpack:///./src/helpers/cleanUsername.ts","webpack:///./src/lib/appManagers/appUsersManager.ts","webpack:///./src/lib/appManagers/appChatsManager.ts","webpack:///./src/lib/appManagers/appPeersManager.ts","webpack:///./src/helpers/array.ts","webpack:///./src/lib/appManagers/apiUpdatesManager.ts","webpack:///./src/helpers/assumeType.ts"],"names":["SearchIndex","options","minChars","fullTexts","Map","id","searchText","this","trim","delete","set","query","newFoundObjs","queryWords","split","queryWordsLength","length","forEach","fullText","what","found","foundChars","i","word","idx","indexOf","fullTextLength","push","sort","a","b","Set","map","o","badCharsRe","trimRe","clearBadCharsAndTrim","text","replace","latinizeString","ch","latinizeCh","LatinizeMap","undefined","cleanSearchText","latinize","hasTag","charAt","toLowerCase","processSearchText","includeTag","clearBadChars","ignoreCase","REPLIES_PEER_ID","htmlToSpan","html","span","document","createElement","innerHTML","cleanUsername","username","appUsersManager","storage","appStateManager","storages","users","updateUsersStatuses","timestampNow","user","status","_","expires","was_online","rootScope","dispatchEvent","setUserToStateIfNeeded","clear","setInterval","addEventListener","addMultipleEventsListeners","updateUserStatus","update","userId","user_id","serverTimeManager","serverTimeOffset","updateUserPhoto","forceUserOnline","photo","console","warn","updateUserName","saveApiUser","Object","assign","first_name","last_name","e","getSelf","contactsIndex","indexObject","getUserSearchText","getState","then","state","storagesResults","contactsList","Array","isArray","pushContact","contactsFillPromise","Promise","resolve","peerId","getFromCache","getUser","init","usernames","_userId","isPeerNeeded","findAndSplice","getTopPeersPromises","createSearchIndex","updatedContactsList","pushToState","promise","invokeApi","result","saveApiUsers","contacts","contact","onContactsModified","slice","resolvedPeer","appChatsManager","saveApiChats","chats","appPeersManager","getPeer","getPeerId","peer","add","requestPeer","phone","pFlags","self","format","filter","Boolean","join","includeSaved","sortBy","fillContacts","_contactsList","results","search","has","userId1","userId2","sortName1","sortName","sortName2","localeCompare","status1","getUserStatusForSort","p","myId","testSelfSearch","unshift","block","invokeApiSingle","getInputPeerById","value","apiUpdatesManager","processLocalUpdate","peer_id","getOutputPeer","blocked","index","apiUsers","override","oldUser","min","fullName","searchUsername","deleted","initials","getAbbreviation","changedPhoto","changedTitle","photo_id","formatPhoneNumber","formatted","access_hash","key","args","isBot","support","date","now","Date","d","getDate","getMonth","getHours","getMinutes","bot","isRegularUser","isContact","allowMin","eventTimestamp","timestamp","updatesState","syncLoading","type","cached","topPeersCache","cachedTime","peers","offset","limit","hash","topPeers","categories","topPeer","rating","contactsBlocked","count","peerIds","u","concat","c","invokeApiCacheable","q","cacheSeconds","my_results","offline","showPhone","getUserInput","add_phone_privacy_exception","updates","processUpdateMessage","onContactUpdated","userIds","onChatUpdated","chatId","isChannel","updateChannelParticipant","clearCache","params","channel","channel_id","updateChatDefaultBannedRights","chat","default_banned_rights","getChat","_chatId","apiChats","saveApiChat","oldChat","title","participants_count","rights","defaultRights","action","isThread","kicked","left","megagroup","deactivated","creator","admin_rights","banned_rights","myFlags","post_messages","delete_messages","broadcast","until_date","bind","isMegagroup","good","chat_id","about","channelId","input","getChannelInput","usersInputs","fwdLimit","fwd_limit","deleteChatUser","leaveChannel","leaveChat","deleteChannel","deleteChat","find","bool","inputFile","inputChatPhoto","file","participant","getParticipantPeerId","actor_id","qts","prev_participant","new_participant","keys","kicked_by","editBanned","view_messages","messagesChats","DialogColorsFg","DialogColors","DialogColorsMap","updatePeerBlocked","hasRights","getUserPhoto","getChatPhoto","migrated_to","plainText","onlyFirstName","wrapEmojiText","getUserString","getChatString","isUser","peerParams","substr","isBroadcast","ignorePeerId","getChannelInputPeer","getChatInputPeer","pic","getDialogType","accumulate","arr","initialValue","reduce","acc","findAndSpliceAll","array","verify","out","findIndex","splice","forEachReverse","callback","insertInDescendSortedArray","element","property","pos","sortProperty","len","error","filterUnique","pendingPtsUpdates","pendingSeqUpdates","syncPending","channelStates","attached","log","Error","Warn","Log","debug","updateMessage","processOpts","seq","seqStart","seq_start","forceGetDifference","processUpdate","isOut","fromId","from_id","toId","message","fwd_from","reply_to","entities","pts","pts_count","Proxy","target","saveUpdatesState","us","nextSeq","pendingUpdatesData","saveUpdate","popPendingSeqUpdate","seqAwaiting","ptsAwaiting","clearTimeout","timeout","curState","getChannelState","curPts","goodPts","goodIndex","getDifference","first","wasSyncing","pts_total_limit","differenceResult","other_updates","new_messages","apiMessage","nextState","intermediate_state","justAName","channelState","getChannelDifference","addChannelState","lastPtsUpdateTime","toPeerId","fwdHeader","reason","hasUser","post","hasChat","popPts","popSeq","window","setTimeout","popPendingPtsUpdate","_state","noErrorBox","stateResult","setUpdatesProcessor","setProxy","assumeType","x"],"mappings":"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","file":"3.ed2b443904e576055e3f.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { processSearchText, ProcessSearchTextOptions } from '../helpers/cleanSearchText';\r\n\r\nexport default class SearchIndex<SearchWhat> {\r\n  private fullTexts: Map<SearchWhat, string> = new Map();\r\n\r\n  // minChars can be 0 because it requires at least one word (one symbol) to be found\r\n  constructor(private options?: ProcessSearchTextOptions, private minChars = 0) {\r\n  }\r\n\r\n  public indexObject(id: SearchWhat, searchText: string) {\r\n    /* if(searchIndex.fullTexts.hasOwnProperty(id)) {\r\n      return false;\r\n    } */\r\n\r\n    if(this.options && searchText.trim()) {\r\n      searchText = processSearchText(searchText, this.options);\r\n    }\r\n\r\n    if(!searchText) {\r\n      this.fullTexts.delete(id);\r\n      return false;\r\n    }\r\n\r\n    this.fullTexts.set(id, searchText);\r\n    \r\n    /* const shortIndexes = searchIndex.shortIndexes;\r\n    searchText.split(' ').forEach((searchWord) => {\r\n      let len = Math.min(searchWord.length, 3),\r\n        wordPart, i;\r\n      for(i = 1; i <= len; i++) {\r\n        wordPart = searchWord.substr(0, i);\r\n        if(shortIndexes[wordPart] === undefined) {\r\n          shortIndexes[wordPart] = [id];\r\n        } else {\r\n          shortIndexes[wordPart].push(id);\r\n        }\r\n      }\r\n    }); */\r\n  }\r\n\r\n  public search(query: string) {\r\n    const fullTexts = this.fullTexts;\r\n    //const shortIndexes = searchIndex.shortIndexes;\r\n\r\n    if(this.options) {\r\n      query = processSearchText(query, this.options);\r\n    }\r\n\r\n    const newFoundObjs: Array<{fullText: string, fullTextLength: number, what: SearchWhat, foundChars: number}> = [];\r\n    const queryWords = query.split(' ');\r\n    const queryWordsLength = queryWords.length;\r\n    fullTexts.forEach((fullText, what) => {\r\n      let found = true;\r\n      let foundChars = 0;\r\n      for(let i = 0; i < queryWordsLength; ++i) { // * verify that all words are found\r\n        const word = queryWords[i];\r\n        const idx = fullText.indexOf(word);\r\n        if(idx === -1 || (idx !== 0 && fullText[idx - 1] !== ' ')) { // * search only from word beginning\r\n          found = false;\r\n          break;\r\n        }\r\n\r\n        foundChars += word.length;\r\n      }\r\n\r\n      if(found) {\r\n        foundChars += queryWordsLength - 1;\r\n        const fullTextLength = fullText.length;\r\n        if(this.minChars <= foundChars || fullTextLength <= foundChars) {\r\n          newFoundObjs.push({fullText, fullTextLength, what, foundChars});\r\n        }\r\n      }\r\n    });\r\n\r\n    newFoundObjs.sort((a, b) => a.fullTextLength - b.fullTextLength || b.foundChars - a.foundChars);\r\n\r\n    //newFoundObjs.sort((a, b) => a.fullText.localeCompare(b.fullText));\r\n    const newFoundObjs2: Set<SearchWhat> = new Set(newFoundObjs.map(o => o.what));\r\n\r\n    /* const queryWords = query.split(' ');\r\n    let foundArr: number[];\r\n    for(let i = 0; i < queryWords.length; i++) {\r\n      const newFound = shortIndexes[queryWords[i].substr(0, 3)];\r\n      if(!newFound) {\r\n        foundArr = [];\r\n        break;\r\n      }\r\n      \r\n      if(foundArr === undefined || foundArr.length > newFound.length) {\r\n        foundArr = newFound;\r\n      }\r\n    }\r\n\r\n    for(let j = 0; j < foundArr.length; j++) {\r\n      let found = true;\r\n      let searchText = fullTexts[foundArr[j]];\r\n      for(let i = 0; i < queryWords.length; i++) {\r\n        if(searchText.indexOf(queryWords[i]) === -1) {\r\n          found = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if(found) {\r\n        newFoundObjs[foundArr[j]] = true;\r\n      }\r\n    } */\r\n\r\n    return newFoundObjs2;\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport Config from \"../lib/config\";\r\n\r\nconst badCharsRe = /[`~!@#$%^&*()\\-_=+\\[\\]\\\\|{}'\";:\\/?.>,<]+/g;\r\nconst trimRe = /^\\s+|\\s$/g;\r\n\r\nexport function clearBadCharsAndTrim(text: string) {\r\n  return text.replace(badCharsRe, '').replace(trimRe, '');\r\n}\r\n\r\nexport function latinizeString(text: string) {\r\n  return text.replace(/[^A-Za-z0-9]/g, (ch) => {\r\n    const latinizeCh = Config.LatinizeMap[ch];\r\n    return latinizeCh !== undefined ? latinizeCh : ch;\r\n  });\r\n}\r\n\r\nexport default function cleanSearchText(text: string, latinize = true) {\r\n  const hasTag = text.charAt(0) === '%';\r\n  text = clearBadCharsAndTrim(text);\r\n  if(latinize) text = latinizeString(text);\r\n  \r\n  text = text.toLowerCase();\r\n  if(hasTag) text = '%' + text;\r\n\r\n  return text;\r\n}\r\n\r\nexport type ProcessSearchTextOptions = Partial<{\r\n  clearBadChars: boolean,\r\n  latinize: boolean,\r\n  ignoreCase: boolean,\r\n  includeTag: boolean\r\n}>;\r\n\r\nexport function processSearchText(text: string, options: ProcessSearchTextOptions = {}) {\r\n  const hasTag = options.includeTag && text.charAt(0) === '%';\r\n  if(options.clearBadChars) text = clearBadCharsAndTrim(text);\r\n  if(options.latinize) text = latinizeString(text);\r\n  if(options.ignoreCase) text = text.toLowerCase();\r\n  if(hasTag) text = '%' + text;\r\n  return text;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n/**\r\n * Legacy Webogram's format, don't change dcID to camelCase. date is timestamp\r\n */\r\nexport type UserAuth = {dcID: number | string, date: number, id: number};\r\n\r\nexport const REPLIES_PEER_ID = 1271266957;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function htmlToSpan(html: string) {\r\n  const span = document.createElement('span');\r\n  span.innerHTML = html;\r\n  return span;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport default function cleanUsername(username: string) {\r\n  return username && username.toLowerCase() || '';\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { filterUnique } from \"../../helpers/array\";\r\nimport cleanSearchText from \"../../helpers/cleanSearchText\";\r\nimport cleanUsername from \"../../helpers/cleanUsername\";\r\nimport { tsNow } from \"../../helpers/date\";\r\nimport { formatPhoneNumber } from \"../../helpers/formatPhoneNumber\";\r\nimport { safeReplaceObject, isObject } from \"../../helpers/object\";\r\nimport { Chat, InputUser, User as MTUser, UserProfilePhoto, UserStatus } from \"../../layer\";\r\nimport I18n, { i18n, LangPackKey } from \"../langPack\";\r\n//import apiManager from '../mtproto/apiManager';\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport { REPLIES_PEER_ID } from \"../mtproto/mtproto_config\";\r\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport SearchIndex from \"../searchIndex\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from \"./appStateManager\";\r\n\r\n// TODO: updateUserBlocked\r\n\r\nexport type User = MTUser.user;\r\nexport type TopPeerType = 'correspondents' | 'bots_inline';\r\nexport type MyTopPeer = {id: number, rating: number};\r\n\r\nexport class AppUsersManager {\r\n  private storage = appStateManager.storages.users;\r\n  \r\n  private users: {[userId: number]: User};\r\n  private usernames: {[username: string]: number};\r\n  private contactsIndex: SearchIndex<number>;\r\n  private contactsFillPromise: Promise<Set<number>>;\r\n  private contactsList: Set<number>;\r\n  private updatedContactsList: boolean;\r\n  \r\n  private getTopPeersPromises: {[type in TopPeerType]?: Promise<MyTopPeer[]>};\r\n\r\n  constructor() {\r\n    this.clear(true);\r\n\r\n    setInterval(this.updateUsersStatuses, 60000);\r\n\r\n    rootScope.addEventListener('state_synchronized', this.updateUsersStatuses);\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      updateUserStatus: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          user.status = update.status;\r\n          if(user.status) {\r\n            if('expires' in user.status) {\r\n              user.status.expires -= serverTimeManager.serverTimeOffset;\r\n            }\r\n\r\n            if('was_online' in user.status) {\r\n              user.status.was_online -= serverTimeManager.serverTimeOffset;\r\n            }\r\n          }\r\n\r\n          //user.sortStatus = this.getUserStatusForSort(user.status);\r\n          rootScope.dispatchEvent('user_update', userId);\r\n          this.setUserToStateIfNeeded(user);\r\n        } //////else console.warn('No user by id:', userId);\r\n      },\r\n\r\n      updateUserPhoto: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          this.forceUserOnline(userId);\r\n\r\n          if(update.photo._ === 'userProfilePhotoEmpty') {\r\n            delete user.photo;\r\n          } else {\r\n            user.photo = safeReplaceObject(user.photo, update.photo);\r\n          }\r\n\r\n          this.setUserToStateIfNeeded(user);\r\n\r\n          rootScope.dispatchEvent('user_update', userId);\r\n          rootScope.dispatchEvent('avatar_update', userId);\r\n        } else console.warn('No user by id:', userId);\r\n      },\r\n\r\n      updateUserName: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          this.forceUserOnline(userId);\r\n          \r\n          this.saveApiUser(Object.assign({}, user, {\r\n            first_name: update.first_name,\r\n            last_name: update.last_name,\r\n            username: update.username\r\n          }), true);\r\n        }\r\n      }\r\n    });\r\n\r\n    /* case 'updateContactLink':\r\n    this.onContactUpdated(update.user_id, update.my_link._ === 'contactLinkContact');\r\n    break; */\r\n\r\n    rootScope.addEventListener('language_change', (e) => {\r\n      const userId = this.getSelf().id;\r\n      this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\r\n    });\r\n\r\n    appStateManager.getState().then((state) => {\r\n      const users = appStateManager.storagesResults.users;\r\n      if(users.length) {\r\n        for(let i = 0, length = users.length; i < length; ++i) {\r\n          const user = users[i];\r\n          if(user) {\r\n            this.users[user.id] = user;\r\n          }\r\n        }\r\n      }\r\n\r\n      const contactsList = state.contactsList;\r\n      if(contactsList && Array.isArray(contactsList)) {\r\n        contactsList.forEach(userId => {\r\n          this.pushContact(userId);\r\n        });\r\n\r\n        if(contactsList.length) {\r\n          this.contactsFillPromise = Promise.resolve(this.contactsList);\r\n        }\r\n      }\r\n\r\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\r\n        if(peerId < 0 || this.storage.getFromCache(peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.set({\r\n          [peerId]: this.getUser(peerId)\r\n        });\r\n      });\r\n\r\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\r\n        if(peerId < 0 || !this.storage.getFromCache(peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.delete(peerId);\r\n      });\r\n    });\r\n  }\r\n\r\n  public clear(init = false) {\r\n    if(!init) {\r\n      const users = appStateManager.storagesResults.users;\r\n      for(const _userId in this.users) {\r\n        const userId = +_userId;\r\n        if(!userId) continue;\r\n        if(!appStateManager.isPeerNeeded(userId)) {\r\n          const user = this.users[userId];\r\n          if(user.username) {\r\n            delete this.usernames[cleanUsername(user.username)];\r\n          }\r\n\r\n          users.findAndSplice((user) => user.id === userId);\r\n          this.storage.delete(userId);\r\n          delete this.users[userId];\r\n        }\r\n      }\r\n    } else {\r\n      this.users = {};\r\n      this.usernames = {};\r\n    }\r\n    \r\n    this.getTopPeersPromises = {};\r\n    this.contactsIndex = this.createSearchIndex();\r\n    this.contactsFillPromise = undefined;\r\n    this.contactsList = new Set();\r\n    this.updatedContactsList = false;\r\n  }\r\n\r\n  private onContactsModified() {\r\n    const contactsList = [...this.contactsList];\r\n    appStateManager.pushToState('contactsList', contactsList);\r\n  }\r\n\r\n  public fillContacts() {\r\n    if(this.contactsFillPromise && this.updatedContactsList) {\r\n      return this.contactsFillPromise;\r\n    }\r\n\r\n    this.updatedContactsList = true;\r\n\r\n    const promise = apiManager.invokeApi('contacts.getContacts').then((result) => {\r\n      if(result._ === 'contacts.contacts') {\r\n        this.saveApiUsers(result.users);\r\n\r\n        result.contacts.forEach((contact) => {\r\n          this.pushContact(contact.user_id);\r\n        });\r\n\r\n        this.onContactsModified();\r\n      }\r\n\r\n      this.contactsFillPromise = promise;\r\n\r\n      return this.contactsList;\r\n    });\r\n\r\n    return this.contactsFillPromise || (this.contactsFillPromise = promise);\r\n  }\r\n\r\n  public resolveUsername(username: string): Promise<Chat | User> {\r\n    if(username[0] === '@') {\r\n      username = username.slice(1);\r\n    }\r\n\r\n    username = username.toLowerCase();\r\n    if(this.usernames[username]) {\r\n      return Promise.resolve(this.users[this.usernames[username]]);\r\n    }\r\n\r\n    return apiManager.invokeApi('contacts.resolveUsername', {username}).then(resolvedPeer => {\r\n      this.saveApiUsers(resolvedPeer.users);\r\n      appChatsManager.saveApiChats(resolvedPeer.chats);\r\n\r\n      return appPeersManager.getPeer(appPeersManager.getPeerId(resolvedPeer.peer));\r\n    });\r\n  }\r\n\r\n  public pushContact(userId: number) {\r\n    this.contactsList.add(userId);\r\n    this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\r\n    appStateManager.requestPeer(userId, 'contacts');\r\n  }\r\n\r\n  public getUserSearchText(id: number) {\r\n    const user = this.users[id];\r\n    if(!user) {\r\n      return '';\r\n    }\r\n\r\n    const arr: string[] = [\r\n      user.first_name,\r\n      user.last_name,\r\n      user.phone,\r\n      user.username,\r\n      user.pFlags.self ? I18n.format('SavedMessages', true) : '',\r\n      user.pFlags.self ? 'Saved Messages' : ''\r\n    ];\r\n\r\n    return arr.filter(Boolean).join(' ');\r\n  }\r\n\r\n  public getContacts(query?: string, includeSaved = false, sortBy: 'name' | 'online' | 'none' = 'name') {\r\n    return this.fillContacts().then(_contactsList => {\r\n      let contactsList = [..._contactsList];\r\n      if(query) {\r\n        const results = this.contactsIndex.search(query);\r\n        const filteredContactsList = [...contactsList].filter(id => results.has(id));\r\n\r\n        contactsList = filteredContactsList;\r\n      }\r\n\r\n      if(sortBy === 'name') {\r\n        contactsList.sort((userId1, userId2) => {\r\n          const sortName1 = (this.users[userId1] || {}).sortName || '';\r\n          const sortName2 = (this.users[userId2] || {}).sortName || '';\r\n          return sortName1.localeCompare(sortName2);\r\n        });\r\n      } else if(sortBy === 'online') {\r\n        contactsList.sort((userId1, userId2) => {\r\n          const status1 = appUsersManager.getUserStatusForSort(appUsersManager.getUser(userId1).status);\r\n          const status2 = appUsersManager.getUserStatusForSort(appUsersManager.getUser(userId2).status);\r\n          return status2 - status1;\r\n        });\r\n      }\r\n\r\n      contactsList.findAndSplice(p => p === rootScope.myId);\r\n      if(includeSaved) {\r\n        if(this.testSelfSearch(query)) {\r\n          contactsList.unshift(rootScope.myId);\r\n        }\r\n      }\r\n\r\n      return contactsList;\r\n    });\r\n  }\r\n\r\n  public toggleBlock(peerId: number, block: boolean) {\r\n    return apiManager.invokeApiSingle(block ? 'contacts.block' : 'contacts.unblock', {\r\n      id: appPeersManager.getInputPeerById(peerId)\r\n    }).then(value => {\r\n      if(value) {\r\n        apiUpdatesManager.processLocalUpdate({\r\n          _: 'updatePeerBlocked',\r\n          peer_id: appPeersManager.getOutputPeer(peerId),\r\n          blocked: block\r\n        });\r\n      }\r\n\r\n      return value;\r\n    });\r\n  }\r\n\r\n  public testSelfSearch(query: string) {\r\n    const user = this.getSelf();\r\n    const index = this.createSearchIndex();\r\n    index.indexObject(user.id, this.getUserSearchText(user.id));\r\n    return index.search(query).has(user.id);\r\n  }\r\n\r\n  private createSearchIndex() {\r\n    return new SearchIndex<number>({\r\n      clearBadChars: true,\r\n      ignoreCase: true,\r\n      latinize: true,\r\n      includeTag: true\r\n    });\r\n  }\r\n\r\n  public saveApiUsers(apiUsers: any[], override?: boolean) {\r\n    apiUsers.forEach((user) => this.saveApiUser(user, override));\r\n  }\r\n\r\n  public saveApiUser(user: MTUser, override?: boolean) {\r\n    if(user._ === 'userEmpty') return;\r\n\r\n    const userId = user.id;\r\n    const oldUser = this.users[userId];\r\n\r\n    // ! commented block can affect performance !\r\n    // if(oldUser && !override) {\r\n    //   console.log('saveApiUser same');\r\n    //   return;\r\n    // }\r\n\r\n    if(user.pFlags === undefined) {\r\n      user.pFlags = {};\r\n    }\r\n\r\n    if(user.pFlags.min && oldUser !== undefined) {\r\n      return;\r\n    }\r\n\r\n    // * exclude from state\r\n    // defineNotNumerableProperties(user, ['initials', 'num', 'rFirstName', 'rFullName', 'rPhone', 'sortName', 'sortStatus']);\r\n\r\n    const fullName = user.first_name + ' ' + (user.last_name || '');\r\n    if(user.username) {\r\n      const searchUsername = cleanUsername(user.username);\r\n      this.usernames[searchUsername] = userId;\r\n    }\r\n\r\n    user.sortName = user.pFlags.deleted ? '' : cleanSearchText(fullName, false);\r\n\r\n    user.initials = RichTextProcessor.getAbbreviation(fullName);\r\n\r\n    if(user.status) {\r\n      if((user.status as UserStatus.userStatusOnline).expires) {\r\n        (user.status as UserStatus.userStatusOnline).expires -= serverTimeManager.serverTimeOffset;\r\n      }\r\n\r\n      if((user.status as UserStatus.userStatusOffline).was_online) {\r\n        (user.status as UserStatus.userStatusOffline).was_online -= serverTimeManager.serverTimeOffset;\r\n      }\r\n    }\r\n\r\n    //user.sortStatus = user.pFlags.bot ? -1 : this.getUserStatusForSort(user.status);\r\n\r\n    let changedPhoto = false, changedTitle = false;\r\n    if(oldUser === undefined) {\r\n      this.users[userId] = user;\r\n    } else {\r\n      if(user.first_name !== oldUser.first_name \r\n        || user.last_name !== oldUser.last_name \r\n        || user.username !== oldUser.username) {\r\n        changedTitle = true;\r\n      }\r\n\r\n      const oldPhotoId = (oldUser.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\r\n      const newPhotoId = (user.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\r\n      if(oldPhotoId !== newPhotoId) {\r\n        changedPhoto = true;\r\n      }\r\n\r\n      /* if(user.pFlags.bot && user.bot_info_version !== oldUser.bot_info_version) {\r\n        \r\n      } */\r\n\r\n      safeReplaceObject(oldUser, user);\r\n      rootScope.dispatchEvent('user_update', userId);\r\n    }\r\n\r\n    if(changedPhoto) {\r\n      rootScope.dispatchEvent('avatar_update', user.id);\r\n    }\r\n\r\n    if(changedTitle) {\r\n      rootScope.dispatchEvent('peer_title_edit', user.id);\r\n    }\r\n\r\n    this.setUserToStateIfNeeded(user);\r\n  }\r\n\r\n  public setUserToStateIfNeeded(user: User) {\r\n    if(appStateManager.isPeerNeeded(user.id)) {\r\n      this.storage.set({\r\n        [user.id]: user\r\n      });\r\n    }\r\n  }\r\n\r\n  public formatUserPhone(phone: string) {\r\n    return '+' + formatPhoneNumber(phone).formatted;\r\n  }\r\n\r\n  public isUserOnlineVisible(id: number) {\r\n    return this.getUserStatusForSort(id) > 3;\r\n  }\r\n\r\n  public getUserStatusForSort(status: User['status'] | number) {\r\n    if(typeof(status) === 'number') {\r\n      status = this.getUser(status).status;\r\n    }\r\n\r\n    if(status) {\r\n      const expires = status._ === 'userStatusOnline' ? status.expires : (status._ === 'userStatusOffline' ? status.was_online : 0);\r\n      if(expires) {\r\n        return expires;\r\n      }\r\n\r\n      /* const timeNow = tsNow(true);\r\n      switch(status._) {\r\n        case 'userStatusRecently':\r\n          return timeNow - 86400 * 3;\r\n        case 'userStatusLastWeek':\r\n          return timeNow - 86400 * 7;\r\n        case 'userStatusLastMonth':\r\n          return timeNow - 86400 * 30;\r\n      } */\r\n      switch(status._) {\r\n        case 'userStatusRecently':\r\n          return 3;\r\n        case 'userStatusLastWeek':\r\n          return 2;\r\n        case 'userStatusLastMonth':\r\n          return 1;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  public getUser(id: any): User {\r\n    if(isObject(id)) {\r\n      return id;\r\n    }\r\n\r\n    return this.users[id] || {id: id, pFlags: {deleted: true}, access_hash: ''} as User;\r\n  }\r\n\r\n  public getSelf() {\r\n    return this.getUser(rootScope.myId);\r\n  }\r\n\r\n  public getUserStatusString(userId: number): HTMLElement {\r\n    let key: LangPackKey;\r\n    let args: any[];\r\n\r\n    switch(userId) {\r\n      case REPLIES_PEER_ID:\r\n        key = 'Peer.RepliesNotifications';\r\n        break;\r\n      case 777000:\r\n        key = 'Peer.ServiceNotifications';\r\n        break;\r\n      default: {\r\n        if(this.isBot(userId)) {\r\n          key = 'Bot';\r\n          break;\r\n        }\r\n\r\n        const user = this.getUser(userId);\r\n        if(!user) {\r\n          key = '' as any;\r\n          break;\r\n        }\r\n\r\n        if(user.pFlags.support) {\r\n          key = 'SupportStatus';\r\n          break;\r\n        }\r\n\r\n        switch(user.status?._) {\r\n          case 'userStatusRecently': {\r\n            key = 'Lately';\r\n            break;\r\n          }\r\n    \r\n          case 'userStatusLastWeek': {\r\n            key = 'WithinAWeek';\r\n            break;\r\n          }\r\n    \r\n          case 'userStatusLastMonth': {\r\n            key = 'WithinAMonth';\r\n            break;\r\n          }\r\n          \r\n          case 'userStatusOffline': {\r\n            const date = user.status.was_online;\r\n            const now = Date.now() / 1000;\r\n            \r\n            if((now - date) < 60) {\r\n              key = 'Peer.Status.justNow';\r\n            } else if((now - date) < 3600) {\r\n              key = 'Peer.Status.minAgo';\r\n              const c = (now - date) / 60 | 0;\r\n              args = [c];\r\n            } else if(now - date < 86400) {\r\n              key = 'LastSeen.HoursAgo';\r\n              const c = (now - date) / 3600 | 0;\r\n              args = [c];\r\n            } else {\r\n              key = 'Peer.Status.LastSeenAt';\r\n              const d = new Date(date * 1000);\r\n              args = [('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2), \r\n                ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2)];\r\n            }\r\n            \r\n            break;\r\n          }\r\n    \r\n          case 'userStatusOnline': {\r\n            key = 'Online';\r\n            break;\r\n          }\r\n    \r\n          default: {\r\n            key = 'ALongTimeAgo';\r\n            break;\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n    \r\n    return i18n(key, args);\r\n  }\r\n\r\n  public isBot(id: number) {\r\n    return this.users[id] && this.users[id].pFlags.bot;\r\n  }\r\n\r\n  public isContact(id: number) {\r\n    return this.contactsList.has(id) || (this.users[id] && this.users[id].pFlags.contact);\r\n  }\r\n  \r\n  public isRegularUser(id: number) {\r\n    const user = this.users[id];\r\n    return user && !this.isBot(id) && !user.pFlags.deleted && !user.pFlags.support;\r\n  }\r\n\r\n  public isNonContactUser(id: number) {\r\n    return this.isRegularUser(id) && !this.isContact(id) && id !== rootScope.myId;\r\n  }\r\n\r\n  public hasUser(id: number, allowMin?: boolean) {\r\n    const user = this.users[id];\r\n    return isObject(user) && (allowMin || !user.pFlags.min);\r\n  }\r\n\r\n  public canSendToUser(id: number) {\r\n    const user = this.getUser(id);\r\n    return !user.pFlags.deleted && user.username !== 'replies';\r\n  }\r\n\r\n  public getUserPhoto(id: number) {\r\n    const user = this.getUser(id);\r\n\r\n    return user && user.photo || {\r\n      _: 'userProfilePhotoEmpty'\r\n    };\r\n  }\r\n\r\n  public getUserString(id: number) {\r\n    const user = this.getUser(id);\r\n    return 'u' + id + (user.access_hash ? '_' + user.access_hash : '');\r\n  }\r\n\r\n  public getUserInput(id: number): InputUser {\r\n    const user = this.getUser(id);\r\n    if(user.pFlags && user.pFlags.self) {\r\n      return {_: 'inputUserSelf'};\r\n    }\r\n\r\n    return {\r\n      _: 'inputUser',\r\n      user_id: id,\r\n      access_hash: user.access_hash\r\n    };\r\n  }\r\n\r\n  public updateUsersStatuses = () => {\r\n    const timestampNow = tsNow(true);\r\n    for(const i in this.users) {\r\n      const user = this.users[i];\r\n\r\n      if(user.status &&\r\n        user.status._ === 'userStatusOnline' &&\r\n        user.status.expires < timestampNow) {\r\n\r\n        user.status = {_: 'userStatusOffline', was_online: user.status.expires};\r\n        rootScope.dispatchEvent('user_update', user.id);\r\n\r\n        this.setUserToStateIfNeeded(user);\r\n      }\r\n    }\r\n  };\r\n\r\n  public forceUserOnline(id: number, eventTimestamp?: number) {\r\n    if(this.isBot(id)) {\r\n      return;\r\n    }\r\n\r\n    const timestamp = tsNow(true);\r\n    const onlineTimeFor = 60;\r\n    if(eventTimestamp) {\r\n      if((timestamp - eventTimestamp) >= onlineTimeFor) {\r\n        return;\r\n      }\r\n    } else if(apiUpdatesManager.updatesState.syncLoading) {\r\n      return;\r\n    }\r\n\r\n    const user = this.getUser(id);\r\n    if(user &&\r\n      user.status &&\r\n      user.status._ !== 'userStatusOnline' &&\r\n      user.status._ !== 'userStatusEmpty' &&\r\n      !user.pFlags.support &&\r\n      !user.pFlags.deleted) {\r\n\r\n      user.status = {\r\n        _: 'userStatusOnline',\r\n        expires: timestamp + onlineTimeFor\r\n      };\r\n      \r\n      //user.sortStatus = this.getUserStatusForSort(user.status);\r\n      rootScope.dispatchEvent('user_update', id);\r\n\r\n      this.setUserToStateIfNeeded(user);\r\n    }\r\n  }\r\n\r\n  /* function importContact (phone, firstName, lastName) {\r\n      return MtpApiManager.invokeApi('contacts.importContacts', {\r\n        contacts: [{\r\n          _: 'inputPhoneContact',\r\n          client_id: '1',\r\n          phone: phone,\r\n          first_name: firstName,\r\n          last_name: lastName\r\n        }],\r\n        replace: false\r\n      }).then(function (importedContactsResult) {\r\n        saveApiUsers(importedContactsResult.users)\r\n\r\n        var foundUserID = false\r\n        angular.forEach(importedContactsResult.imported, function (importedContact) {\r\n          onContactUpdated(foundUserID = importedContact.user_id, true)\r\n        })\r\n\r\n        return foundUserID || false\r\n      })\r\n  }\r\n\r\n  function importContacts (contacts) {\r\n    var inputContacts = [],\r\n      i\r\n    var j\r\n\r\n    for (i = 0; i < contacts.length; i++) {\r\n      for (j = 0; j < contacts[i].phones.length; j++) {\r\n        inputContacts.push({\r\n          _: 'inputPhoneContact',\r\n          client_id: (i << 16 | j).toString(10),\r\n          phone: contacts[i].phones[j],\r\n          first_name: contacts[i].first_name,\r\n          last_name: contacts[i].last_name\r\n        })\r\n      }\r\n    }\r\n\r\n    return MtpApiManager.invokeApi('contacts.importContacts', {\r\n      contacts: inputContacts,\r\n      replace: false\r\n    }).then(function (importedContactsResult) {\r\n      saveApiUsers(importedContactsResult.users)\r\n\r\n      var result = []\r\n      angular.forEach(importedContactsResult.imported, function (importedContact) {\r\n        onContactUpdated(importedContact.user_id, true)\r\n        result.push(importedContact.user_id)\r\n      })\r\n\r\n      return result\r\n    })\r\n  } */\r\n\r\n  /* public deleteContacts(userIds: number[]) {\r\n    var ids: any[] = [];\r\n    userIds.forEach((userId) => {\r\n      ids.push(this.getUserInput(userId));\r\n    })\r\n\r\n    return apiManager.invokeApi('contacts.deleteContacts', {\r\n      id: ids\r\n    }).then(() => {\r\n      userIds.forEach((userId) => {\r\n        this.onContactUpdated(userId, false);\r\n      });\r\n    });\r\n  } */\r\n\r\n  public getTopPeers(type: TopPeerType) {\r\n    if(this.getTopPeersPromises[type]) return this.getTopPeersPromises[type];\r\n\r\n    return this.getTopPeersPromises[type] = appStateManager.getState().then((state) => {\r\n      const cached = state.topPeersCache[type];\r\n      if(cached && (cached.cachedTime + 86400e3) > Date.now() && cached.peers) {\r\n        return cached.peers;\r\n      }\r\n\r\n      return apiManager.invokeApi('contacts.getTopPeers', {\r\n        [type]: true,\r\n        offset: 0,\r\n        limit: 15,\r\n        hash: 0\r\n      }).then((result) => {\r\n        let topPeers: MyTopPeer[] = [];\r\n        if(result._ === 'contacts.topPeers') {\r\n          //console.log(result);\r\n          this.saveApiUsers(result.users);\r\n          appChatsManager.saveApiChats(result.chats);\r\n\r\n          if(result.categories.length) {\r\n            topPeers = result.categories[0].peers.map((topPeer) => {\r\n              const peerId = appPeersManager.getPeerId(topPeer.peer);\r\n              appStateManager.requestPeer(peerId, 'topPeer');\r\n              return {id: peerId, rating: topPeer.rating};\r\n            });\r\n          }\r\n        }\r\n  \r\n        state.topPeersCache[type] = {\r\n          peers: topPeers,\r\n          cachedTime: Date.now()\r\n        };\r\n        appStateManager.pushToState('topPeersCache', state.topPeersCache);\r\n  \r\n        return topPeers;\r\n      });\r\n    });\r\n  }\r\n\r\n  public getBlocked(offset = 0, limit = 0) {\r\n    return apiManager.invokeApiSingle('contacts.getBlocked', {offset, limit}).then(contactsBlocked => {\r\n      this.saveApiUsers(contactsBlocked.users);\r\n      appChatsManager.saveApiChats(contactsBlocked.chats);\r\n      const count = contactsBlocked._ === 'contacts.blocked' ? contactsBlocked.users.length + contactsBlocked.chats.length : contactsBlocked.count;\r\n\r\n      const peerIds = contactsBlocked.users.map(u => u.id).concat(contactsBlocked.chats.map(c => -c.id));\r\n\r\n      return {count, peerIds};\r\n    });\r\n  }\r\n\r\n  /* public searchContacts(query: string, limit = 20) {\r\n    return Promise.all([\r\n      this.getContacts(query),\r\n      apiManager.invokeApi('contacts.search', {\r\n        q: query,\r\n        limit\r\n      })\r\n    ]).then(results => {\r\n      const [myContacts, peers] = results;\r\n\r\n      this.saveApiUsers(peers.users);\r\n      appChatsManager.saveApiChats(peers.chats);\r\n\r\n      // * contacts.search returns duplicates in my_results\r\n      const myResults = new Set(myContacts.concat(peers.my_results.map(p => appPeersManager.getPeerID(p))));\r\n\r\n      const out = {\r\n        my_results: [...myResults].slice(0, limit),\r\n        results: peers.results.map(p => appPeersManager.getPeerID(p))\r\n      };\r\n\r\n      return out;\r\n    });\r\n  } */\r\n  public searchContacts(query: string, limit = 20) {\r\n    return apiManager.invokeApiCacheable('contacts.search', {\r\n      q: query,\r\n      limit\r\n    }, {cacheSeconds: 60}).then(peers => {\r\n      this.saveApiUsers(peers.users);\r\n      appChatsManager.saveApiChats(peers.chats);\r\n\r\n      const out = {\r\n        my_results: filterUnique(peers.my_results.map(p => appPeersManager.getPeerId(p))), // ! contacts.search returns duplicates in my_results\r\n        results: peers.results.map(p => appPeersManager.getPeerId(p))\r\n      };\r\n\r\n      return out;\r\n    });\r\n  }\r\n\r\n  private onContactUpdated(userId: number, isContact: boolean) {\r\n    const curIsContact = this.isContact(userId);\r\n    if(isContact !== curIsContact) {\r\n      if(isContact) {\r\n        this.pushContact(userId);\r\n      } else {\r\n        this.contactsList.delete(userId);\r\n      }\r\n\r\n      this.onContactsModified();\r\n\r\n      rootScope.dispatchEvent('contacts_update', userId);\r\n    }\r\n  }\r\n\r\n  public updateUsername(username: string) {\r\n    return apiManager.invokeApi('account.updateUsername', {\r\n      username\r\n    }).then((user) => {\r\n      this.saveApiUser(user);\r\n    });\r\n  }\r\n\r\n  public setUserStatus(userId: number, offline: boolean) {\r\n    if(this.isBot(userId)) {\r\n      return;\r\n    }\r\n\r\n    const user = this.users[userId];\r\n    if(user) {\r\n      const status: any = offline ? {\r\n        _: 'userStatusOffline',\r\n        was_online: tsNow(true)\r\n      } : {\r\n        _: 'userStatusOnline',\r\n        expires: tsNow(true) + 500\r\n      };\r\n\r\n      user.status = status;\r\n      //user.sortStatus = this.getUserStatusForSort(user.status);\r\n      rootScope.dispatchEvent('user_update', userId);\r\n    }\r\n  }\r\n\r\n  public addContact(userId: number, first_name: string, last_name: string, phone: string, showPhone?: true) {\r\n    return apiManager.invokeApi('contacts.addContact', {\r\n      id: this.getUserInput(userId),\r\n      first_name,\r\n      last_name,\r\n      phone,\r\n      add_phone_privacy_exception: showPhone\r\n    }).then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\r\n\r\n      this.onContactUpdated(userId, true);\r\n    });\r\n  }\r\n\r\n  public deleteContacts(userIds: number[]) {\r\n    return apiManager.invokeApi('contacts.deleteContacts', {\r\n      id: userIds.map(userId => this.getUserInput(userId))\r\n    }).then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\r\n\r\n      userIds.forEach(userId => {\r\n        this.onContactUpdated(userId, false);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nconst appUsersManager = new AppUsersManager();\r\nMOUNT_CLASS_TO.appUsersManager = appUsersManager;\r\nexport default appUsersManager\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { isObject, safeReplaceObject, copy, deepEqual } from \"../../helpers/object\";\r\nimport { ChannelParticipant, Chat, ChatAdminRights, ChatBannedRights, ChatParticipant, ChatPhoto, InputChannel, InputChatPhoto, InputFile, InputPeer, Update, Updates } from \"../../layer\";\r\nimport apiManagerProxy from \"../mtproto/mtprotoworker\";\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from \"./appStateManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\n\r\nexport type Channel = Chat.channel;\r\n\r\nexport type ChatRights = keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags'] | 'change_type' | 'change_permissions' | 'delete_chat' | 'view_participants';\r\n\r\nexport class AppChatsManager {\r\n  private storage = appStateManager.storages.chats;\r\n  \r\n  private chats: {[id: number]: Chat.channel | Chat.chat | any};\r\n  //private usernames: any;\r\n  //private channelAccess: any;\r\n  //private megagroups: {[id: number]: true};\r\n\r\n  constructor() {\r\n    this.clear(true);\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      /* updateChannel: (update) => {\r\n        const channelId = update.channel_id;\r\n        //console.log('updateChannel:', update);\r\n        rootScope.broadcast('channel_settings', {channelId});\r\n      }, */\r\n\r\n      updateChannelParticipant: (update) => {\r\n        apiManagerProxy.clearCache('channels.getParticipants', (params) => {\r\n          return (params.channel as InputChannel.inputChannel).channel_id === update.channel_id;\r\n        });\r\n      },\r\n\r\n      updateChatDefaultBannedRights: (update) => {\r\n        const chatId = -appPeersManager.getPeerId(update.peer);\r\n        const chat: Chat.chat = this.chats[chatId];\r\n        if(chat) {\r\n          chat.default_banned_rights = update.default_banned_rights;\r\n          rootScope.dispatchEvent('chat_update', chatId);\r\n        }\r\n      }\r\n    });\r\n\r\n    appStateManager.getState().then((state) => {\r\n      const chats = appStateManager.storagesResults.chats;\r\n      if(chats.length) {\r\n        for(let i = 0, length = chats.length; i < length; ++i) {\r\n          const chat = chats[i];\r\n          if(chat) {\r\n            this.chats[chat.id] = chat;\r\n          }\r\n        }\r\n      }\r\n\r\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\r\n        if(peerId > 0 || this.storage.getFromCache(-peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.set({\r\n          [-peerId]: this.getChat(-peerId)\r\n        });\r\n      });\r\n\r\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\r\n        if(peerId > 0 || !this.storage.getFromCache(-peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.delete(-peerId);\r\n      });\r\n    });\r\n  }\r\n\r\n  public clear(init = false) {\r\n    if(!init) {\r\n      const chats = appStateManager.storagesResults.chats;\r\n      for(const _chatId in this.chats) {\r\n        const chatId = +_chatId;\r\n        if(!chatId) continue;\r\n        if(!appStateManager.isPeerNeeded(-chatId)) {\r\n          /* const chat = this.chats[chatId];\r\n          if(chat.username) {\r\n            delete this.usernames[cleanUsername(chat.username)];\r\n          } */\r\n          \r\n          chats.findAndSplice((chat) => chat.id === chatId);\r\n          this.storage.delete(chatId);\r\n          delete this.chats[chatId];\r\n        }\r\n      }\r\n    } else {\r\n      this.chats = {};\r\n    }\r\n  }\r\n\r\n  public saveApiChats(apiChats: any[], override?: boolean) {\r\n    apiChats.forEach(chat => this.saveApiChat(chat, override));\r\n  }\r\n\r\n  public saveApiChat(chat: Chat, override?: boolean) {\r\n    if(chat._ === 'chatEmpty') return;\r\n    /* if(chat._ !== 'chat' && chat._ !== 'channel') {\r\n      return;\r\n    } */\r\n    \r\n    // * exclude from state\r\n    // defineNotNumerableProperties(chat, ['rTitle', 'initials']);\r\n\r\n    const oldChat: Exclude<Chat, Chat.chatEmpty> = this.chats[chat.id];\r\n\r\n    /* if(oldChat && !override) {\r\n      return;\r\n    } */\r\n\r\n    if((chat as Chat.chat).pFlags === undefined) {\r\n      (chat as Chat.chat).pFlags = {};\r\n    }\r\n\r\n    if((chat as Chat.channel).pFlags.min && oldChat !== undefined) {\r\n      return;\r\n    }\r\n\r\n    chat.initials = RichTextProcessor.getAbbreviation(chat.title);\r\n\r\n    if(chat._ === 'channel' &&\r\n        chat.participants_count === undefined &&\r\n        oldChat !== undefined &&\r\n        (oldChat as Chat.channel).participants_count) {\r\n      chat.participants_count = (oldChat as Chat.channel).participants_count;\r\n    }\r\n\r\n    /* if(chat.username) {\r\n      let searchUsername = searchIndexManager.cleanUsername(chat.username);\r\n      this.usernames[searchUsername] = chat.id;\r\n    } */\r\n\r\n    let changedPhoto = false, changedTitle = false;\r\n    if(oldChat === undefined) {\r\n      this.chats[chat.id] = chat;\r\n    } else {\r\n      const oldPhotoId = ((oldChat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\r\n      const newPhotoId = ((chat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\r\n      if(oldPhotoId !== newPhotoId) {\r\n        changedPhoto = true;\r\n      }\r\n\r\n      if(oldChat.title !== chat.title) {\r\n        changedTitle = true;\r\n      }\r\n\r\n      safeReplaceObject(oldChat, chat);\r\n      rootScope.dispatchEvent('chat_update', chat.id);\r\n    }\r\n\r\n    if(changedPhoto) {\r\n      rootScope.dispatchEvent('avatar_update', -chat.id);\r\n    }\r\n\r\n    if(changedTitle) {\r\n      rootScope.dispatchEvent('peer_title_edit', -chat.id);\r\n    }\r\n\r\n    if(appStateManager.isPeerNeeded(-chat.id)) {\r\n      this.storage.set({\r\n        [chat.id]: chat\r\n      });\r\n    }\r\n  }\r\n\r\n  public getChat(id: number) {\r\n    if(id < 0) id = -id;\r\n    return this.chats[id] || {_: 'chatEmpty', id, deleted: true, access_hash: '', pFlags: {}/* this.channelAccess[id] */};\r\n  }\r\n\r\n  public combineParticipantBannedRights(id: number, rights: ChatBannedRights) {\r\n    const chat: Chat.channel = this.getChat(id);\r\n\r\n    if(chat.default_banned_rights) {\r\n      rights = copy(rights);\r\n      const defaultRights = chat.default_banned_rights.pFlags;\r\n      for(let i in defaultRights) {\r\n        // @ts-ignore\r\n        rights.pFlags[i] = defaultRights[i];\r\n      }\r\n    }\r\n\r\n    return rights;\r\n  }\r\n\r\n  public hasRights(id: number, action: ChatRights, rights?: ChatAdminRights | ChatBannedRights, isThread?: boolean) {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'chatEmpty') return false;\r\n\r\n    if(chat._ === 'chatForbidden' ||\r\n        chat._ === 'channelForbidden' ||\r\n        (chat as Chat.chat).pFlags.kicked ||\r\n        (chat.pFlags.left && !(chat as Chat.channel).pFlags.megagroup)) {\r\n      return false;\r\n    }\r\n\r\n    if((chat as Chat.chat).pFlags.deactivated && action !== 'view_messages') {\r\n      return false;\r\n    }\r\n\r\n    if(chat.pFlags.creator && rights === undefined) {\r\n      return true;\r\n    }\r\n\r\n    if(!rights) {\r\n      rights = chat.admin_rights || (chat as Chat.channel).banned_rights || chat.default_banned_rights;\r\n\r\n      if(!rights) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    let myFlags: Partial<{[flag in keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags']]: true}> = {};\r\n    if(rights) {\r\n      myFlags = rights.pFlags as any;\r\n    }\r\n\r\n    switch(action) {\r\n      case 'embed_links':\r\n      case 'send_games':\r\n      case 'send_gifs':\r\n      case 'send_inline':\r\n      case 'send_media':\r\n      case 'send_messages':\r\n      case 'send_polls':\r\n      case 'send_stickers': {\r\n        if(!isThread && chat.pFlags.left) {\r\n          return false;\r\n        }\r\n\r\n        if(rights._ === 'chatBannedRights' && myFlags[action]) {\r\n          return false;\r\n        }\r\n\r\n        if(chat._ === 'channel') {\r\n          if(!chat.pFlags.megagroup && !myFlags.post_messages) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      // * revoke foreign messages\r\n      case 'delete_messages': {\r\n        return !!myFlags.delete_messages;\r\n      }\r\n\r\n      case 'pin_messages': {\r\n        return rights._ === 'chatAdminRights' ? myFlags[action] || !!myFlags.post_messages : !myFlags[action];\r\n      }\r\n\r\n      case 'invite_users':\r\n      case 'change_info': {\r\n        return rights._ === 'chatAdminRights' ? myFlags[action] : !myFlags[action];\r\n      }\r\n\r\n      // * only creator can do that\r\n      case 'change_type':\r\n      case 'delete_chat': {\r\n        return false;\r\n      }\r\n\r\n      case 'change_permissions': {\r\n        return rights._ === 'chatAdminRights' && myFlags['ban_users'];\r\n      }\r\n\r\n      case 'view_participants': {\r\n        return !!(chat._ === 'chat' || !chat.pFlags.broadcast || chat.pFlags.creator || chat.admin_rights);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public editChatDefaultBannedRights(id: number, banned_rights: ChatBannedRights) {\r\n    const chat: Chat.chat = this.getChat(id);\r\n    if(chat.default_banned_rights) {\r\n      if(chat.default_banned_rights.until_date === banned_rights.until_date && deepEqual(chat.default_banned_rights.pFlags, banned_rights.pFlags)) {\r\n        return Promise.resolve();\r\n      }\r\n    }\r\n    \r\n    return apiManager.invokeApi('messages.editChatDefaultBannedRights', {\r\n      peer: appPeersManager.getInputPeerById(-id),\r\n      banned_rights\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  /* public resolveUsername(username: string) {\r\n    return this.usernames[username] || 0;\r\n  } */\r\n\r\n  /* public saveChannelAccess(id: number, accessHash: string) {\r\n    this.channelAccess[id] = accessHash;\r\n  } */\r\n\r\n  /* public saveIsMegagroup(id: number) {\r\n    this.megagroups[id] = true;\r\n  } */\r\n\r\n  public isChannel(id: number) {\r\n    const chat = this.chats[id];\r\n    return chat && (chat._ === 'channel' || chat._ === 'channelForbidden')/*  || this.channelAccess[id] */;\r\n  }\r\n\r\n  public isMegagroup(id: number) {\r\n    /* if(this.megagroups[id]) {\r\n      return true;\r\n    } */\r\n\r\n    const chat = this.chats[id];\r\n    return chat && chat._ === 'channel' && chat.pFlags.megagroup;\r\n  }\r\n\r\n  public isBroadcast(id: number) {\r\n    return this.isChannel(id) && !this.isMegagroup(id);\r\n  }\r\n\r\n  public isInChat(id: number) {\r\n    let good = true;\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'channelForbidden' \r\n      || chat._ === 'chatForbidden' \r\n      || chat._ === 'chatEmpty' \r\n      || (chat as Chat.chat).pFlags.left \r\n      || (chat as Chat.chat).pFlags.kicked \r\n      || (chat as Chat.chat).pFlags.deactivated) {\r\n      good = false;\r\n    }\r\n\r\n    return good;\r\n  }\r\n\r\n  public getChannelInput(id: number): InputChannel {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'chatEmpty' || !(chat as Chat.channel).access_hash) {\r\n      return {\r\n        _: 'inputChannelEmpty'\r\n      };\r\n    } else {\r\n      return {\r\n        _: 'inputChannel',\r\n        channel_id: id,\r\n        access_hash: (chat as Chat.channel).access_hash/*  || this.channelAccess[id] */ || '0'\r\n      };\r\n    }\r\n  }\r\n\r\n  public getChatInputPeer(id: number): InputPeer.inputPeerChat {\r\n    return {\r\n      _: 'inputPeerChat',\r\n      chat_id: id\r\n    };\r\n  }\r\n\r\n  public getChannelInputPeer(id: number): InputPeer.inputPeerChannel {\r\n    return {\r\n      _: 'inputPeerChannel',\r\n      channel_id: id,\r\n      access_hash: this.getChat(id).access_hash/*  || this.channelAccess[id] */ || 0\r\n    };\r\n  }\r\n\r\n  public hasChat(id: number, allowMin?: true) {\r\n    const chat = this.chats[id]\r\n    return isObject(chat) && (allowMin || !chat.pFlags.min);\r\n  }\r\n\r\n  public getChatPhoto(id: number) {\r\n    const chat: Chat.chat = this.getChat(id);\r\n\r\n    return chat && chat.photo || {\r\n      _: 'chatPhotoEmpty'\r\n    };\r\n  }\r\n\r\n  public getChatString(id: number) {\r\n    const chat = this.getChat(id);\r\n    if(this.isChannel(id)) {\r\n      return (this.isMegagroup(id) ? 's' : 'c') + id + '_' + chat.access_hash;\r\n    }\r\n    return 'g' + id;\r\n  }\r\n\r\n  /* public wrapForFull(id: number, fullChat: any) {\r\n    const chatFull = copy(fullChat);\r\n    const chat = this.getChat(id);\r\n\r\n    if(!chatFull.participants_count) {\r\n      chatFull.participants_count = chat.participants_count;\r\n    }\r\n\r\n    if(chatFull.participants &&\r\n        chatFull.participants._ === 'chatParticipants') {\r\n      chatFull.participants.participants = this.wrapParticipants(id, chatFull.participants.participants);\r\n    }\r\n\r\n    if(chatFull.about) {\r\n      chatFull.rAbout = RichTextProcessor.wrapRichText(chatFull.about, {noLinebreaks: true});\r\n    }\r\n\r\n    //chatFull.peerString = this.getChatString(id);\r\n    chatFull.chat = chat;\r\n\r\n    return chatFull;\r\n  }\r\n\r\n  public wrapParticipants(id: number, participants: any[]) {\r\n    const chat = this.getChat(id);\r\n    const myId = appUsersManager.getSelf().id;\r\n    if(this.isChannel(id)) {\r\n      const isAdmin = chat.pFlags.creator;\r\n      participants.forEach((participant) => {\r\n        participant.canLeave = myId === participant.user_id;\r\n        participant.canKick = isAdmin && participant._ === 'channelParticipant';\r\n\r\n        // just for order by last seen\r\n        participant.user = appUsersManager.getUser(participant.user_id);\r\n      });\r\n    } else {\r\n      const isAdmin = chat.pFlags.creator || chat.pFlags.admins_enabled && chat.pFlags.admin;\r\n      participants.forEach((participant) => {\r\n        participant.canLeave = myId === participant.user_id;\r\n        participant.canKick = !participant.canLeave && (\r\n          chat.pFlags.creator ||\r\n          participant._ === 'chatParticipant' && (isAdmin || myId === participant.inviter_id)\r\n        );\r\n\r\n        // just for order by last seen\r\n        participant.user = appUsersManager.getUser(participant.user_id);\r\n      });\r\n    }\r\n\r\n    return participants;\r\n  } */\r\n\r\n  public createChannel(title: string, about: string): Promise<number> {\r\n    return apiManager.invokeApi('channels.createChannel', {\r\n      broadcast: true,\r\n      title,\r\n      about\r\n    }).then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n\r\n      const channelId = (updates as any).chats[0].id;\r\n      rootScope.dispatchEvent('history_focus', {peerId: -channelId});\r\n\r\n      return channelId;\r\n    });\r\n  }\r\n\r\n  public inviteToChannel(id: number, userIds: number[]) {\r\n    const input = this.getChannelInput(id);\r\n    const usersInputs = userIds.map(u => appUsersManager.getUserInput(u));\r\n\r\n    return apiManager.invokeApi('channels.inviteToChannel', {\r\n      channel: input,\r\n      users: usersInputs\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public createChat(title: string, userIds: number[]): Promise<number> {\r\n    return apiManager.invokeApi('messages.createChat', {\r\n      users: userIds.map(u => appUsersManager.getUserInput(u)),\r\n      title\r\n    }).then(updates => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n\r\n      const chatId = (updates as any as Updates.updates).chats[0].id;\r\n      rootScope.dispatchEvent('history_focus', {peerId: -chatId});\r\n\r\n      return chatId;\r\n    });\r\n  }\r\n\r\n  private onChatUpdated = (chatId: number, updates?: any) => {\r\n    //console.log('onChatUpdated', chatId, updates);\r\n\r\n    apiUpdatesManager.processUpdateMessage(updates);\r\n    if(updates?.updates?.length && this.isChannel(chatId)) {\r\n      rootScope.dispatchEvent('invalidate_participants', chatId);\r\n    }\r\n  };\r\n\r\n  public leaveChannel(id: number) {\r\n    return apiManager.invokeApi('channels.leaveChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public joinChannel(id: number) {\r\n    return apiManager.invokeApi('channels.joinChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public addChatUser(id: number, userId: number, fwdLimit = 100) {\r\n    return apiManager.invokeApi('messages.addChatUser', {\r\n      chat_id: id,\r\n      user_id: appUsersManager.getUserInput(userId),\r\n      fwd_limit: fwdLimit\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public deleteChatUser(id: number, userId: number) {\r\n    return apiManager.invokeApi('messages.deleteChatUser', {\r\n      chat_id: id,\r\n      user_id: appUsersManager.getUserInput(userId)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public leaveChat(id: number) {\r\n    return this.deleteChatUser(id, appUsersManager.getSelf().id);\r\n  }\r\n\r\n  public leave(id: number) {\r\n    return this.isChannel(id) ? this.leaveChannel(id) : this.leaveChat(id);\r\n  }\r\n\r\n  public delete(id: number) {\r\n    return this.isChannel(id) ? this.deleteChannel(id) : this.deleteChat(id);\r\n  }\r\n\r\n  public deleteChannel(id: number) {\r\n    return apiManager.invokeApi('channels.deleteChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public deleteChat(id: number) {\r\n    //return this.leaveChat(id).then(() => {\r\n      return apiManager.invokeApi('messages.deleteChat', {\r\n        chat_id: id\r\n      });\r\n    //});\r\n  }\r\n\r\n  public migrateChat(id: number): Promise<number> {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'channel') return Promise.resolve(chat.id);\r\n    return apiManager.invokeApi('messages.migrateChat', {\r\n      chat_id: id\r\n    }).then((updates) => {\r\n      this.onChatUpdated(id, updates);\r\n      const update: Update.updateChannel = (updates as Updates.updates).updates.find(u => u._ === 'updateChannel') as any;\r\n      return update.channel_id;\r\n    });\r\n  }\r\n\r\n  public updateUsername(id: number, username: string) {\r\n    return apiManager.invokeApi('channels.updateUsername', {\r\n      channel: this.getChannelInput(id),\r\n      username\r\n    }).then((bool) => {\r\n      if(bool) {\r\n        const chat: Chat.channel = this.getChat(id);\r\n        chat.username = username;\r\n      }\r\n\r\n      return bool;\r\n    });\r\n  }\r\n\r\n  public editPhoto(id: number, inputFile: InputFile) {\r\n    const inputChatPhoto: InputChatPhoto = {\r\n      _: 'inputChatUploadedPhoto',\r\n      file: inputFile\r\n    };\r\n\r\n    let promise: any;\r\n    if(this.isChannel(id)) {\r\n      promise = apiManager.invokeApi('channels.editPhoto', {\r\n        channel: this.getChannelInput(id),\r\n        photo: inputChatPhoto\r\n      });\r\n    } else {\r\n      promise = apiManager.invokeApi('messages.editChatPhoto', {\r\n        chat_id: id,\r\n        photo: inputChatPhoto\r\n      });\r\n    }\r\n\r\n    return promise.then((updates: any) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public editTitle(id: number, title: string) {\r\n    let promise: any;\r\n\r\n    if(this.isChannel(id)) {\r\n      promise = apiManager.invokeApi('channels.editTitle', {\r\n        channel: this.getChannelInput(id),\r\n        title\r\n      });\r\n    } else {\r\n      promise = apiManager.invokeApi('messages.editChatTitle', {\r\n        chat_id: id,\r\n        title\r\n      });\r\n    }\r\n\r\n    return promise.then((updates: any) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public editAbout(id: number, about: string) {\r\n    return apiManager.invokeApi('messages.editChatAbout', {\r\n      peer: appPeersManager.getInputPeerById(-id),\r\n      about\r\n    }).then(bool => {\r\n      //apiUpdatesManager.processUpdateMessage(updates);\r\n      rootScope.dispatchEvent('peer_bio_edit', -id);\r\n    });\r\n  }\r\n\r\n  public getParticipantPeerId(participant: ChannelParticipant | ChatParticipant) {\r\n    const peerId = (participant as ChannelParticipant.channelParticipantBanned).peer ? \r\n      appPeersManager.getPeerId((participant as ChannelParticipant.channelParticipantBanned).peer) : \r\n      (participant as ChatParticipant.chatParticipant).user_id;\r\n    return peerId;\r\n  }\r\n\r\n  public editBanned(id: number, participant: number | ChannelParticipant, banned_rights: ChatBannedRights) {\r\n    const peerId = typeof(participant) === 'number' ? participant : this.getParticipantPeerId(participant);\r\n    return apiManager.invokeApi('channels.editBanned', {\r\n      channel: this.getChannelInput(id),\r\n      participant: appPeersManager.getInputPeerById(peerId),\r\n      banned_rights\r\n    }).then((updates) => {\r\n      this.onChatUpdated(id, updates);\r\n\r\n      if(typeof(participant) !== 'number') {\r\n        const timestamp = Date.now() / 1000 | 0;\r\n        apiUpdatesManager.processLocalUpdate({\r\n          _: 'updateChannelParticipant',\r\n          channel_id: id,\r\n          date: timestamp,\r\n          actor_id: undefined,\r\n          qts: undefined,\r\n          user_id: peerId,\r\n          prev_participant: participant,\r\n          new_participant: Object.keys(banned_rights.pFlags).length ? {\r\n            _: 'channelParticipantBanned',\r\n            date: timestamp,\r\n            banned_rights,\r\n            kicked_by: appUsersManager.getSelf().id,\r\n            peer: appPeersManager.getOutputPeer(peerId),\r\n            pFlags: {}\r\n          } : undefined\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public clearChannelParticipantBannedRights(id: number, participant: number | ChannelParticipant) {\r\n    return this.editBanned(id, participant, {\r\n      _: 'chatBannedRights',\r\n      until_date: 0,\r\n      pFlags: {}\r\n    });\r\n  }\r\n  \r\n  public kickFromChannel(id: number, participant: number | ChannelParticipant) {\r\n    return this.editBanned(id, participant, {\r\n      _: 'chatBannedRights',\r\n      until_date: 0,\r\n      pFlags: {\r\n        view_messages: true\r\n      }\r\n    });\r\n  }\r\n\r\n  public resolveChannel(id: number) {\r\n    return apiManager.invokeApiSingle('channels.getChannels', {\r\n      id: [{\r\n        _: 'inputChannel',\r\n        channel_id: id,\r\n        access_hash: '0'\r\n      }]\r\n    }).then(messagesChats => {\r\n      this.saveApiChats(messagesChats.chats);\r\n    });\r\n  }\r\n}\r\n\r\nconst appChatsManager = new AppChatsManager();\r\nMOUNT_CLASS_TO.appChatsManager = appChatsManager;\r\nexport default appChatsManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { ChatPhoto, DialogPeer, InputDialogPeer, InputNotifyPeer, InputPeer, Peer, Update, UserProfilePhoto } from \"../../layer\";\r\nimport type { LangPackKey } from \"../langPack\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { isObject } from \"../../helpers/object\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport I18n from '../langPack';\r\n\r\n// https://github.com/eelcohn/Telegram-API/wiki/Calculating-color-for-a-Telegram-user-on-IRC\r\n/*\r\n  HTML-color  IRC-color  Description\r\n  #c03d33     4          red\r\n  #4fad2d     3          green\r\n  #d09306     7          yellow\r\n  #168acd     10         blue\r\n  #8544d6     6          purple\r\n  #cd4073     13         pink\r\n  #2996ad     11         sea\r\n  #ce671b     5          orange\r\n  */\r\nconst DialogColorsFg = ['#fc5c51', '#0fb297', '#d09306', '#3d72ed', '#895dd5', '#cd4073', '#00c1a6', '#fa790f'];\r\nconst DialogColors = ['red', 'green', 'yellow', 'blue', 'violet', 'pink', 'cyan', 'orange'];\r\nconst DialogColorsMap = [0, 7, 4, 1, 6, 3, 5];\r\n\r\nexport type PeerType = 'channel' | 'chat' | 'megagroup' | 'group' | 'saved';\r\nexport class AppPeersManager {\r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      updatePeerBlocked: (update) => {\r\n        rootScope.dispatchEvent('peer_block', {peerId: this.getPeerId(update.peer_id), blocked: update.blocked});\r\n      }\r\n    });\r\n  }\r\n  /* public savePeerInstance(peerId: number, instance: any) {\r\n    if(peerId < 0) appChatsManager.saveApiChat(instance);\r\n    else appUsersManager.saveApiUser(instance);\r\n  } */\r\n\r\n  public canPinMessage(peerId: number) {\r\n    return peerId > 0 || appChatsManager.hasRights(-peerId, 'pin_messages');\r\n  }\r\n\r\n  public getPeerPhoto(peerId: number): UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto {\r\n    const photo = peerId > 0\r\n      ? appUsersManager.getUserPhoto(peerId)\r\n      : appChatsManager.getChatPhoto(-peerId);\r\n\r\n    return photo._ !== 'chatPhotoEmpty' && photo._ !== 'userProfilePhotoEmpty' ? photo : null;\r\n  }\r\n\r\n  public getPeerMigratedTo(peerId: number) {\r\n    if(peerId >= 0) {\r\n      return false;\r\n    }\r\n\r\n    let chat = appChatsManager.getChat(-peerId);\r\n    if(chat && chat.migrated_to && chat.pFlags.deactivated) {\r\n      return this.getPeerId(chat.migrated_to);\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  public getPeerTitle(peerId: number | any, plainText = false, onlyFirstName = false) {\r\n    if(!peerId) {\r\n      peerId = rootScope.myId;\r\n    }\r\n    \r\n    let peer: any = {}; \r\n    if(!isObject(peerId)) {\r\n      peer = this.getPeer(peerId);\r\n    } else peer = peerId;\r\n\r\n    let title = '';\r\n    if(peerId > 0) {\r\n      if(peer.first_name) title += peer.first_name;\r\n      if(peer.last_name) title += ' ' + peer.last_name;\r\n  \r\n      if(!title) title = peer.pFlags.deleted ? I18n.format('HiddenName', true) : peer.username;\r\n      else title = title.trim();\r\n    } else {\r\n      title = peer.title;\r\n    }\r\n\r\n    if(onlyFirstName) {\r\n      title = title.split(' ')[0];\r\n    }\r\n    \r\n    return plainText ? title : RichTextProcessor.wrapEmojiText(title);\r\n  }\r\n  \r\n  public getOutputPeer(peerId: number): Peer {\r\n    if(peerId > 0) {\r\n      return {_: 'peerUser', user_id: peerId};\r\n    }\r\n\r\n    let chatId = -peerId;\r\n    if(appChatsManager.isChannel(chatId)) {\r\n      return {_: 'peerChannel', channel_id: chatId};\r\n    }\r\n\r\n    return {_: 'peerChat', chat_id: chatId};\r\n  }\r\n\r\n  public getPeerString(peerId: number) {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUserString(peerId);\r\n    }\r\n    return appChatsManager.getChatString(-peerId);\r\n  }\r\n\r\n  public getPeerUsername(peerId: number): string {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUser(peerId).username || '';\r\n    }\r\n    return appChatsManager.getChat(-peerId).username || '';\r\n  }\r\n\r\n  public getPeer(peerId: number) {\r\n    return peerId > 0\r\n      ? appUsersManager.getUser(peerId)\r\n      : appChatsManager.getChat(-peerId)\r\n  }\r\n\r\n  public getPeerId(peerId: Peer | InputPeer | number | string): number {\r\n    if(typeof(peerId) === 'number') return peerId;\r\n    else if(isObject(peerId)) return (peerId as Peer.peerUser).user_id || -((peerId as Peer.peerChannel).channel_id || (peerId as Peer.peerChat).chat_id);\r\n    else if(!peerId) return 0;\r\n    \r\n    const isUser = (peerId as string).charAt(0) === 'u';\r\n    const peerParams = (peerId as string).substr(1).split('_');\r\n\r\n    return isUser ? +peerParams[0] : -peerParams[0] || 0;\r\n  }\r\n\r\n  public getDialogPeer(peerId: number): DialogPeer {\r\n    return {\r\n      _: 'dialogPeer',\r\n      peer: this.getOutputPeer(peerId)\r\n    };\r\n  }\r\n\r\n  public isChannel(peerId: number): boolean {\r\n    return (peerId < 0) && appChatsManager.isChannel(-peerId);\r\n  }\r\n\r\n  public isMegagroup(peerId: number) {\r\n    return (peerId < 0) && appChatsManager.isMegagroup(-peerId);\r\n  }\r\n\r\n  public isAnyGroup(peerId: number): boolean {\r\n    return (peerId < 0) && !appChatsManager.isBroadcast(-peerId);\r\n  }\r\n\r\n  public isBroadcast(peerId: number): boolean {\r\n    return this.isChannel(peerId) && !this.isMegagroup(peerId);\r\n  }\r\n\r\n  public isBot(peerId: number): boolean {\r\n    return (peerId > 0) && appUsersManager.isBot(peerId);\r\n  }\r\n\r\n  /* public getInputPeer(peerString: string): InputPeer {\r\n    var firstChar = peerString.charAt(0);\r\n    var peerParams = peerString.substr(1).split('_');\r\n    let id = +peerParams[0];\r\n\r\n    if(firstChar === 'u') {\r\n      //appUsersManager.saveUserAccess(id, peerParams[1]);\r\n\r\n      return {\r\n        _: 'inputPeerUser',\r\n        user_id: id,\r\n        access_hash: peerParams[1]\r\n      };\r\n    } else if(firstChar === 'c' || firstChar === 's') {\r\n      //appChatsManager.saveChannelAccess(id, peerParams[1]);\r\n      if(firstChar === 's') {\r\n        appChatsManager.saveIsMegagroup(id);\r\n      }\r\n\r\n      return {\r\n        _: 'inputPeerChannel',\r\n        channel_id: id,\r\n        access_hash: peerParams[1] || '0'\r\n      };\r\n    } else {\r\n      return {\r\n        _: 'inputPeerChat',\r\n        chat_id: id\r\n      };\r\n    }\r\n  } */\r\n\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId: true): Exclude<InputNotifyPeer, InputNotifyPeer.inputNotifyPeer>;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: false): InputNotifyPeer.inputNotifyPeer;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: boolean): InputNotifyPeer {\r\n    if(ignorePeerId) {\r\n      if(peerId > 0) {\r\n        return {_: 'inputNotifyUsers'};\r\n      } else {\r\n        if(appPeersManager.isBroadcast(peerId)) {\r\n          return {_: 'inputNotifyBroadcasts'};\r\n        } else {\r\n          return {_: 'inputNotifyChats'};\r\n        }\r\n      }\r\n    } else {\r\n      return {\r\n        _: 'inputNotifyPeer', \r\n        peer: this.getInputPeerById(peerId)\r\n      };\r\n    }\r\n  }\r\n\r\n  public getInputPeerById(peerId: number): InputPeer {\r\n    if(!peerId) {\r\n      return {_: 'inputPeerEmpty'};\r\n    }\r\n\r\n    if(peerId < 0) {\r\n      const chatId = -peerId;\r\n      if(!appChatsManager.isChannel(chatId)) {\r\n        return appChatsManager.getChatInputPeer(chatId);\r\n      } else {\r\n        return appChatsManager.getChannelInputPeer(chatId);\r\n      }\r\n    }\r\n\r\n    return {\r\n      _: 'inputPeerUser',\r\n      user_id: peerId,\r\n      access_hash: appUsersManager.getUser(peerId).access_hash\r\n    };\r\n  }\r\n\r\n  public getInputDialogPeerById(peerId: number): InputDialogPeer {\r\n    return {\r\n      _: 'inputDialogPeer',\r\n      peer: this.getInputPeerById(peerId)\r\n    }\r\n  }\r\n\r\n  public getPeerColorById(peerId: number, pic = true) {\r\n    if(!peerId) return '';\r\n\r\n    const idx = DialogColorsMap[(peerId < 0 ? -peerId : peerId) % 7];\r\n    const color = (pic ? DialogColors : DialogColorsFg)[idx];\r\n    return color;\r\n  }\r\n\r\n  public getPeerSearchText(peerId: number) {\r\n    let text;\r\n    if(peerId > 0) {\r\n      text = '%pu ' + appUsersManager.getUserSearchText(peerId);\r\n    } else if(peerId < 0) {\r\n      const chat = appChatsManager.getChat(-peerId);\r\n      text = '%pg ' + (chat.title || '');\r\n    }\r\n    return text;\r\n  }\r\n\r\n  public getDialogType(peerId: number): PeerType {\r\n    if(appPeersManager.isMegagroup(peerId)) {\r\n      return 'megagroup';\r\n    } else if(appPeersManager.isChannel(peerId)) {\r\n      return 'channel';\r\n    } else if(peerId < 0) {\r\n      return 'group';\r\n    } else {\r\n      return peerId === rootScope.myId ? 'saved' : 'chat';\r\n    }\r\n  }\r\n\r\n  public getDeleteButtonText(peerId: number): LangPackKey {\r\n    switch(this.getDialogType(peerId)) {\r\n      case 'channel':\r\n        return 'ChatList.Context.LeaveChannel';\r\n\r\n      case 'megagroup':\r\n        return 'ChatList.Context.LeaveGroup';\r\n\r\n      case 'group':\r\n        return 'ChatList.Context.DeleteAndExit';\r\n      \r\n      default:\r\n        return 'ChatList.Context.DeleteChat';\r\n    }\r\n  }\r\n}\r\n\r\nconst appPeersManager = new AppPeersManager();\r\nMOUNT_CLASS_TO.appPeersManager = appPeersManager;\r\nexport default appPeersManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n/* import { copy } from \"./object\";\r\n\r\nexport function listMergeSorted(list1: any[] = [], list2: any[] = []) {\r\n  const result = copy(list1);\r\n\r\n  const minId = list1.length ? list1[list1.length - 1] : 0xFFFFFFFF;\r\n  for(let i = 0; i < list2.length; i++) {\r\n    if(list2[i] < minId) {\r\n      result.push(list2[i]);\r\n    }\r\n  }\r\n\r\n  return result;\r\n} */\r\n\r\nexport const accumulate = (arr: number[], initialValue: number) => arr.reduce((acc, value) => acc + value, initialValue);\r\n\r\nexport function findAndSpliceAll<T>(array: Array<T>, verify: (value: T, index: number, arr: typeof array) => boolean) {\r\n  const out: typeof array = [];\r\n  let idx = -1;\r\n  while((idx = array.findIndex(verify)) !== -1) {\r\n    out.push(array.splice(idx, 1)[0]);\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\nexport function forEachReverse<T>(array: Array<T>, callback: (value: T, index?: number, array?: Array<T>) => void) {\r\n  for(let length = array.length, i = length - 1; i >= 0; --i) {\r\n    callback(array[i], i, array);\r\n  }\r\n};\r\n\r\nexport function insertInDescendSortedArray<T extends {[smth in K]?: number}, K extends keyof T>(array: Array<T>, element: T, property: K, pos?: number) {\r\n  if(pos === undefined) {\r\n    pos = array.indexOf(element);\r\n    if(pos !== -1) {\r\n      array.splice(pos, 1);\r\n    }\r\n  }\r\n\r\n  const sortProperty: number = element[property];\r\n  const len = array.length;\r\n  if(!len || sortProperty <= array[len - 1][property]) {\r\n    return array.push(element) - 1;\r\n  } else if(sortProperty >= array[0][property]) {\r\n    array.unshift(element);\r\n    return 0;\r\n  } else {\r\n    for(let i = 0; i < len; i++) {\r\n      if(sortProperty > array[i][property]) {\r\n        array.splice(i, 0, element);\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n\r\n  console.error('wtf', array, element);\r\n  return array.indexOf(element);\r\n}\r\n\r\nexport function filterUnique<T extends Array<any>>(arr: T): T {\r\n  return [...new Set(arr)] as T;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\n//import apiManager from '../mtproto/apiManager';\r\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport { Message, MessageFwdHeader, Peer, Update, Updates } from '../../layer';\r\nimport { logger, LogTypes } from '../logger';\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport rootScope from '../rootScope';\r\n//import networkerFactory from '../mtproto/networkerFactory';\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from './appStateManager';\r\nimport serverTimeManager from '../mtproto/serverTimeManager';\r\nimport assumeType from '../../helpers/assumeType';\r\n\r\ntype UpdatesState = {\r\n  pendingPtsUpdates: (Update & {pts: number, pts_count: number})[],\r\n  pendingSeqUpdates?: {[seq: number]: {seq: number, date: number, updates: any[]}},\r\n  syncPending: {\r\n    seqAwaiting?: number,\r\n    ptsAwaiting?: true,\r\n    timeout: number\r\n  },\r\n  syncLoading: Promise<void>,\r\n\r\n  seq?: number,\r\n  pts?: number,\r\n  date?: number,\r\n  lastPtsUpdateTime?: number\r\n};\r\n\r\nconst SYNC_DELAY = 6;\r\n\r\nexport class ApiUpdatesManager {\r\n  public updatesState: UpdatesState = {\r\n    pendingPtsUpdates: [],\r\n    pendingSeqUpdates: {},\r\n    syncPending: null,\r\n    syncLoading: null\r\n  };\r\n\r\n  private channelStates: {[channelId: number]: UpdatesState} = {};\r\n  private attached = false;\r\n\r\n  private log = logger('UPDATES', LogTypes.Error | LogTypes.Warn | LogTypes.Log/*  | LogTypes.Debug */);\r\n  private debug = DEBUG;\r\n\r\n  private setProxy() {\r\n    const self = this;\r\n    this.updatesState = new Proxy(this.updatesState, {\r\n      set: function(target: ApiUpdatesManager['updatesState'], key: keyof ApiUpdatesManager['updatesState'], value: ApiUpdatesManager['updatesState'][typeof key]) {\r\n        // @ts-ignore\r\n        target[key] = value;\r\n        self.saveUpdatesState();\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  public saveUpdatesState() {\r\n    const us = this.updatesState;\r\n    appStateManager.pushToState('updates', {\r\n      seq: us.seq,\r\n      pts: us.pts,\r\n      date: us.date\r\n    });\r\n  }\r\n\r\n  private popPendingSeqUpdate() {\r\n    const state = this.updatesState;\r\n    const nextSeq = state.seq + 1;\r\n    const pendingUpdatesData = state.pendingSeqUpdates[nextSeq];\r\n    if(!pendingUpdatesData) {\r\n      return false;\r\n    }\r\n\r\n    const updates = pendingUpdatesData.updates;\r\n    for(let i = 0, length = updates.length; i < length; ++i) {\r\n      this.saveUpdate(updates[i]);\r\n    }\r\n\r\n    state.seq = pendingUpdatesData.seq;\r\n    if(pendingUpdatesData.date && state.date < pendingUpdatesData.date) {\r\n      state.date = pendingUpdatesData.date;\r\n    }\r\n    delete state.pendingSeqUpdates[nextSeq];\r\n  \r\n    if(!this.popPendingSeqUpdate() &&\r\n      state.syncPending &&\r\n      state.syncPending.seqAwaiting &&\r\n      state.seq >= state.syncPending.seqAwaiting) {\r\n      if(!state.syncPending.ptsAwaiting) {\r\n        clearTimeout(state.syncPending.timeout);\r\n        state.syncPending = null;\r\n      } else {\r\n        delete state.syncPending.seqAwaiting;\r\n      }\r\n    }\r\n  \r\n    return true;\r\n  }\r\n\r\n  private popPendingPtsUpdate(channelId: number) {\r\n    const curState = channelId ? this.getChannelState(channelId) : this.updatesState;\r\n    if(!curState.pendingPtsUpdates.length) {\r\n      return false;\r\n    }\r\n\r\n    curState.pendingPtsUpdates.sort((a, b) => {\r\n      return a.pts - b.pts;\r\n    });\r\n    // this.log('pop update', channelId, curState.pendingPtsUpdates)\r\n  \r\n    let curPts = curState.pts;\r\n    let goodPts = 0;\r\n    let goodIndex = 0;\r\n    for(let i = 0, length = curState.pendingPtsUpdates.length; i < length; ++i) {\r\n      const update = curState.pendingPtsUpdates[i];\r\n      curPts += update.pts_count;\r\n      if(curPts >= update.pts) {\r\n        goodPts = update.pts;\r\n        goodIndex = i;\r\n      }\r\n    }\r\n  \r\n    if(!goodPts) {\r\n      return false;\r\n    }\r\n  \r\n    this.debug && this.log.debug('pop pending pts updates', goodPts, curState.pendingPtsUpdates.slice(0, goodIndex + 1));\r\n  \r\n    curState.pts = goodPts;\r\n    for(let i = 0; i <= goodIndex; ++i) {\r\n      const update = curState.pendingPtsUpdates[i];\r\n\r\n      // @ts-ignore\r\n      this.saveUpdate(update);\r\n    }\r\n    curState.pendingPtsUpdates.splice(0, goodIndex + 1);\r\n  \r\n    if(!curState.pendingPtsUpdates.length && curState.syncPending) {\r\n      if(!curState.syncPending.seqAwaiting) {\r\n        clearTimeout(curState.syncPending.timeout);\r\n        curState.syncPending = null;\r\n      } else {\r\n        delete curState.syncPending.ptsAwaiting;\r\n      }\r\n    }\r\n  \r\n    return true;\r\n  }\r\n\r\n  public forceGetDifference() {\r\n    if(!this.updatesState.syncLoading) {\r\n      this.getDifference();\r\n    }\r\n  }\r\n\r\n  public processLocalUpdate(update: Update) {\r\n    this.processUpdateMessage({\r\n      _: 'updateShort',\r\n      update\r\n    } as Updates);\r\n  }\r\n\r\n  public processUpdateMessage = (updateMessage: any, options: Partial<{\r\n    override: boolean\r\n  }> = {}) => {\r\n    // return forceGetDifference()\r\n    const processOpts = {\r\n      date: updateMessage.date,\r\n      seq: updateMessage.seq,\r\n      seqStart: updateMessage.seq_start,\r\n      //ignoreSyncLoading: options.ignoreSyncLoading\r\n    };\r\n\r\n    this.debug && this.log.debug('processUpdateMessage', updateMessage);\r\n  \r\n    switch(updateMessage._) {\r\n      case 'updatesTooLong':\r\n      case 'new_session_created':\r\n        this.forceGetDifference();\r\n        break;\r\n  \r\n      case 'updateShort':\r\n        this.processUpdate(updateMessage.update, processOpts);\r\n        break;\r\n  \r\n      case 'updateShortMessage':\r\n      case 'updateShortChatMessage': {\r\n        assumeType<Updates.updateShortChatMessage | Updates.updateShortMessage>(updateMessage);\r\n        this.debug && this.log.debug('updateShortMessage | updateShortChatMessage', {...updateMessage});\r\n        const isOut = updateMessage.pFlags.out;\r\n        const fromId = (updateMessage as Updates.updateShortChatMessage).from_id || (isOut ? rootScope.myId : (updateMessage as Updates.updateShortMessage).user_id);\r\n        const toId = (updateMessage as Updates.updateShortChatMessage).chat_id\r\n          ? -(updateMessage as Updates.updateShortChatMessage).chat_id\r\n          : ((updateMessage as Updates.updateShortMessage).user_id || rootScope.myId);\r\n  \r\n        this.processUpdate({\r\n          _: 'updateNewMessage',\r\n          message: {\r\n            _: 'message',\r\n            pFlags: updateMessage.pFlags,\r\n            id: updateMessage.id,\r\n            from_id: appPeersManager.getOutputPeer(fromId),\r\n            peer_id: appPeersManager.getOutputPeer(toId),\r\n            date: updateMessage.date,\r\n            message: updateMessage.message,\r\n            fwd_from: updateMessage.fwd_from,\r\n            reply_to: updateMessage.reply_to,\r\n            entities: updateMessage.entities\r\n          },\r\n          pts: updateMessage.pts,\r\n          pts_count: updateMessage.pts_count\r\n        }, processOpts);\r\n        break;\r\n      }\r\n  \r\n      case 'updatesCombined':\r\n      case 'updates':\r\n        appUsersManager.saveApiUsers(updateMessage.users, options.override);\r\n        appChatsManager.saveApiChats(updateMessage.chats, options.override);\r\n  \r\n        updateMessage.updates.forEach((update: Update) => {\r\n          this.processUpdate(update, processOpts);\r\n        });\r\n        break;\r\n  \r\n      default:\r\n        this.log.warn('Unknown update message', updateMessage);\r\n    }\r\n  };\r\n  \r\n  private getDifference(first = false): Promise<void> {\r\n    // this.trace('Get full diff')\r\n    const updatesState = this.updatesState;\r\n    let wasSyncing = updatesState.syncLoading;\r\n    if(!wasSyncing) {\r\n      updatesState.pendingSeqUpdates = {};\r\n      updatesState.pendingPtsUpdates = [];\r\n    }\r\n  \r\n    if(updatesState.syncPending) {\r\n      clearTimeout(updatesState.syncPending.timeout);\r\n      updatesState.syncPending = null;\r\n    }\r\n\r\n    const promise = apiManager.invokeApi('updates.getDifference', {\r\n      pts: updatesState.pts, \r\n      pts_total_limit: first /* && false  */? /* 50 */1200 : undefined,\r\n      date: updatesState.date, \r\n      qts: -1\r\n    }, {\r\n      timeout: 0x7fffffff\r\n    }).then((differenceResult) => {\r\n      this.debug && this.log.debug('Get diff result', differenceResult);\r\n\r\n      if(differenceResult._ === 'updates.differenceEmpty') {\r\n        this.debug && this.log.debug('apply empty diff', differenceResult.seq);\r\n        updatesState.date = differenceResult.date;\r\n        updatesState.seq = differenceResult.seq;\r\n        return;\r\n      }\r\n\r\n      // ! SORRY I'M SORRY I'M SORRY\r\n      if(first) {\r\n        rootScope.dispatchEvent('state_synchronizing');\r\n      }\r\n\r\n      if(differenceResult._ !== 'updates.differenceTooLong') {\r\n        appUsersManager.saveApiUsers(differenceResult.users);\r\n        appChatsManager.saveApiChats(differenceResult.chats);\r\n\r\n        // Should be first because of updateMessageID\r\n        // this.log('applying', differenceResult.other_updates.length, 'other updates')\r\n    \r\n        differenceResult.other_updates.forEach((update) => {\r\n          switch(update._) {\r\n            case 'updateChannelTooLong':\r\n            case 'updateNewChannelMessage':\r\n            case 'updateEditChannelMessage':\r\n              this.processUpdate(update);\r\n              return;\r\n          }\r\n          \r\n          this.saveUpdate(update);\r\n        });\r\n\r\n        // this.log('applying', differenceResult.new_messages.length, 'new messages')\r\n        differenceResult.new_messages.forEach((apiMessage) => {\r\n          this.saveUpdate({\r\n            _: 'updateNewMessage',\r\n            message: apiMessage,\r\n            pts: updatesState.pts,\r\n            pts_count: 0\r\n          });\r\n        });\r\n\r\n        const nextState = differenceResult._ === 'updates.difference' ? differenceResult.state : differenceResult.intermediate_state;\r\n        updatesState.seq = nextState.seq;\r\n        updatesState.pts = nextState.pts;\r\n        updatesState.date = nextState.date;\r\n      } else {\r\n        updatesState.pts = differenceResult.pts;\r\n        updatesState.date = (Date.now() / 1000 | 0) + serverTimeManager.serverTimeOffset;\r\n        delete updatesState.seq;\r\n        \r\n        this.channelStates = {};\r\n        \r\n        this.log.warn('getDifference:', differenceResult._);\r\n        rootScope.dispatchEvent('state_cleared');\r\n      }\r\n  \r\n      // this.log('apply diff', updatesState.seq, updatesState.pts)\r\n  \r\n      if(differenceResult._ === 'updates.differenceSlice') {\r\n        return this.getDifference();\r\n      } else {\r\n        this.debug && this.log.debug('finished get diff');\r\n      }\r\n    });\r\n\r\n    if(!wasSyncing) {\r\n      this.justAName(updatesState, promise);\r\n    }\r\n  \r\n    return promise;\r\n  }\r\n\r\n  private getChannelDifference(channelId: number): Promise<void> {\r\n    const channelState = this.getChannelState(channelId);\r\n    const wasSyncing = channelState.syncLoading;\r\n    if(!wasSyncing) {\r\n      channelState.pendingPtsUpdates = [];\r\n    }\r\n\r\n    if(channelState.syncPending) {\r\n      clearTimeout(channelState.syncPending.timeout);\r\n      channelState.syncPending = null;\r\n    }\r\n\r\n    //this.log.trace('Get channel diff', appChatsManager.getChat(channelId), channelState.pts);\r\n    const promise = apiManager.invokeApi('updates.getChannelDifference', {\r\n      channel: appChatsManager.getChannelInput(channelId),\r\n      filter: {_: 'channelMessagesFilterEmpty'},\r\n      pts: channelState.pts,\r\n      limit: 30\r\n    }, {timeout: 0x7fffffff}).then((differenceResult) => {\r\n      this.debug && this.log.debug('Get channel diff result', differenceResult)\r\n      channelState.pts = 'pts' in differenceResult ? differenceResult.pts : undefined;\r\n  \r\n      if(differenceResult._ === 'updates.channelDifferenceEmpty') {\r\n        this.debug && this.log.debug('apply channel empty diff', differenceResult);\r\n        return;\r\n      }\r\n  \r\n      if(differenceResult._ === 'updates.channelDifferenceTooLong') {\r\n        this.debug && this.log.debug('channel diff too long', differenceResult);\r\n        delete this.channelStates[channelId];\r\n\r\n        this.saveUpdate({_: 'updateChannelReload', channel_id: channelId});\r\n        return;\r\n      }\r\n  \r\n      appUsersManager.saveApiUsers(differenceResult.users);\r\n      appChatsManager.saveApiChats(differenceResult.chats);\r\n  \r\n      // Should be first because of updateMessageID\r\n      this.debug && this.log.debug('applying', differenceResult.other_updates.length, 'channel other updates');\r\n      differenceResult.other_updates.forEach((update) => {\r\n        this.saveUpdate(update);\r\n      });\r\n  \r\n      this.debug && this.log.debug('applying', differenceResult.new_messages.length, 'channel new messages');\r\n      differenceResult.new_messages.forEach((apiMessage) => {\r\n        this.saveUpdate({\r\n          _: 'updateNewChannelMessage',\r\n          message: apiMessage,\r\n          pts: channelState.pts,\r\n          pts_count: 0\r\n        });\r\n      });\r\n  \r\n      this.debug && this.log.debug('apply channel diff', channelState.pts);\r\n  \r\n      if(differenceResult._ === 'updates.channelDifference' &&\r\n        !differenceResult.pFlags['final']) {\r\n        return this.getChannelDifference(channelId);\r\n      } else {\r\n        this.debug && this.log.debug('finished channel get diff');\r\n      }\r\n    });\r\n\r\n    if(!wasSyncing) {\r\n      this.justAName(channelState, promise, channelId);\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  private justAName(state: UpdatesState, promise: UpdatesState['syncLoading'], channelId?: number) {\r\n    state.syncLoading = promise;\r\n    rootScope.dispatchEvent('state_synchronizing', channelId);\r\n\r\n    promise.then(() => {\r\n      state.syncLoading = null;\r\n      rootScope.dispatchEvent('state_synchronized', channelId);\r\n    }, () => {\r\n      state.syncLoading = null;\r\n    });\r\n  }\r\n  \r\n  public addChannelState(channelId: number, pts: number) {\r\n    if(!pts) {\r\n      throw new Error('Add channel state without pts ' + channelId);\r\n    }\r\n\r\n    if(!(channelId in this.channelStates)) {\r\n      this.channelStates[channelId] = {\r\n        pts,\r\n        pendingPtsUpdates: [],\r\n        syncPending: null,\r\n        syncLoading: null\r\n      };\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getChannelState(channelId: number, pts?: number) {\r\n    if(this.channelStates[channelId] === undefined) {\r\n      this.addChannelState(channelId, pts);\r\n    }\r\n\r\n    return this.channelStates[channelId];\r\n  }\r\n\r\n  private processUpdate(update: Update, options: Partial<{\r\n    date: number,\r\n    seq: number,\r\n    seqStart: number/* ,\r\n    ignoreSyncLoading: boolean */\r\n  }> = {}) {\r\n    let channelId = 0;\r\n    switch(update._) {\r\n      case 'updateNewChannelMessage':\r\n      case 'updateEditChannelMessage':\r\n        channelId = -appPeersManager.getPeerId(update.message.peer_id);\r\n        break;\r\n      /* case 'updateDeleteChannelMessages':\r\n        channelId = update.channel_id;\r\n        break; */\r\n      case 'updateChannelTooLong':\r\n        channelId = update.channel_id;\r\n        if(!(channelId in this.channelStates)) {\r\n          return false;\r\n        }\r\n        break;\r\n      default:\r\n        if('channel_id' in update && 'pts' in update) {\r\n          channelId = update.channel_id;\r\n        }\r\n        break;\r\n    }\r\n  \r\n    const {pts, pts_count} = update as Update.updateNewMessage;\r\n    const curState = channelId ? this.getChannelState(channelId, pts) : this.updatesState;\r\n  \r\n    // this.log.log('process', channelId, curState.pts, update)\r\n  \r\n    if(curState.syncLoading/*  && !options.ignoreSyncLoading */) {\r\n      return false;\r\n    }\r\n  \r\n    if(update._ === 'updateChannelTooLong') {\r\n      if(!curState.lastPtsUpdateTime ||\r\n          curState.lastPtsUpdateTime < (Date.now() - SYNC_DELAY)) {\r\n        // this.log.trace('channel too long, get diff', channelId, update)\r\n        this.getChannelDifference(channelId);\r\n      }\r\n      return false;\r\n    }\r\n  \r\n    if(update._ === 'updateNewMessage' ||\r\n        update._ === 'updateEditMessage' ||\r\n        update._ === 'updateNewChannelMessage' ||\r\n        update._ === 'updateEditChannelMessage') {\r\n      const message = update.message as Message.message;\r\n      const toPeerId = appPeersManager.getPeerId(message.peer_id);\r\n      const fwdHeader: MessageFwdHeader.messageFwdHeader = message.fwd_from || {} as any;\r\n      let reason: string;\r\n      if(message.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(message.from_id), message.pFlags.post/* || channelId*/) && (reason = 'author') ||\r\n          fwdHeader.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(fwdHeader.from_id), !!(fwdHeader.from_id as Peer.peerChannel).channel_id) && (reason = 'fwdAuthor') ||\r\n          (fwdHeader.from_id as Peer.peerChannel)?.channel_id && !appChatsManager.hasChat((fwdHeader.from_id as Peer.peerChannel).channel_id, true) && (reason = 'fwdChannel') ||\r\n          toPeerId > 0 && !appUsersManager.hasUser(toPeerId) && (reason = 'toPeer User') ||\r\n          toPeerId < 0 && !appChatsManager.hasChat(-toPeerId) && (reason = 'toPeer Chat')) {\r\n        this.log.warn('Not enough data for message update', toPeerId, reason, message);\r\n        if(channelId && appChatsManager.hasChat(channelId)) {\r\n          this.getChannelDifference(channelId);\r\n        } else {\r\n          this.forceGetDifference();\r\n        }\r\n        return false;\r\n      }\r\n    } else if(channelId && !appChatsManager.hasChat(channelId)) {\r\n      // this.log.log('skip update, missing channel', channelId, update)\r\n      return false;\r\n    }\r\n  \r\n    let popPts: boolean;\r\n    let popSeq: boolean;\r\n  \r\n    if(pts) {\r\n      const newPts = curState.pts + (pts_count || 0);\r\n      if(newPts < pts) {\r\n        this.debug && this.log.warn('Pts hole', curState, update, channelId && appChatsManager.getChat(channelId));\r\n        curState.pendingPtsUpdates.push(update as Update.updateNewMessage);\r\n        if(!curState.syncPending && !curState.syncLoading) {\r\n          curState.syncPending = {\r\n            timeout: window.setTimeout(() => {\r\n              curState.syncPending = null;\r\n\r\n              if(curState.syncLoading) {\r\n                return;\r\n              }\r\n\r\n              if(channelId) {\r\n                this.getChannelDifference(channelId);\r\n              } else {\r\n                this.getDifference();\r\n              }\r\n            }, SYNC_DELAY)\r\n          };\r\n        }\r\n\r\n        curState.syncPending.ptsAwaiting = true;\r\n        return false;\r\n      }\r\n\r\n      if(pts > curState.pts) {\r\n        curState.pts = pts;\r\n        popPts = true;\r\n  \r\n        curState.lastPtsUpdateTime = Date.now();\r\n      } else if(pts_count) {\r\n        // this.log.warn('Duplicate update', update)\r\n        return false;\r\n      }\r\n\r\n      if(channelId && options.date && this.updatesState.date < options.date) {\r\n        this.updatesState.date = options.date;\r\n      }\r\n    } else if(!channelId && options.seq > 0) {\r\n      const seq = options.seq;\r\n      const seqStart = options.seqStart || seq;\r\n  \r\n      if(seqStart !== curState.seq + 1) {\r\n        if(seqStart > curState.seq) {\r\n          this.debug && this.log.warn('Seq hole', curState, curState.syncPending && curState.syncPending.seqAwaiting);\r\n  \r\n          if(curState.pendingSeqUpdates[seqStart] === undefined) {\r\n            curState.pendingSeqUpdates[seqStart] = {seq, date: options.date, updates: []};\r\n          }\r\n          curState.pendingSeqUpdates[seqStart].updates.push(update);\r\n  \r\n          if(!curState.syncPending) {\r\n            curState.syncPending = {\r\n              timeout: window.setTimeout(() => {\r\n                curState.syncPending = null;\r\n\r\n                if(curState.syncLoading) {\r\n                  return;\r\n                }\r\n\r\n                this.getDifference();\r\n              }, SYNC_DELAY)\r\n            };\r\n          }\r\n\r\n          if(!curState.syncPending.seqAwaiting ||\r\n            curState.syncPending.seqAwaiting < seqStart) {\r\n            curState.syncPending.seqAwaiting = seqStart;\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n  \r\n      if(curState.seq !== seq) {\r\n        curState.seq = seq;\r\n        if(options.date && curState.date < options.date) {\r\n          curState.date = options.date;\r\n        }\r\n\r\n        popSeq = true;\r\n      }\r\n    }\r\n  \r\n    this.saveUpdate(update);\r\n  \r\n    if(popPts) {\r\n      this.popPendingPtsUpdate(channelId);\r\n    } else if(popSeq) {\r\n      this.popPendingSeqUpdate();\r\n    }\r\n  }\r\n\r\n  public saveUpdate(update: Update) {\r\n    //this.debug && this.log('saveUpdate', update);\r\n    rootScope.dispatchEvent(update._, update as any);\r\n  }\r\n  \r\n  public attach() {\r\n    if(this.attached) return;\r\n\r\n    //return;\r\n\r\n    this.log('attach');\r\n    \r\n    this.attached = true;\r\n\r\n    appStateManager.getState().then(_state => {\r\n      const state = _state.updates;\r\n\r\n      //rootScope.broadcast('state_synchronizing');\r\n      if(!state || !state.pts || !state.date || !state.seq) {\r\n        this.log('will get new state');\r\n\r\n        this.updatesState.syncLoading = new Promise((resolve) => {\r\n          apiManager.invokeApi('updates.getState', {}, {noErrorBox: true}).then((stateResult) => {\r\n            this.updatesState.seq = stateResult.seq;\r\n            this.updatesState.pts = stateResult.pts;\r\n            this.updatesState.date = stateResult.date;\r\n            this.saveUpdatesState();\r\n            //setTimeout(() => {\r\n              this.updatesState.syncLoading = null;\r\n              resolve();\r\n              //rootScope.broadcast('state_synchronized');\r\n            //}, 1000);\r\n        \r\n          // ! for testing\r\n          // updatesState.seq = 1\r\n          // updatesState.pts = stateResult.pts - 5000\r\n          // updatesState.date = 1\r\n          // getDifference()\r\n          });\r\n        });\r\n      } else {\r\n        // ! for testing\r\n        /* state.seq = 1;\r\n        state.pts = state.pts - 15;\r\n        state.date = 1; */\r\n        // state.pts -= 100;\r\n\r\n        Object.assign(this.updatesState, state);\r\n        \r\n        this.log('will get difference', Object.assign({}, state));\r\n        \r\n        this.getDifference(true)/* .finally(() => {\r\n          if(this.updatesState.syncLoading) {\r\n            rootScope.broadcast('state_synchronizing');\r\n          }\r\n        }) */;\r\n      }\r\n\r\n      apiManager.setUpdatesProcessor(this.processUpdateMessage);\r\n\r\n      // this.updatesState.syncLoading.then(() => {\r\n        this.setProxy();\r\n      // });\r\n    });\r\n  }\r\n}\r\n\r\nconst apiUpdatesManager = new ApiUpdatesManager();\r\nMOUNT_CLASS_TO.apiUpdatesManager = apiUpdatesManager;\r\nexport default apiUpdatesManager\r\n","export default function assumeType<T>(x: unknown): asserts x is T {\r\n  return; // ¯\\_(ツ)_/¯\r\n}\r\n"],"sourceRoot":""}