{"version":3,"sources":["webpack:///./src/helpers/schedulers/debounce.ts","webpack:///./src/config/databases/state.ts","webpack:///./src/lib/rootScope.ts","webpack:///./src/config/debug.ts","webpack:///./src/helpers/object.ts","webpack:///./src/helpers/schedulers.ts","webpack:///./src/lib/logger.ts","webpack:///./src/helpers/cancellablePromise.ts","webpack:///./src/config/modes.ts","webpack:///./src/helpers/context.ts","webpack:///./src/lib/localStorage.ts","webpack:///./src/lib/sessionStorage.ts","webpack:///./src/helpers/eventListenerBase.ts","webpack:///./src/helpers/blob.ts","webpack:///./src/helpers/random.ts","webpack:///./src/lib/idb.ts","webpack:///./src/lib/storage.ts","webpack:///./src/lib/stateStorage.ts"],"names":["debounce","fn","ms","shouldRunFirst","shouldRunLast","waitingTimeout","args","clearTimeout","setTimeout","name","version","stores","RootScope","super","_overlayIsActive","myId","idle","isIDLE","deactivated","focusPromise","Promise","resolve","focusResolve","connectionStatus","peerId","config","forwarded_count_max","edit_time_limit","pinned_dialogs_count_max","pinned_infolder_count_max","message_length_max","caption_length_max","this","addEventListener","e","id","status","darkModeMediaQuery","window","matchMedia","checkDarkMode","systemTheme","matches","dispatchEvent","setTheme","addListener","err","isNight","getTheme","colorScheme","document","head","querySelector","setAttribute","documentElement","classList","toggle","value","settings","theme","themes","find","t","rootScope","DEBUG","debug","MOUNT_CLASS_TO","self","copy","obj","Date","getTime","Array","isArray","map","el","clonedObj","constructor","prop","hasOwnProperty","deepEqual","x","y","ok","Object","keys","tx","length","every","key","defineNotNumerableProperties","names","props","writable","configurable","out","forEach","undefined","defineProperties","getObjectKeysAndSort","object","sort","ids","i","a","b","safeReplaceObject","wasObject","newObject","safeReplaceArrayInObject","v","isObject","getDeepProperty","splitted","split","o","setDeepProperty","slice","join","pop","validateInitObject","initObject","currentObject","onReplace","previousKey","safeAssign","fromObject","throttle","isPending","interval","_args","setInterval","clearInterval","pause","fastRafCallbacks","rafPromise","fastRaf","callback","push","requestAnimationFrame","currentCallbacks","cb","fastRafPromise","then","doubleRaf","LogTypes","LOG_LEVELS","None","Error","Warn","Log","Debug","_logTimer","now","dT","toFixed","logger","prefix","type","ignoreDebugReset","console","log","warn","info","error","trace","setPrefix","_prefix","setLevel","level","reduce","acc","deferredPromise","deferredHelper","isFulfilled","isRejected","notify","notifyAll","lastNotify","listeners","addNotifyListener","deferred","reject","finally","cancel","assign","Modes","test","location","search","indexOf","http","ssl","multipleConnections","asServiceWorker","isWebWorker","WorkerGlobalScope","isServiceWorker","ServiceWorkerGlobalScope","isWorker","notifyServiceWorker","all","clients","matchAll","includeUncontrolled","listener","postMessage","notifyWorker","noop","notifySomeone","bind","cache","useStorage","useCache","localStorage","getItem","JSON","parse","onlyLocal","stringified","stringify","setItem","saveLocal","removeItem","delete","enabled","set","clear","taskId","tasks","STORAGES","storage","result","payload","prototype","call","apply","proxy","sessionStorage","appStorage","EventListenerBase","reuseResults","_constructor","listenerResults","options","once","findAndSplice","l","arr","findIndex","removeEventListener","readBlobAs","blob","method","reader","FileReader","target","readBlobAsText","readBlobAsDataURL","readBlobAsUint8Array","readBlobAsArrayBuffer","buffer","Uint8Array","blobConstruct","blobParts","mimeType","safeMimeType","blobSafeMimeType","Blob","bb","BlobBuilder","blobPart","append","getBlob","arrays","8","16","Uint16Array","32","Uint32Array","nextRandomUint","bits","array","crypto","getRandomValues","randomLong","db","storeName","storageIsAvailable","openDatabase","preserve","onclose","close","createNew","openDbPromise","request","indexedDB","open","message","finished","onerror","onsuccess","event","calledNew","onabort","transaction","onversionchange","onupgradeneeded","oldVersion","newVersion","store","objectStoreNames","contains","os","createObjectStore","indexes","index","createIndex","indexName","keyPath","objectParameters","entryName","concat","getObjectStore","objectStore","idx","put","fileName","save","get","mode","perf","performance","timeout","oncomplete","results","r","requests","getAll","getPromises","Map","keysToSet","Set","saveDeferred","keysToDelete","deleteDeferred","saveThrottled","size","from","values","deleteThrottled","getThrottled","includes","getFromCache","p","catch","setToCache","add","stateStorage"],"mappings":"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","file":"0.ac2558ef551299ec1f5c.chunk.js","sourcesContent":["// * Jolly Cobra's schedulers\r\n\r\nimport { AnyToVoidFunction } from \"../../types\";\r\n\r\nexport default function debounce<F extends AnyToVoidFunction>(\r\n  fn: F,\r\n  ms: number,\r\n  shouldRunFirst = true,\r\n  shouldRunLast = true,\r\n) {\r\n  let waitingTimeout: number | null = null;\r\n\r\n  return (...args: Parameters<F>) => {\r\n    if(waitingTimeout) {\r\n      clearTimeout(waitingTimeout);\r\n      waitingTimeout = null;\r\n    } else if(shouldRunFirst) {\r\n      // @ts-ignore\r\n      fn(...args);\r\n    }\r\n\r\n    waitingTimeout = setTimeout(() => {\r\n      if(shouldRunLast) {\r\n        // @ts-ignore\r\n        fn(...args);\r\n      }\r\n\r\n      waitingTimeout = null;\r\n    }, ms) as any;\r\n  };\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from '.';\r\n\r\nconst DATABASE_STATE: Database<'session' | 'stickerSets' | 'users' | 'chats' | 'messages' | 'dialogs'> = {\r\n  name: 'tweb',\r\n  version: 7,\r\n  stores: [{\r\n    name: 'session'\r\n  }, {\r\n    name: 'stickerSets'\r\n  }, {\r\n    name: 'users'\r\n  }, {\r\n    name: 'chats'\r\n  }, {\r\n    name: 'dialogs'\r\n  }, {\r\n    name: 'messages'\r\n  }]\r\n};\r\n\r\nexport default DATABASE_STATE;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { Message, StickerSet, Update, NotifyPeer, PeerNotifySettings, ConstructorDeclMap, Config } from \"../layer\";\r\nimport type { MyDocument } from \"./appManagers/appDocsManager\";\r\nimport type { AppMessagesManager, Dialog, MessagesStorage } from \"./appManagers/appMessagesManager\";\r\nimport type { Poll, PollResults } from \"./appManagers/appPollsManager\";\r\nimport type { MyDialogFilter } from \"./storages/filters\";\r\nimport type { UserTyping } from \"./appManagers/appProfileManager\";\r\nimport type Chat from \"../components/chat/chat\";\r\nimport type { UserAuth } from \"./mtproto/mtproto_config\";\r\nimport type { State, Theme } from \"./appManagers/appStateManager\";\r\nimport type { MyDraftMessage } from \"./appManagers/appDraftsManager\";\r\nimport type { PushSubscriptionNotify } from \"./mtproto/webPushApiManager\";\r\nimport type { PushNotificationObject } from \"./serviceWorker/push\";\r\nimport type { ConnectionStatusChange } from \"./mtproto/connectionStatus\";\r\nimport EventListenerBase from \"../helpers/eventListenerBase\";\r\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\r\n\r\nexport type BroadcastEvents = {\r\n  'user_update': number,\r\n  'user_auth': UserAuth,\r\n  'peer_changed': number,\r\n  'peer_changing': Chat,\r\n  'peer_pinned_messages': {peerId: number, mids?: number[], pinned?: boolean, unpinAll?: true},\r\n  'peer_pinned_hidden': {peerId: number, maxId: number},\r\n  'peer_typings': {peerId: number, typings: UserTyping[]},\r\n  'peer_block': {peerId: number, blocked: boolean},\r\n  'peer_title_edit': number,\r\n  'peer_bio_edit': number,\r\n\r\n  'filter_delete': MyDialogFilter,\r\n  'filter_update': MyDialogFilter,\r\n  'filter_order': number[],\r\n  \r\n  'dialog_draft': {peerId: number, draft: MyDraftMessage | undefined, index: number},\r\n  'dialog_unread': {peerId: number},\r\n  'dialog_flush': {peerId: number},\r\n  'dialog_drop': {peerId: number, dialog?: Dialog},\r\n  'dialog_migrate': {migrateFrom: number, migrateTo: number},\r\n  //'dialog_top': Dialog,\r\n  'dialog_notify_settings': Dialog,\r\n  'dialogs_multiupdate': {[peerId: string]: Dialog},\r\n  'dialogs_archived_unread': {count: number},\r\n  \r\n  'history_append': {storage: MessagesStorage, peerId: number, mid: number},\r\n  'history_update': {storage: MessagesStorage, peerId: number, mid: number},\r\n  'history_reply_markup': {peerId: number},\r\n  'history_multiappend': AppMessagesManager['newMessagesToHandle'],\r\n  'history_delete': {peerId: number, msgs: {[mid: number]: true}},\r\n  'history_forbidden': number,\r\n  'history_reload': number,\r\n  'history_focus': {peerId: number, mid?: number},\r\n  //'history_request': void,\r\n  \r\n  'message_edit': {storage: MessagesStorage, peerId: number, mid: number},\r\n  'message_views': {mid: number, views: number},\r\n  'message_sent': {storage: MessagesStorage, tempId: number, tempMessage: any, mid: number},\r\n  'messages_pending': void,\r\n  'messages_read': void,\r\n  'messages_downloaded': {peerId: number, mids: number[]},\r\n  'messages_media_read': {peerId: number, mids: number[]},\r\n\r\n  'replies_updated': Message.message,\r\n\r\n  'scheduled_new': {peerId: number, mid: number},\r\n  'scheduled_delete': {peerId: number, mids: number[]},\r\n\r\n  'album_edit': {peerId: number, groupId: string, deletedMids: number[]},\r\n\r\n  'stickers_installed': StickerSet.stickerSet,\r\n  'stickers_deleted': StickerSet.stickerSet,\r\n\r\n  'audio_play': {doc: MyDocument, mid: number, peerId: number},\r\n  'audio_pause': void,\r\n  \r\n  'state_cleared': void,\r\n  'state_synchronized': number | void,\r\n  'state_synchronizing': number | void,\r\n  \r\n  'contacts_update': number,\r\n  'avatar_update': number,\r\n  'chat_full_update': number,\r\n  'poll_update': {poll: Poll, results: PollResults},\r\n  'chat_update': number,\r\n  'invalidate_participants': number,\r\n  //'channel_settings': {channelId: number},\r\n  'webpage_updated': {id: string, msgs: number[]},\r\n\r\n  'download_progress': any,\r\n  'connection_status_change': ConnectionStatusChange,\r\n  'settings_updated': {key: string, value: any},\r\n  'draft_updated': {peerId: number, threadId: number, draft: MyDraftMessage | undefined},\r\n\r\n  'event-heavy-animation-start': void,\r\n  'event-heavy-animation-end': void,\r\n\r\n  'im_mount': void,\r\n  'im_tab_change': number,\r\n\r\n  'idle': boolean,\r\n\r\n  'overlay_toggle': boolean,\r\n\r\n  'background_change': void,\r\n\r\n  'privacy_update': Update.updatePrivacy,\r\n\r\n  'notify_settings': Update.updateNotifySettings,\r\n  'notify_peer_type_settings': {key: Exclude<NotifyPeer['_'], 'notifyPeer'>, settings: PeerNotifySettings},\r\n\r\n  'language_change': string,\r\n  \r\n  'theme_change': void,\r\n\r\n  'instance_activated': void,\r\n  'instance_deactivated': void,\r\n\r\n  'push_notification_click': PushNotificationObject,\r\n  'push_init': PushSubscriptionNotify,\r\n  'push_subscribe': PushSubscriptionNotify,\r\n  'push_unsubscribe': PushSubscriptionNotify,\r\n\r\n  'emoji_recent': string\r\n};\r\n\r\nexport class RootScope extends EventListenerBase<{\r\n  [name in Update['_']]: (update: ConstructorDeclMap[name]) => void\r\n} & {\r\n  [name in keyof BroadcastEvents]: (e: BroadcastEvents[name]) => void\r\n}> {\r\n  private _overlayIsActive: boolean = false;\r\n  public myId = 0;\r\n  public idle = {\r\n    isIDLE: true,\r\n    deactivated: false,\r\n    focusPromise: Promise.resolve(),\r\n    focusResolve: () => {}\r\n  };\r\n  public connectionStatus: {[name: string]: ConnectionStatusChange} = {};\r\n  public settings: State['settings'];\r\n  public peerId = 0;\r\n  public systemTheme: Theme['name'];\r\n  public config: Partial<Config.config> = {\r\n    forwarded_count_max: 100,\r\n    edit_time_limit: 86400 * 2,\r\n    pinned_dialogs_count_max: 5,\r\n    pinned_infolder_count_max: 100,\r\n    message_length_max: 4096,\r\n    caption_length_max: 1024,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.addEventListener('peer_changed', (peerId) => {\r\n      this.peerId = peerId;\r\n    });\r\n\r\n    this.addEventListener('user_auth', (e) => {\r\n      this.myId = e.id;\r\n    });\r\n\r\n    this.addEventListener('connection_status_change', (e) => {\r\n      const status = e;\r\n      this.connectionStatus[e.name] = status;\r\n    });\r\n\r\n    this.addEventListener('idle', (isIDLE) => {\r\n      if(isIDLE) {\r\n        this.idle.focusPromise = new Promise((resolve) => {\r\n          this.idle.focusResolve = resolve;\r\n        });\r\n      } else {\r\n        this.idle.focusResolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  public setThemeListener() {\r\n    try {\r\n      const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n      const checkDarkMode = () => {\r\n        //const theme = this.getTheme();\r\n        this.systemTheme = darkModeMediaQuery.matches ? 'night' : 'day';\r\n        //const newTheme = this.getTheme();\r\n\r\n        if(this.myId) {\r\n          this.dispatchEvent('theme_change');\r\n        } else {\r\n          this.setTheme();\r\n        }\r\n      };\r\n\r\n      if('addEventListener' in darkModeMediaQuery) {\r\n        darkModeMediaQuery.addEventListener('change', checkDarkMode);\r\n      } else if('addListener' in darkModeMediaQuery) {\r\n        (darkModeMediaQuery as any).addListener(checkDarkMode);\r\n      }\r\n\r\n      checkDarkMode();\r\n    } catch(err) {\r\n\r\n    }\r\n  }\r\n\r\n  public setTheme() {\r\n    const isNight = this.getTheme().name === 'night';\r\n    const colorScheme = document.head.querySelector('[name=\"color-scheme\"]');\r\n    if(colorScheme) {\r\n      colorScheme.setAttribute('content', isNight ? 'dark' : 'light');\r\n    }\r\n\r\n    document.documentElement.classList.toggle('night', isNight);\r\n  }\r\n\r\n  get overlayIsActive() {\r\n    return this._overlayIsActive;\r\n  }\r\n\r\n  set overlayIsActive(value: boolean) {\r\n    this._overlayIsActive = value;\r\n    this.dispatchEvent('overlay_toggle', value);\r\n  }\r\n\r\n  public getTheme(name: Theme['name'] = this.settings.theme === 'system' ? this.systemTheme : this.settings.theme) {\r\n    return this.settings.themes.find(t => t.name === name);\r\n  }\r\n}\r\n\r\nconst rootScope = new RootScope();\r\nMOUNT_CLASS_TO.rootScope = rootScope;\r\nexport default rootScope;\r\n\r\n/* rootScope.addEventListener('album_edit', (e) => {\r\n  \r\n});\r\n\r\nrootScope.addEventListener<'album_edit'>('album_edit', (e) => {\r\n  \r\n}); */\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from \"./modes\";\r\n\r\nexport const DEBUG = process.env.NODE_ENV !== 'production' || Modes.debug;\r\nconst ctx: any = typeof(window) !== 'undefined' ? window : self;\r\nexport const MOUNT_CLASS_TO: any = DEBUG || true/*  && false */ ? ctx : {};\r\nexport default DEBUG;\r\n\r\n//let m = DEBUG;\r\n/* if(!DEBUG) {\r\n  ctx.sandpitTurtle = () => {\r\n    //if(!m) {\r\n      for(let i in MOUNT_CLASS_TO) {\r\n        ctx[i] = MOUNT_CLASS_TO[i];\r\n      }\r\n      //m = true;\r\n    //}\r\n  \r\n    //DEBUG = !DEBUG;\r\n  };\r\n} */\r\n\r\n/* export const superDebug = (object: any, key: string) => {\r\n  var d = object[key];\r\n  var beforeStr = '', afterStr = '';\r\n  for(var r of d) {\r\n    beforeStr += r.before.hex + '\\n';\r\n    afterStr += r.after.hex + '\\n';\r\n  }\r\n\r\n  beforeStr = beforeStr.trim();\r\n  afterStr = afterStr.trim();\r\n  //var beforeStr = d.map(r => r.before.hex).join('\\n');\r\n  //var afterStr = d.map(r => r.after.hex).join('\\n');\r\n\r\n  var dada = (name: string, str: string) => {\r\n    var a = document.createElement('a');\r\n    a.target = '_blank';\r\n    a.download = name + '.txt';\r\n    a.href = URL.createObjectURL(new Blob([str], {\r\n      type: 'text/plain'\r\n    }));\r\n    document.body.append(a);\r\n    a.click();\r\n  };\r\n\r\n  dada(key + '_' + 'before', beforeStr);\r\n  dada(key + '_' + 'after', afterStr);\r\n}\r\n\r\nMOUNT_CLASS_TO.superDebug = superDebug; */\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport function copy<T>(obj: T): T {\r\n  //in case of premitives\r\n  if(obj === null || typeof(obj) !== \"object\") {\r\n    return obj;\r\n  }\r\n \r\n  //date objects should be \r\n  if(obj instanceof Date) {\r\n    return new Date(obj.getTime()) as any;\r\n  }\r\n \r\n  //handle Array\r\n  if(Array.isArray(obj)) {\r\n    // @ts-ignore\r\n    const clonedArr: T = obj.map(el => copy(el)) as any as T;\r\n    return clonedArr;\r\n  }\r\n \r\n  //lastly, handle objects\r\n  // @ts-ignore\r\n  let clonedObj = new obj.constructor();\r\n  for(var prop in obj){\r\n    if(obj.hasOwnProperty(prop)) {\r\n      clonedObj[prop] = copy(obj[prop]);\r\n    }\r\n  }\r\n  return clonedObj;\r\n}\r\n\r\nexport function deepEqual(x: any, y: any): boolean {\r\n  const ok = Object.keys, tx = typeof x, ty = typeof y;\r\n  return x && y && tx === 'object' && tx === ty ? (\r\n    ok(x).length === ok(y).length &&\r\n      ok(x).every(key => deepEqual(x[key], y[key]))\r\n  ) : (x === y);\r\n}\r\n\r\nexport function defineNotNumerableProperties(obj: {[key: string]: any}, names: string[]) {\r\n  //const perf = performance.now();\r\n  const props = {writable: true, configurable: true};\r\n  const out: {[name: string]: typeof props} = {};\r\n  names.forEach(name => {\r\n    if(obj[name] === undefined) {\r\n      out[name] = props;\r\n    }\r\n  });\r\n  Object.defineProperties(obj, out);\r\n  //console.log('defineNotNumerableProperties time:', performance.now() - perf);\r\n}\r\n\r\nexport function getObjectKeysAndSort(object: any, sort: 'asc' | 'desc' = 'asc') {\r\n  if(!object) return [];\r\n  const ids = Object.keys(object).map(i => +i);\r\n  if(sort === 'asc') return ids.sort((a, b) => a - b);\r\n  else return ids.sort((a, b) => b - a);\r\n}\r\n\r\nexport function safeReplaceObject(wasObject: any, newObject: any) {\r\n  if(!wasObject) {\r\n    return newObject;\r\n  }\r\n\r\n  for(var key in wasObject) {\r\n    if(!newObject.hasOwnProperty(key)) {\r\n      delete wasObject[key];\r\n    }\r\n  }\r\n\r\n  for(var key in newObject) {\r\n    //if (newObject.hasOwnProperty(key)) { // useless\r\n      wasObject[key] = newObject[key];\r\n    //}\r\n  }\r\n  \r\n  return wasObject;\r\n}\r\n\r\n/**\r\n * Will be used for FILE_REFERENCE_EXPIRED\r\n * @param key \r\n * @param wasObject \r\n * @param newObject \r\n */\r\nexport function safeReplaceArrayInObject<K>(key: K, wasObject: any, newObject: any) {\r\n  if('byteLength' in newObject[key]) { // Uint8Array\r\n    newObject[key] = [...newObject[key]];\r\n  }\r\n\r\n  if(wasObject && wasObject[key] !== newObject[key]) {\r\n    wasObject[key].length = newObject[key].length;\r\n    (newObject[key] as any[]).forEach((v, i) => {\r\n      wasObject[key][i] = v;\r\n    });\r\n\r\n    /* wasObject[key].set(newObject[key]); */\r\n    newObject[key] = wasObject[key];\r\n  }\r\n}\r\n\r\nexport function isObject(object: any) {\r\n  return typeof(object) === 'object' && object !== null;\r\n}\r\n\r\nexport function getDeepProperty(object: any, key: string) {\r\n  const splitted = key.split('.');\r\n  let o: any = object;\r\n  splitted.forEach(key => {\r\n    if(!key) {\r\n      return;\r\n    }\r\n    \r\n    // @ts-ignore\r\n    o = o[key];\r\n  });\r\n  \r\n  return o;\r\n}\r\n\r\nexport function setDeepProperty(object: any, key: string, value: any) {\r\n  const splitted = key.split('.');\r\n  getDeepProperty(object, splitted.slice(0, -1).join('.'))[splitted.pop()] = value;\r\n}\r\n\r\nexport function validateInitObject(initObject: any, currentObject: any, onReplace?: (key: string) => void, previousKey?: string) {\r\n  for(const key in initObject) {\r\n    if(typeof(currentObject[key]) !== typeof(initObject[key])) {\r\n      currentObject[key] = copy(initObject[key]);\r\n      onReplace && onReplace(previousKey || key);\r\n    } else if(isObject(initObject[key])) {\r\n      validateInitObject(initObject[key], currentObject[key], onReplace, previousKey || key);\r\n    }\r\n  }\r\n}\r\n\r\nexport function safeAssign(object: any, fromObject: any) {\r\n  if(!fromObject) return;\r\n  \r\n  for(let i in fromObject) {\r\n    if(fromObject[i] !== undefined) {\r\n      object[i] = fromObject[i];\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// * Jolly Cobra's schedulers\r\nimport { AnyToVoidFunction, NoneToVoidFunction } from \"../types\";\r\nimport _debounce from './schedulers/debounce';\r\n\r\n//type Scheduler = typeof requestAnimationFrame | typeof onTickEnd | typeof runNow;\r\n\r\nconst debounce = _debounce;\r\nexport {debounce};\r\n\r\nexport function throttle<F extends AnyToVoidFunction>(\r\n  fn: F,\r\n  ms: number,\r\n  shouldRunFirst = true,\r\n) {\r\n  let interval: number | null = null;\r\n  let isPending: boolean;\r\n  let args: Parameters<F>;\r\n\r\n  return (..._args: Parameters<F>) => {\r\n    isPending = true;\r\n    args = _args;\r\n\r\n    if(!interval) {\r\n      if(shouldRunFirst) {\r\n        isPending = false;\r\n        // @ts-ignore\r\n        fn(...args);\r\n      }\r\n\r\n      interval = setInterval(() => {\r\n        if (!isPending) {\r\n          clearInterval(interval!);\r\n          interval = null;\r\n          return;\r\n        }\r\n\r\n        isPending = false;\r\n        // @ts-ignore\r\n        fn(...args);\r\n      }, ms) as any;\r\n    }\r\n  };\r\n}\r\n\r\n/* export function throttleWithRaf<F extends AnyToVoidFunction>(fn: F) {\r\n  return throttleWith(fastRaf, fn);\r\n}\r\n\r\nexport function throttleWithTickEnd<F extends AnyToVoidFunction>(fn: F) {\r\n  return throttleWith(onTickEnd, fn);\r\n}\r\n\r\nexport function throttleWithNow<F extends AnyToVoidFunction>(fn: F) {\r\n  return throttleWith(runNow, fn);\r\n}\r\n\r\nexport function throttleWith<F extends AnyToVoidFunction>(schedulerFn: Scheduler, fn: F) {\r\n  let waiting = false;\r\n  let args: Parameters<F>;\r\n\r\n  return (..._args: Parameters<F>) => {\r\n    args = _args;\r\n\r\n    if (!waiting) {\r\n      waiting = true;\r\n\r\n      schedulerFn(() => {\r\n        waiting = false;\r\n        // @ts-ignore\r\n        fn(...args);\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function onTickEnd(cb: NoneToVoidFunction) {\r\n  Promise.resolve().then(cb);\r\n}\r\n\r\nfunction runNow(fn: NoneToVoidFunction) {\r\n  fn();\r\n} */\r\n\r\nexport const pause = (ms: number) => new Promise<void>((resolve) => {\r\n  setTimeout(resolve, ms);\r\n});\r\n\r\nlet fastRafCallbacks: NoneToVoidFunction[] | undefined;\r\nexport function fastRaf(callback: NoneToVoidFunction) {\r\n  if(!fastRafCallbacks) {\r\n    fastRafCallbacks = [callback];\r\n\r\n    requestAnimationFrame(() => {\r\n      const currentCallbacks = fastRafCallbacks!;\r\n      fastRafCallbacks = undefined;\r\n      currentCallbacks.forEach((cb) => cb());\r\n    });\r\n  } else {\r\n    fastRafCallbacks.push(callback);\r\n  }\r\n}\r\n\r\nlet rafPromise: Promise<DOMHighResTimeStamp>;\r\nexport function fastRafPromise() {\r\n  if(rafPromise) return rafPromise;\r\n\r\n  rafPromise = new Promise(requestAnimationFrame);\r\n  rafPromise.then(() => {\r\n    rafPromise = undefined;\r\n  });\r\n\r\n  return rafPromise;\r\n}\r\n\r\nexport function doubleRaf() {\r\n  return new Promise<void>((resolve) => {\r\n    fastRaf(() => {\r\n      fastRaf(resolve);\r\n    });\r\n  });\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport DEBUG from \"../config/debug\";\r\n\r\nexport enum LogTypes {\r\n  None = 0,\r\n  Error = 1,\r\n  Warn = 2,\r\n  Log = 4,\r\n  Debug = 8\r\n};\r\n\r\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\r\n\r\nconst _logTimer = Date.now();\r\nfunction dT() {\r\n  return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';\r\n}\r\n\r\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error, ignoreDebugReset = false) {\r\n  if(!DEBUG && !ignoreDebugReset/*  || true */) {\r\n    type = LogTypes.Error;\r\n  }\r\n\r\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\r\n\r\n  function Log(...args: any[]) {\r\n    return type & LogTypes.Log && console.log(dT(), prefix, ...args);\r\n  }\r\n  \r\n  Log.warn = function(...args: any[]) {\r\n    return type & LogTypes.Warn && console.warn(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.info = function(...args: any[]) {\r\n    return type & LogTypes.Log && console.info(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.error = function(...args: any[]) {\r\n    return type & LogTypes.Error && console.error(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.trace = function(...args: any[]) {\r\n    return type & LogTypes.Log && console.trace(dT(), prefix, ...args);\r\n  };\r\n\r\n  /* Log.debug = function(...args: any[]) {\r\n    return level & LogLevels.debug && console.log(dT(), prefix, ...args);\r\n  }; */\r\n\r\n  Log.debug = function(...args: any[]) {\r\n    return type & LogTypes.Debug && console.debug(dT(), prefix, ...args);\r\n  };\r\n\r\n  Log.setPrefix = function(_prefix: string) {\r\n    prefix = '[' + _prefix + ']:';\r\n  };\r\n\r\n  Log.setPrefix(prefix);\r\n\r\n  Log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\r\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\r\n  };\r\n  \r\n  return Log;\r\n};\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport interface CancellablePromise<T> extends Promise<T> {\r\n  resolve?: (value: T) => void,\r\n  reject?: (...args: any[]) => void,\r\n  cancel?: () => void,\r\n\r\n  notify?: (...args: any[]) => void,\r\n  notifyAll?: (...args: any[]) => void,\r\n  lastNotify?: any,\r\n  listeners?: Array<(...args: any[]) => void>,\r\n  addNotifyListener?: (callback: (...args: any[]) => void) => void,\r\n\r\n  isFulfilled?: boolean,\r\n  isRejected?: boolean\r\n}\r\n\r\nexport function deferredPromise<T>() {\r\n  let deferredHelper: any = {\r\n    isFulfilled: false, \r\n    isRejected: false,\r\n\r\n    notify: () => {}, \r\n    notifyAll: (...args: any[]) => {\r\n      deferredHelper.lastNotify = args;\r\n      deferredHelper.listeners.forEach((callback: any) => callback(...args));\r\n    }, \r\n\r\n    lastNotify: undefined,\r\n    listeners: [],\r\n    addNotifyListener: (callback: (...args: any[]) => void) => {\r\n      if(deferredHelper.lastNotify) {\r\n        callback(...deferredHelper.lastNotify);\r\n      }\r\n\r\n      deferredHelper.listeners.push(callback);\r\n    }\r\n  };\r\n\r\n  let deferred: CancellablePromise<T> = new Promise<T>((resolve, reject) => {\r\n    deferredHelper.resolve = (value: T) => {\r\n      if(deferred.isFulfilled) return;\r\n\r\n      deferred.isFulfilled = true;\r\n      resolve(value);\r\n    };\r\n    \r\n    deferredHelper.reject = (...args: any[]) => {\r\n      if(deferred.isRejected) return;\r\n      \r\n      deferred.isRejected = true;\r\n      reject(...args);\r\n    };\r\n  });\r\n\r\n  // @ts-ignore\r\n  /* deferred.then = (resolve: (value: T) => any, reject: (...args: any[]) => any) => {\r\n    const n = deferredPromise<ReturnType<typeof resolve>>();\r\n    \r\n  }; */\r\n\r\n  deferred.finally(() => {\r\n    deferred.notify = null;\r\n    deferred.listeners.length = 0;\r\n    deferred.lastNotify = null;\r\n\r\n    if(deferred.cancel) {\r\n      deferred.cancel = () => {};\r\n    }\r\n  });\r\n\r\n  Object.assign(deferred, deferredHelper);\r\n\r\n  return deferred;\r\n}","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nconst Modes = {\r\n  test: location.search.indexOf('test=1') > 0/*  || true */,\r\n  debug: location.search.indexOf('debug=1') > 0,\r\n  http: false, //location.search.indexOf('http=1') > 0,\r\n  ssl: true, // location.search.indexOf('ssl=1') > 0 || location.protocol === 'https:' && location.search.indexOf('ssl=0') === -1,\r\n  multipleConnections: true,\r\n  asServiceWorker: false\r\n};\r\n\r\n                  \r\n                             \r\n          \r\n\r\nexport default Modes;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport const isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\r\nexport const isServiceWorker = typeof ServiceWorkerGlobalScope !== 'undefined' && self instanceof ServiceWorkerGlobalScope;\r\nexport const isWorker = isWebWorker || isServiceWorker;\r\n\r\n// в SW может быть сразу две переменных TRUE, поэтому проверяю по последней\r\n\r\nexport const getWindowClients = () => {\r\n  return (self as any as ServiceWorkerGlobalScope)\r\n  .clients\r\n  .matchAll({ includeUncontrolled: false, type: 'window' });\r\n};\r\n\r\nconst notifyServiceWorker = (all: boolean, ...args: any[]) => {\r\n  (self as any as ServiceWorkerGlobalScope)\r\n  .clients\r\n  .matchAll({ includeUncontrolled: false, type: 'window' })\r\n  .then((listeners) => {\r\n    if(!listeners.length) {\r\n      //console.trace('no listeners?', self, listeners);\r\n      return;\r\n    }\r\n\r\n    listeners.slice(all ? 0 : -1).forEach(listener => {\r\n      // @ts-ignore\r\n      listener.postMessage(...args);\r\n    });\r\n  });\r\n};\r\n\r\nconst notifyWorker = (...args: any[]) => {\r\n  // @ts-ignore\r\n  (self as any as DedicatedWorkerGlobalScope).postMessage(...args);\r\n};\r\n\r\nconst noop = () => {};\r\n\r\nexport const notifySomeone = isServiceWorker ? notifyServiceWorker.bind(null, false) : (isWebWorker ? notifyWorker : noop);\r\nexport const notifyAll = isServiceWorker ? notifyServiceWorker.bind(null, true) : (isWebWorker ? notifyWorker : noop);\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from '../config/modes';\r\nimport { notifySomeone, isWorker } from '../helpers/context';\r\nimport { WorkerTaskTemplate } from '../types';\r\n//import { stringify } from '../helpers/json';\r\n\r\nclass LocalStorage<Storage extends Record<string, any>> {\r\n  private prefix = '';\r\n  private cache: Partial<Storage> = {};\r\n  private useStorage = true;\r\n\r\n  constructor(/* private preserveKeys: (keyof Storage)[] */) {\r\n    if(Modes.test) {\r\n      this.prefix = 't_';\r\n    }\r\n  }\r\n\r\n  public get<T extends keyof Storage>(key: T, useCache = true): Storage[T] {\r\n    if(this.cache.hasOwnProperty(key) && useCache) {\r\n      return this.cache[key];\r\n    } else if(this.useStorage) {\r\n      let value: Storage[T];\r\n      try {\r\n        value = localStorage.getItem(this.prefix + key as string) as any;\r\n      } catch(err) {\r\n        this.useStorage = false;\r\n      }\r\n\r\n      if(value !== null) {\r\n        try {\r\n          value = JSON.parse(value);\r\n        } catch(err) {\r\n          //console.error(err);\r\n        }\r\n      } else {\r\n        value = undefined;\r\n      }\r\n\r\n      return value;\r\n    }/*  else {\r\n      throw 'something went wrong';\r\n    } */\r\n  }\r\n\r\n  public set(obj: Partial<Storage>, onlyLocal = false) {\r\n    for(const key in obj) {\r\n      if(obj.hasOwnProperty(key)) {\r\n        const value = obj[key];\r\n        this.cache[key] = value;\r\n\r\n        if(this.useStorage && !onlyLocal) {\r\n          try {\r\n            const stringified = JSON.stringify(value);\r\n            localStorage.setItem(this.prefix + key, stringified);\r\n          } catch(err) {\r\n            this.useStorage = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public delete(key: keyof Storage, saveLocal = false) {\r\n    // ! it is needed here\r\n    key = '' + key;\r\n\r\n    if(!saveLocal) {\r\n      delete this.cache[key];\r\n    }\r\n    \r\n    //if(this.useStorage) {\r\n      try {\r\n        localStorage.removeItem(this.prefix + key);\r\n      } catch(err) {\r\n        \r\n      }\r\n    //}\r\n  }\r\n\r\n  /* public clear(preserveKeys: (keyof Storage)[] = this.preserveKeys) {\r\n    // if(this.useStorage) {\r\n      try {\r\n        let obj: Partial<Storage> = {};\r\n        if(preserveKeys) {\r\n          preserveKeys.forEach(key => {\r\n            const value = this.get(key);\r\n            if(value !== undefined) {\r\n              obj[key] = value;\r\n            }\r\n          });\r\n        }\r\n        \r\n        localStorage.clear();\r\n\r\n        if(preserveKeys) {\r\n          this.set(obj);\r\n        }\r\n      } catch(err) {\r\n\r\n      }\r\n    // }\r\n  } */\r\n\r\n  public clear() {\r\n    const keys: string[] = ['dc', 'server_time_offset', 'xt_instance', 'user_auth', 'state_id'];\r\n    for(let i = 1; i <= 5; ++i) {\r\n      keys.push(`dc${i}_server_salt`);\r\n      keys.push(`dc${i}_auth_key`);\r\n    }\r\n\r\n    for(let key of keys) {\r\n      this.delete(key, true);\r\n    }\r\n  }\r\n\r\n  public toggleStorage(enabled: boolean) {\r\n    this.useStorage = enabled;\r\n\r\n    if(!enabled) {\r\n      this.clear();\r\n    } else {\r\n      return this.set(this.cache);\r\n    }\r\n  }\r\n}\r\n\r\nexport interface LocalStorageProxyTask extends WorkerTaskTemplate {\r\n  type: 'localStorageProxy',\r\n  payload: {\r\n    type: 'set' | 'get' | 'delete' | 'clear' | 'toggleStorage',\r\n    args: any[]\r\n  }\r\n};\r\n\r\nexport interface LocalStorageProxyTaskResponse extends WorkerTaskTemplate {\r\n  type: 'localStorageProxy',\r\n  payload: any\r\n};\r\n\r\nexport default class LocalStorageController<Storage extends Record<string, any>> {\r\n  private static STORAGES: LocalStorageController<any>[] = [];\r\n  private taskId = 0;\r\n  private tasks: {[taskID: number]: (result: any) => void} = {};\r\n  //private log = (...args: any[]) => console.log('[SW LS]', ...args);\r\n  //private log = (...args: any[]) => {};\r\n\r\n  private storage: LocalStorage<Storage>;\r\n\r\n  constructor(/* private preserveKeys: (keyof Storage)[] = [] */) {\r\n    LocalStorageController.STORAGES.push(this);\r\n\r\n    if(!isWorker) {\r\n      this.storage = new LocalStorage(/* preserveKeys */);\r\n    }\r\n  }\r\n\r\n  public finishTask(taskId: number, result: any) {\r\n    //this.log('finishTask:', taskID, result, Object.keys(this.tasks));\r\n\r\n    if(!this.tasks.hasOwnProperty(taskId)) {\r\n      //this.log('no such task:', taskID, result);\r\n      return;\r\n    }\r\n\r\n    this.tasks[taskId](result);\r\n    delete this.tasks[taskId];\r\n  }\r\n\r\n  private proxy<T>(type: LocalStorageProxyTask['payload']['type'], ...args: LocalStorageProxyTask['payload']['args']) {\r\n    return new Promise<T>((resolve, reject) => {\r\n      if(isWorker) {\r\n        const taskId = this.taskId++;\r\n\r\n        this.tasks[taskId] = resolve;\r\n        const task: LocalStorageProxyTask = {\r\n          type: 'localStorageProxy', \r\n          id: taskId,\r\n          payload: {\r\n            type,\r\n            args\r\n          }\r\n        };\r\n\r\n        notifySomeone(task);\r\n      } else {\r\n        args = Array.prototype.slice.call(args);\r\n\r\n        // @ts-ignore\r\n        const result: any = this.storage[type].apply(this.storage, args as any);\r\n        resolve(result);\r\n      }\r\n    });\r\n  }\r\n\r\n  public get<T extends keyof Storage>(key: T, useCache?: boolean) {\r\n    return this.proxy<Storage[T]>('get', key, useCache);\r\n  }\r\n\r\n  public set(obj: Partial<Storage>, onlyLocal?: boolean) {\r\n    return this.proxy<void>('set', obj, onlyLocal);\r\n  }\r\n\r\n  public delete(key: keyof Storage, saveLocal?: boolean) {\r\n    return this.proxy<void>('delete', key, saveLocal);\r\n  }\r\n\r\n  public clear(/* preserveKeys?: (keyof Storage)[] */) {\r\n    return this.proxy<void>('clear'/* , preserveKeys */);\r\n  }\r\n\r\n  public toggleStorage(enabled: boolean) {\r\n    return this.proxy<void>('toggleStorage', enabled);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { AppInstance } from './mtproto/singleInstance';\r\nimport type { UserAuth } from './mtproto/mtproto_config';\r\nimport type { DcId } from '../types';\r\nimport { MOUNT_CLASS_TO } from '../config/debug';\r\nimport LocalStorageController from './localStorage';\r\n\r\nconst sessionStorage = new LocalStorageController<{\r\n  dc: DcId,\r\n  user_auth: UserAuth,\r\n  state_id: number,\r\n  dc1_auth_key: string,\r\n  dc2_auth_key: string,\r\n  dc3_auth_key: string,\r\n  dc4_auth_key: string,\r\n  dc5_auth_key: string,\r\n  dc1_server_salt: string,\r\n  dc2_server_salt: string,\r\n  dc3_server_salt: string,\r\n  dc4_server_salt: string,\r\n  dc5_server_salt: string,\r\n  server_time_offset: number,\r\n  xt_instance: AppInstance,\r\n  kz_version: 'K' | 'Z',\r\n  tgme_sync: {\r\n    canRedirect: boolean,\r\n    ts: number\r\n  }\r\n}>(/* ['kz_version'] */);\r\nMOUNT_CLASS_TO.appStorage = sessionStorage;\r\nexport default sessionStorage;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n//import { MOUNT_CLASS_TO } from \"../config/debug\";\r\nimport type { ArgumentTypes, SuperReturnType } from \"../types\";\r\n\r\n// class EventSystem {\r\n//   wm: WeakMap<any, Record<any, Set<any>>> = new WeakMap();\r\n\r\n//   add(target: any, event: any, listener: any) {\r\n//     let listeners = this.wm.get(target);\r\n//     if (listeners === undefined) {\r\n//         listeners = {};\r\n//     }\r\n//     let listenersForEvent = listeners[event];\r\n//     if (listenersForEvent === undefined) {\r\n//         listenersForEvent = new Set();\r\n//     }\r\n//     listenersForEvent.add(listener);\r\n//     listeners[event] = listenersForEvent;\r\n//     //target.addEventListener(event, listener);\r\n//     this.wm.set(target, listeners);\r\n//   };\r\n\r\n//   remove(target: any, event: any, listener: any) {\r\n//     let listeners = this.wm.get(target);\r\n//     if (!listeners) return;\r\n//     let listenersForEvent = listeners[event];\r\n//     if (!listenersForEvent) return;\r\n//     listenersForEvent.delete(listener);\r\n//   };\r\n  \r\n//   /* fire(target, event) {\r\n//      let listeners = this.wm.get(target);\r\n//      if (!listeners) return;\r\n//      let listenersForEvent = listeners[event];\r\n//      if (!listenersForEvent) return;\r\n//      for (let handler of handlers) {\r\n//          setTimeout(handler, 0, event, target); // we use a setTimeout here because we want event triggering to be asynchronous. \r\n//      }\r\n//   }; */\r\n// }\r\n\r\n// console.log = () => {};\r\n\r\n// const e = new EventSystem();\r\n// MOUNT_CLASS_TO.e = e;\r\n\r\n/**\r\n * Better not to remove listeners during setting\r\n * Should add listener callback only once\r\n */\r\n\r\n// type EventLitenerCallback<T> = (data: T) => \r\n// export default class EventListenerBase<Listeners extends {[name: string]: Function}> {\r\nexport default class EventListenerBase<Listeners extends Record<string, Function>> {\r\n  protected listeners: Partial<{\r\n    [k in keyof Listeners]: Array<{callback: Listeners[k], options: boolean | AddEventListenerOptions}>\r\n  }>;\r\n  protected listenerResults: Partial<{\r\n    [k in keyof Listeners]: ArgumentTypes<Listeners[k]>\r\n  }>;\r\n\r\n  private reuseResults: boolean;\r\n\r\n  constructor(reuseResults?: boolean) {\r\n    this._constructor(reuseResults);\r\n  }\r\n\r\n  public _constructor(reuseResults = false): any {\r\n    this.reuseResults = reuseResults;\r\n    this.listeners = {};\r\n    this.listenerResults = {};\r\n  }\r\n\r\n  public addEventListener<T extends keyof Listeners>(name: T, callback: Listeners[T], options?: boolean | AddEventListenerOptions) {\r\n    (this.listeners[name] ?? (this.listeners[name] = [])).push({callback, options}); // ! add before because if you don't, you won't be able to delete it from callback\r\n\r\n    if(this.listenerResults.hasOwnProperty(name)) {\r\n      callback(...this.listenerResults[name]);\r\n      \r\n      if((options as AddEventListenerOptions)?.once) {\r\n        this.listeners[name].pop();\r\n        return;\r\n      }\r\n    }\r\n    \r\n    //e.add(this, name, {callback, once});\r\n  }\r\n\r\n  public addMultipleEventsListeners(obj: {\r\n    [name in keyof Listeners]?: Listeners[name]\r\n  }) {\r\n    for(const i in obj) {\r\n      this.addEventListener(i, obj[i]);\r\n    }\r\n  }\r\n\r\n  public removeEventListener<T extends keyof Listeners>(name: T, callback: Listeners[T], options?: boolean | AddEventListenerOptions) {\r\n    if(this.listeners[name]) {\r\n      this.listeners[name].findAndSplice(l => l.callback === callback);\r\n    }\r\n    //e.remove(this, name, callback);\r\n  }\r\n\r\n  // * must be protected, but who cares\r\n  public dispatchEvent<T extends keyof Listeners>(name: T, ...args: ArgumentTypes<Listeners[T]>) {\r\n    if(this.reuseResults) {\r\n      this.listenerResults[name] = args;\r\n    }\r\n\r\n    const arr: Array<SuperReturnType<Listeners[typeof name]>> = [];\r\n\r\n    /* let a = e.wm.get(this)[name];\r\n    if(!a) return arr;\r\n    const listeners = [...a]; */\r\n    const listeners = this.listeners[name];\r\n    if(listeners) {\r\n      // ! this one will guarantee execution even if delete another listener during setting\r\n      const left = listeners.slice();\r\n      left.forEach((listener) => {\r\n        const index = listeners.findIndex((l) => l.callback === listener.callback);\r\n        if(index === -1) {\r\n          return;\r\n        }\r\n\r\n        arr.push(listener.callback(...args));\r\n\r\n        if((listener.options as AddEventListenerOptions)?.once) {\r\n          this.removeEventListener(name, listener.callback);\r\n        }\r\n      });\r\n\r\n      /* for(let i = 0, length = listeners.length; i < length; ++i) {\r\n        const listener = listeners[i];\r\n        arr.push(listener.callback(...args));\r\n\r\n        if(listener.once) {\r\n          listeners.splice(i, 1);\r\n          --i;\r\n          --length;\r\n        }\r\n      } */\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  public cleanup() {\r\n    this.listeners = {}; \r\n    this.listenerResults = {};\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport function readBlobAs(blob: Blob, method: 'readAsText'): Promise<string>;\r\nexport function readBlobAs(blob: Blob, method: 'readAsDataURL'): Promise<string>;\r\nexport function readBlobAs(blob: Blob, method: 'readAsArrayBuffer'): Promise<ArrayBuffer>;\r\nexport function readBlobAs(blob: Blob, method: 'readAsArrayBuffer' | 'readAsText' | 'readAsDataURL'): Promise<any> {\r\n  return new Promise<any>((resolve) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('loadend', (e) => resolve(e.target.result));\r\n    reader[method](blob);\r\n  });\r\n}\r\n\r\nexport function readBlobAsText(blob: Blob) {\r\n  return readBlobAs(blob, 'readAsText');\r\n}\r\n\r\nexport function readBlobAsDataURL(blob: Blob) {\r\n  return readBlobAs(blob, 'readAsDataURL');\r\n}\r\n\r\nexport function readBlobAsArrayBuffer(blob: Blob) {\r\n  return readBlobAs(blob, 'readAsArrayBuffer');\r\n}\r\n\r\nexport function readBlobAsUint8Array(blob: Blob) {\r\n  return readBlobAsArrayBuffer(blob).then(buffer => new Uint8Array(buffer));\r\n}\r\n\r\nexport function blobConstruct(blobParts: any, mimeType: string = ''): Blob {\r\n  let blob;\r\n  const safeMimeType = blobSafeMimeType(mimeType);\r\n  try {\r\n    blob = new Blob(blobParts, {type: safeMimeType});\r\n  } catch(e) {\r\n    // @ts-ignore\r\n    let bb = new BlobBuilder;\r\n    blobParts.forEach((blobPart: any) => {\r\n      bb.append(blobPart);\r\n    });\r\n    blob = bb.getBlob(safeMimeType);\r\n  }\r\n  return blob;\r\n}\r\n\r\n// https://www.iana.org/assignments/media-types/media-types.xhtml\r\nexport function blobSafeMimeType(mimeType: string) {\r\n  if([\r\n    'image/jpeg',\r\n    'image/png',\r\n    'image/gif',\r\n    'image/webp',\r\n    'image/bmp',\r\n    'video/mp4',\r\n    'video/webm',\r\n    'video/quicktime',\r\n    'audio/ogg',\r\n    'audio/mpeg',\r\n    'audio/mp4',\r\n    'application/json',\r\n    'application/pdf'\r\n  ].indexOf(mimeType) === -1) {\r\n    return 'application/octet-stream';\r\n  }\r\n\r\n  return mimeType;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nconst arrays = {\r\n  8: new Uint8Array(1),\r\n  16: new Uint16Array(1),\r\n  32: new Uint32Array(1),\r\n};\r\nexport function nextRandomUint(bits: 8 | 16 | 32) {\r\n  const array = arrays[bits];\r\n  crypto.getRandomValues(array);\r\n  return array[0];\r\n}\r\n\r\nexport function randomLong() {\r\n  return '' + nextRandomUint(32) + nextRandomUint(32) % 0xFFFFFF;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from '../config/databases';\r\nimport Modes from '../config/modes';\r\nimport { blobConstruct } from '../helpers/blob';\r\nimport { safeAssign } from '../helpers/object';\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\r\n */\r\nexport type IDBIndex = {\r\n  indexName: string,\r\n  keyPath: string,\r\n  objectParameters: IDBIndexParameters\r\n};\r\n\r\nexport type IDBStore = {\r\n  name: string, \r\n  indexes?: IDBIndex[]\r\n};\r\n\r\nexport type IDBOptions = {\r\n  name?: string,\r\n  storeName: string,\r\n  stores?: IDBStore[],\r\n  version?: number\r\n};\r\n\r\nconst DEBUG = false;\r\n\r\nexport default class IDBStorage<T extends Database<any>> {\r\n  private static STORAGES: IDBStorage<Database<any>>[] = [];\r\n  private openDbPromise: Promise<IDBDatabase>;\r\n  private db: IDBDatabase;\r\n  private storageIsAvailable = true;\r\n\r\n  private log: ReturnType<typeof logger>;\r\n  \r\n  private name: string;\r\n  private version: number;\r\n  private stores: IDBStore[];\r\n  private storeName: T['stores'][0]['name'];\r\n\r\n  constructor(db: T, storeName: typeof db['stores'][0]['name']) {\r\n    safeAssign(this, db);\r\n\r\n    if(Modes.test) {\r\n      this.name += '_test';\r\n    }\r\n\r\n    this.storeName = storeName;\r\n\r\n    this.log = logger('IDB-' + this.storeName);\r\n\r\n    this.openDatabase(true);\r\n\r\n    IDBStorage.STORAGES.push(this);\r\n  }\r\n\r\n  public static closeDatabases(preserve?: IDBStorage<Database<any>>) {\r\n    this.STORAGES.forEach(storage => {\r\n      if(preserve && preserve === storage) {\r\n        return;\r\n      }\r\n\r\n      const db = storage.db;\r\n      if(db) {\r\n        db.onclose = () => {};\r\n        db.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ! WARNING ! function requires at least one opened connection\r\n   */\r\n  /* public static clearObjectStores() {\r\n    const storage = this.STORAGES[0];\r\n    this.closeDatabases(storage);\r\n\r\n    const names = Array.from(storage.db.objectStoreNames);\r\n    const promises = names.map(name => storage.clear(name));\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  /* public static deleteDatabase() {\r\n    this.closeDatabases();\r\n\r\n    const storages = this.STORAGES;\r\n    const dbNames = Array.from(new Set(storages.map(storage => storage.name)));\r\n    const promises = dbNames.map(dbName => {\r\n      return new Promise<void>((resolve, reject) => {\r\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\r\n  \r\n        deleteRequest.onerror = () => {\r\n          reject();\r\n        };\r\n  \r\n        deleteRequest.onsuccess = () => {\r\n          resolve();\r\n        };\r\n      });\r\n    });\r\n\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  public isAvailable() {\r\n    return this.storageIsAvailable;\r\n  }\r\n\r\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\r\n    if(this.openDbPromise && !createNew) {\r\n      return this.openDbPromise;\r\n    }\r\n\r\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\r\n      const os = db.createObjectStore(store.name);\r\n\r\n      if(store.indexes?.length) {\r\n        for(const index of store.indexes) {\r\n          os.createIndex(index.indexName, index.keyPath, index.objectParameters);\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      var request = indexedDB.open(this.name, this.version);\r\n\r\n      if(!request) {\r\n        return Promise.reject();\r\n      }\r\n    } catch(error) {\r\n      this.log.error('error opening db', error.message)\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    let finished = false;\r\n    setTimeout(() => {\r\n      if(!finished) {\r\n        request.onerror({type: 'IDB_CREATE_TIMEOUT'} as Event);\r\n      }\r\n    }, 3000);\r\n\r\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\r\n      request.onsuccess = (event) => {\r\n        finished = true;\r\n        const db = request.result;\r\n        let calledNew = false;\r\n\r\n        this.log('Opened');\r\n  \r\n        db.onerror = (error) => {\r\n          this.storageIsAvailable = false;\r\n          this.log.error('Error creating/accessing IndexedDB database', error);\r\n          reject(error);\r\n        };\r\n\r\n        db.onclose = (e) => {\r\n          this.log.error('closed:', e);\r\n          !calledNew && this.openDatabase();\r\n        };\r\n\r\n        db.onabort = (e) => {\r\n          this.log.error('abort:', e);\r\n          const transaction = e.target as IDBTransaction;\r\n          \r\n          this.openDatabase(calledNew = true);\r\n\r\n          if(transaction.onerror) {\r\n            transaction.onerror(e);\r\n          }\r\n\r\n          db.close();\r\n        };\r\n\r\n        db.onversionchange = (e) => {\r\n          this.log.error('onversionchange, lol?');\r\n        };\r\n\r\n        resolve(this.db = db);\r\n      };\r\n  \r\n      request.onerror = (event) => {\r\n        finished = true;\r\n        this.storageIsAvailable = false;\r\n        this.log.error('Error creating/accessing IndexedDB database', event);\r\n        reject(event);\r\n      };\r\n  \r\n      request.onupgradeneeded = (event) => {\r\n        finished = true;\r\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\r\n\r\n        // @ts-ignore\r\n        var db = event.target.result as IDBDatabase;\r\n        this.stores.forEach((store) => {\r\n          /* if(db.objectStoreNames.contains(store.name)) {\r\n            //if(event.oldVersion === 1) {\r\n              db.deleteObjectStore(store.name);\r\n            //}\r\n          } */\r\n    \r\n          if(!db.objectStoreNames.contains(store.name)) {\r\n            createObjectStore(db, store);\r\n          }\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  public delete(entryName: string | string[]): Promise<void> {\r\n    //return Promise.resolve();\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.delete(entryName));\r\n    }, DEBUG ? 'delete: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public clear(storeName?: IDBStorage<T>['storeName']) {\r\n    return this.getObjectStore('readwrite', (objectStore) => objectStore.clear(), DEBUG ? 'clear' : '', storeName);\r\n  }\r\n\r\n  public save(entryName: string | string[], value: any | any[]) {\r\n    // const handleError = (error: Error) => {\r\n    //   this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\r\n    //   if((!error || error.name === 'InvalidStateError')/*  && false */) {\r\n    //     setTimeout(() => {\r\n    //       this.save(entryName, value);\r\n    //     }, 2e3);\r\n    //   } else {\r\n    //     //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\r\n    //   }\r\n    // };\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n      value = [].concat(value);\r\n    }\r\n    \r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName, idx) => objectStore.put(value[idx], entryName));\r\n    }, DEBUG ? 'save: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct([blob]) as Blob;\r\n    }\r\n\r\n    return this.save(fileName, blob);\r\n  }\r\n\r\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\r\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    if(!(blob instanceof Blob)) {\r\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\r\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\r\n      return this.storagePutB64String(db, fileName, address).then(() => {\r\n        return blob;\r\n      });\r\n    }\r\n\r\n    try {\r\n      var reader = new FileReader();\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    let promise = new Promise<Blob>((resolve, reject) => {\r\n      reader.onloadend = () => {\r\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\r\n          resolve(blob);\r\n        }, reject);\r\n      }\r\n  \r\n      reader.onerror = reject;\r\n    });\r\n    \r\n\r\n    try {\r\n      reader.readAsDataURL(blob);\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\r\n    try {\r\n      var objectStore = db.transaction([this.storeName], 'readwrite')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.put(b64string, fileName);\r\n    } catch(error) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = function(event) {\r\n        resolve();\r\n      };\r\n  \r\n      request.onerror = reject;\r\n    });\r\n  }\r\n\r\n  public getBlobSize(blob: any) {\r\n    return blob.size || blob.byteLength || blob.length;\r\n  } */\r\n\r\n  public get<T>(entryName: string[]): Promise<T[]>;\r\n  public get<T>(entryName: string): Promise<T>;\r\n  public get<T>(entryName: string | string[]): Promise<T> | Promise<T[]> {\r\n    //return Promise.reject();\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore<T>('readonly', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.get(entryName));\r\n    }, DEBUG ? 'get: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  private getObjectStore<T>(mode: IDBTransactionMode, objectStore: (objectStore: IDBObjectStore) => IDBRequest | IDBRequest[], log?: string, storeName = this.storeName) {\r\n    let perf: number;\r\n\r\n    if(log) {\r\n      perf = performance.now();\r\n      this.log(log + ': start');\r\n    }\r\n\r\n    return this.openDatabase().then((db) => {\r\n      return new Promise<T>((resolve, reject) => {\r\n        /* if(mode === 'readwrite') {\r\n          return;\r\n        } */\r\n\r\n        const transaction = db.transaction([storeName], mode);\r\n\r\n        transaction.onerror = (e) => {\r\n          clearTimeout(timeout);\r\n          reject(transaction.error);\r\n        };\r\n  \r\n        transaction.oncomplete = (e) => {\r\n          clearTimeout(timeout);\r\n\r\n          if(log) {\r\n            this.log(log + ': end', performance.now() - perf);\r\n          }\r\n\r\n          const results = r.map(r => r.result);\r\n          resolve(isArray ? results : results[0]);\r\n        };\r\n  \r\n        const timeout = setTimeout(() => {\r\n          this.log.error('transaction not finished', transaction);\r\n        }, 10000);\r\n  \r\n        /* transaction.addEventListener('abort', (e) => {\r\n          //handleError();\r\n          this.log.error('IndexedDB: transaction abort!', transaction.error);\r\n        }); */\r\n  \r\n        const requests = objectStore(transaction.objectStore(storeName));\r\n\r\n        const isArray = Array.isArray(requests);\r\n        const r: IDBRequest[] = isArray ? requests : [].concat(requests) as any;\r\n\r\n        // const length = r.length;\r\n        // /* let left = length;\r\n\r\n        // const onRequestFinished = (error?: Error) => {\r\n        //   if(!--left) {\r\n        //     resolve(result);\r\n        //     clearTimeout(timeout);\r\n        //   }\r\n        // }; */\r\n\r\n        // for(let i = 0; i < length; ++i) {\r\n        //   const request = r[i];\r\n        //   request.onsuccess = () => {\r\n        //     onRequestFinished();\r\n        //   };\r\n\r\n        //   request.onerror = (e) => {\r\n        //     onRequestFinished(transaction.error);\r\n        //   };\r\n        // }\r\n      });\r\n    });\r\n  }\r\n\r\n  public getAll<T>(): Promise<T[]> {\r\n    return this.getObjectStore<T[]>('readonly', (objectStore) => objectStore.getAll(), DEBUG ? 'getAll' : '');\r\n  }\r\n\r\n  /* public getAllKeys(): Promise<Array<string>> {\r\n    console.time('getAllEntries');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.getAllKeys();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var result = event.target.result;\r\n          resolve(result);\r\n          console.timeEnd('getAllEntries');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public isFileExists(fileName: string): Promise<boolean> {\r\n    console.time('isFileExists');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.openCursor(fileName);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var cursor = event.target.result;\r\n          resolve(!!cursor);\r\n          console.timeEnd('isFileExists');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public getFileWriter(fileName: string, mimeType: string) {\r\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  } */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from \"../config/databases\";\r\n//import DATABASE_SESSION from \"../config/databases/session\";\r\nimport { CancellablePromise, deferredPromise } from \"../helpers/cancellablePromise\";\r\nimport { throttle } from \"../helpers/schedulers\";\r\n//import { WorkerTaskTemplate } from \"../types\";\r\nimport IDBStorage from \"./idb\";\r\n\r\nfunction noop() {}\r\n\r\n/* export interface LocalStorageProxySetTask extends WorkerTaskTemplate {\r\n  type: 'localStorageProxy',\r\n  payload: {\r\n    type: 'set',\r\n    keys: string[],\r\n    values: any[]\r\n  }\r\n};\r\n\r\nexport interface LocalStorageProxyDeleteTask extends WorkerTaskTemplate {\r\n  type: 'localStorageProxy',\r\n  payload: {\r\n    type: 'delete',\r\n    keys: string[]\r\n  }\r\n}; */\r\n\r\nexport default class AppStorage<Storage extends Record<string, any>, T extends Database<any>/* Storage extends {[name: string]: any} *//* Storage extends Record<string, any> */> {\r\n  private static STORAGES: AppStorage<any, Database<any>>[] = [];\r\n  private storage: IDBStorage<T>;//new CacheStorageController('session');\r\n\r\n  //private cache: Partial<{[key: string]: Storage[typeof key]}> = {};\r\n  private cache: Partial<Storage> = {};\r\n  private useStorage = true;\r\n\r\n  private getPromises: Map<keyof Storage, CancellablePromise<Storage[keyof Storage]>> = new Map();\r\n  private getThrottled: () => void;\r\n\r\n  private keysToSet: Set<keyof Storage> = new Set();\r\n  private saveThrottled: () => void;\r\n  private saveDeferred = deferredPromise<void>();\r\n\r\n  private keysToDelete: Set<keyof Storage> = new Set();\r\n  private deleteThrottled: () => void;\r\n  private deleteDeferred = deferredPromise<void>();\r\n\r\n  constructor(private db: T, private storeName: typeof db['stores'][number]['name']) {\r\n    this.storage = new IDBStorage<T>(db, storeName);\r\n\r\n    if(AppStorage.STORAGES.length) {\r\n      this.useStorage = AppStorage.STORAGES[0].useStorage;\r\n    }\r\n\r\n    AppStorage.STORAGES.push(this);\r\n\r\n    this.saveThrottled = throttle(async() => {\r\n      const deferred = this.saveDeferred;\r\n      this.saveDeferred = deferredPromise<void>();\r\n\r\n      const set = this.keysToSet;\r\n      if(set.size) {\r\n        const keys = Array.from(set.values()) as string[];\r\n        set.clear();\r\n\r\n        try {\r\n          //console.log('setItem: will set', key/* , value */);\r\n          //await this.cacheStorage.delete(key); // * try to prevent memory leak in Chrome leading to 'Unexpected internal error.'\r\n          //await this.storage.save(key, new Response(value, {headers: {'Content-Type': 'application/json'}}));\r\n\r\n          const values = keys.map(key => this.cache[key]);\r\n          /* if(db === DATABASE_SESSION && !('localStorage' in self)) { // * support legacy Webogram's localStorage\r\n            self.postMessage({\r\n              type: 'localStorageProxy', \r\n              payload: {\r\n                type: 'set',\r\n                keys,\r\n                values\r\n              }\r\n            } as LocalStorageProxySetTask);\r\n          } */\r\n\r\n          await this.storage.save(keys, values);\r\n          //console.log('setItem: have set', key/* , value */);\r\n        } catch(e) {\r\n          //this.useCS = false;\r\n          console.error('[AS]: set error:', e, keys/* , value */);\r\n        }\r\n      }\r\n\r\n      deferred.resolve();\r\n\r\n      if(set.size) {\r\n        this.saveThrottled();\r\n      }\r\n    }, 16, false);\r\n\r\n    this.deleteThrottled = throttle(async() => {\r\n      const deferred = this.deleteDeferred;\r\n      this.deleteDeferred = deferredPromise<void>();\r\n\r\n      const set = this.keysToDelete;\r\n      if(set.size) {\r\n        const keys = Array.from(set.values()) as string[];\r\n        set.clear();\r\n\r\n        try {\r\n          /* if(db === DATABASE_SESSION && !('localStorage' in self)) { // * support legacy Webogram's localStorage\r\n            self.postMessage({\r\n              type: 'localStorageProxy', \r\n              payload: {\r\n                type: 'delete',\r\n                keys\r\n              }\r\n            } as LocalStorageProxyDeleteTask);\r\n          } */\r\n\r\n          await this.storage.delete(keys);\r\n        } catch(e) {\r\n          console.error('[AS]: delete error:', e, keys);\r\n        }\r\n      }\r\n\r\n      deferred.resolve();\r\n\r\n      if(set.size) {\r\n        this.deleteThrottled();\r\n      }\r\n    }, 16, false);\r\n\r\n    this.getThrottled = throttle(async() => {\r\n      const keys = Array.from(this.getPromises.keys());\r\n\r\n      this.storage.get(keys as string[]).then(values => {\r\n        for(let i = 0, length = keys.length; i < length; ++i) {\r\n          const key = keys[i];\r\n          const deferred = this.getPromises.get(key);\r\n          if(deferred) {\r\n            // @ts-ignore\r\n            deferred.resolve(this.cache[key] = values[i]);\r\n            this.getPromises.delete(key);\r\n          }\r\n        }\r\n      }, (error) => {\r\n        if(!['NO_ENTRY_FOUND', 'STORAGE_OFFLINE'].includes(error)) {\r\n          this.useStorage = false;\r\n          console.error('[AS]: get error:', error, keys, storeName);\r\n        }\r\n\r\n        for(let i = 0, length = keys.length; i < length; ++i) {\r\n          const key = keys[i];\r\n          const deferred = this.getPromises.get(key);\r\n          if(deferred) {\r\n            //deferred.reject(error);\r\n            deferred.resolve(undefined);\r\n            this.getPromises.delete(key);\r\n          }\r\n        }\r\n      }).finally(() => {\r\n        if(this.getPromises.size) {\r\n          this.getThrottled();\r\n        }\r\n      });\r\n    }, 16, false);\r\n  }\r\n\r\n  public isAvailable() {\r\n    return this.useStorage;\r\n  }\r\n\r\n  public getCache() {\r\n    return this.cache;\r\n  }\r\n\r\n  public getFromCache<T extends keyof Storage>(key: T) {\r\n    return this.cache[key];\r\n  }\r\n\r\n  public setToCache(key: keyof Storage, value: Storage[typeof key]) {\r\n    return this.cache[key] = value;\r\n  }\r\n\r\n  public async get<T extends keyof Storage>(key: T, useCache = true): Promise<Storage[T]> {\r\n    if(this.cache.hasOwnProperty(key) && useCache) {\r\n      return this.getFromCache(key);\r\n    } else if(this.useStorage) {\r\n      const r = this.getPromises.get(key);\r\n      if(r) return r as any;\r\n\r\n      const p = deferredPromise<Storage[T]>();\r\n      this.getPromises.set(key, p as any);\r\n\r\n      this.getThrottled();\r\n\r\n      return p;\r\n    }/*  else {\r\n      throw 'something went wrong';\r\n    } */\r\n  }\r\n\r\n  public getAll() {\r\n    return this.storage.getAll().catch(() => []);\r\n  }\r\n\r\n  public set(obj: Partial<Storage>, onlyLocal = false) {\r\n    //console.log('storageSetValue', obj, callback, arguments);\r\n\r\n    for(const key in obj) {\r\n      if(obj.hasOwnProperty(key)) {\r\n        const value = obj[key];\r\n        this.setToCache(key, value);\r\n\r\n        // let perf = /* DEBUG */false ? performance.now() : 0;\r\n        // value = JSON.stringify(value);\r\n\r\n        // if(perf) {\r\n        //   let elapsedTime = performance.now() - perf;\r\n        //   if(elapsedTime > 10) {\r\n        //     console.warn('LocalStorage set: stringify time by JSON.stringify:', elapsedTime, key);\r\n        //   }\r\n        // }\r\n        \r\n        /* perf = performance.now();\r\n        value = stringify(value);\r\n        console.log('LocalStorage set: stringify time by own stringify:', performance.now() - perf); */\r\n\r\n        if(this.useStorage && !onlyLocal) {\r\n          this.keysToSet.add(key);\r\n          this.keysToDelete.delete(key);\r\n          this.saveThrottled();\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.useStorage ? this.saveDeferred : Promise.resolve();\r\n  }\r\n\r\n  public delete(key: keyof Storage, saveLocal = false) {\r\n    /* if(!this.cache.hasOwnProperty(key)) {\r\n      return;\r\n    } */\r\n\r\n    // ! it is needed here\r\n    key = '' + key;\r\n\r\n    if(!saveLocal) {\r\n      delete this.cache[key];\r\n    }\r\n    \r\n    if(this.useStorage) {\r\n      this.keysToSet.delete(key);\r\n      this.keysToDelete.add(key);\r\n      this.deleteThrottled();\r\n    }\r\n\r\n    return this.useStorage ? this.deleteDeferred : Promise.resolve();\r\n  }\r\n\r\n  public clear(saveLocal = false) {\r\n    if(!saveLocal) {\r\n      for(const i in this.cache) {\r\n        delete this.cache[i];\r\n      }\r\n    }\r\n\r\n    return this.storage.clear().catch(noop);\r\n  }\r\n\r\n  public static toggleStorage(enabled: boolean) {\r\n    return Promise.all(this.STORAGES.map(storage => {\r\n      storage.useStorage = enabled;\r\n      \r\n      if(!enabled) {\r\n        storage.keysToSet.clear();\r\n        storage.keysToDelete.clear();\r\n        storage.getPromises.forEach((deferred) => deferred.resolve(undefined));\r\n        storage.getPromises.clear();\r\n        return storage.clear(true);\r\n      } else {\r\n        return storage.set(storage.cache);\r\n      }\r\n    })).catch(noop);\r\n  }\r\n\r\n  /* public deleteDatabase() {\r\n    return IDBStorage.deleteDatabase().catch(noop);\r\n  } */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { ChatSavedPosition } from './appManagers/appImManager';\r\nimport type { State } from './appManagers/appStateManager';\r\nimport type { AppDraftsManager } from './appManagers/appDraftsManager';\r\nimport { MOUNT_CLASS_TO } from '../config/debug';\r\nimport { LangPackDifference } from '../layer';\r\nimport AppStorage from './storage';\r\nimport DATABASE_STATE from '../config/databases/state';\r\n\r\nconst stateStorage = new AppStorage<{\r\n  chatPositions: {\r\n    [peerId_threadId: string]: ChatSavedPosition\r\n  },\r\n  langPack: LangPackDifference,\r\n  drafts: AppDraftsManager['drafts'],\r\n  user_auth: any, // support old webk format\r\n} & State, typeof DATABASE_STATE>(DATABASE_STATE, 'session');\r\nMOUNT_CLASS_TO.stateStorage = stateStorage;\r\nexport default stateStorage;\r\n"],"sourceRoot":""}