{"version":3,"sources":["webpack:///./src/lib/mtproto/mtproto_config.ts","webpack:///./src/helpers/dom/htmlToSpan.ts","webpack:///./src/helpers/cleanSearchText.ts","webpack:///./src/helpers/cleanUsername.ts","webpack:///./src/lib/appManagers/appUsersManager.ts","webpack:///./src/lib/appManagers/appPeersManager.ts","webpack:///./src/lib/appManagers/appChatsManager.ts","webpack:///./src/lib/appManagers/apiUpdatesManager.ts","webpack:///./src/lib/searchIndex.ts"],"names":["REPLIES_PEER_ID","htmlToSpan","html","span","document","createElement","innerHTML","badCharsRe","trimRe","cleanSearchText","text","latinize","hasTag","charAt","replace","ch","latinizeCh","LatinizeMap","undefined","toLowerCase","cleanUsername","username","appUsersManager","storage","appStateManager","storages","users","updateUsersStatuses","timestampNow","i","this","user","status","_","expires","was_online","rootScope","dispatchEvent","id","setUserToStateIfNeeded","clear","setInterval","addEventListener","addMultipleEventsListeners","updateUserStatus","update","userId","user_id","serverTimeManager","serverTimeOffset","updateUserPhoto","forceUserOnline","photo","console","warn","updateUserName","saveApiUser","Object","assign","first_name","last_name","e","getSelf","contactsIndex","indexObject","getUserSearchText","getState","then","state","storagesResults","length","contactsList","Array","isArray","forEach","pushContact","contactsFillPromise","Promise","resolve","peerId","getFromCache","set","getUser","delete","isPeerNeeded","usernames","Set","updatedContactsList","pushToState","promise","invokeApi","result","saveApiUsers","contacts","contact","onContactsModified","slice","resolvedPeer","appChatsManager","saveApiChats","chats","appPeersManager","getPeer","getPeerId","peer","add","requestPeer","phone","pFlags","self","format","filter","Boolean","join","query","includeSaved","fillContacts","_contactsList","results","search","has","sort","userId1","userId2","sortName1","sortName","sortName2","localeCompare","testSelfSearch","findAndSplice","p","myId","unshift","block","getInputPeerById","value","apiUpdatesManager","processUpdateMessage","peer_id","getOutputPeer","blocked","index","apiUsers","override","oldUser","min","fullName","searchUsername","deleted","initials","getAbbreviation","changedPhoto","changedTitle","photo_id","formatted","access_hash","key","args","isBot","support","date","now","Date","d","getDate","getMonth","getHours","getMinutes","bot","isRegularUser","isContact","allowMin","eventTimestamp","timestamp","updatesState","syncLoading","getTopPeersPromise","topPeers","correspondents","offset","limit","hash","peerIds","categories","peers","map","topPeer","contactsBlocked","count","u","concat","c","q","my_results","offline","showPhone","getUserInput","add_phone_privacy_exception","updates","onContactUpdated","userIds","DialogColorsFg","DialogColors","DialogColorsMap","updatePeerBlocked","hasRights","getUserPhoto","getChatPhoto","chat","getChat","migrated_to","deactivated","plainText","onlyFirstName","title","trim","split","wrapEmojiText","chatId","isChannel","channel_id","chat_id","getUserString","getChatString","isUser","peerParams","substr","isMegagroup","isBroadcast","ignorePeerId","getChannelInputPeer","getChatInputPeer","pic","getDialogType","onChatUpdated","updateChannelParticipant","clearCache","params","channel","updateChatDefaultBannedRights","default_banned_rights","apiChats","saveApiChat","oldChat","participants_count","rights","defaultRights","action","isThread","kicked","left","megagroup","creator","admin_rights","banned_rights","myFlags","post_messages","delete_messages","broadcast","until_date","bind","good","about","channelId","input","getChannelInput","usersInputs","fwdLimit","fwd_limit","deleteChatUser","leaveChannel","leaveChat","deleteChannel","deleteChat","find","bool","inputFile","inputChatPhoto","file","participant","getParticipantPeerId","actor_id","qts","prev_participant","new_participant","keys","kicked_by","editBanned","view_messages","pendingPtsUpdates","pendingSeqUpdates","syncPending","channelStates","attached","log","Error","Warn","Log","debug","updateMessage","options","processOpts","seq","seqStart","seq_start","forceGetDifference","processUpdate","isOut","out","fromId","from_id","toId","message","fwd_from","reply_to","entities","pts","pts_count","Proxy","target","saveUpdatesState","us","nextSeq","pendingUpdatesData","saveUpdate","popPendingSeqUpdate","seqAwaiting","ptsAwaiting","clearTimeout","timeout","curState","getChannelState","a","b","curPts","goodPts","goodIndex","splice","getDifference","first","wasSyncing","pts_total_limit","differenceResult","other_updates","new_messages","apiMessage","nextState","intermediate_state","justAName","channelState","getChannelDifference","addChannelState","lastPtsUpdateTime","toPeerId","fwdHeader","reason","hasUser","post","hasChat","popPts","popSeq","push","window","setTimeout","popPendingPtsUpdate","_state","noErrorBox","stateResult","setUpdatesProcessor","setProxy","SearchIndex","cleanText","minChars","fullTexts","Map","searchText","newFoundObjs","queryWords","queryWordsLength","fullText","what","found","foundChars","word","idx","indexOf","fullTextLength","o"],"mappings":"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","file":"3.9fa9692a93c5f8af17ca.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n/**\r\n * Legacy Webogram's format, don't change dcID to camelCase. date is timestamp\r\n */\r\nexport type UserAuth = {dcID: number | string, date: number, id: number};\r\n\r\nexport const REPLIES_PEER_ID = 1271266957;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function htmlToSpan(html: string) {\r\n  const span = document.createElement('span');\r\n  span.innerHTML = html;\r\n  return span;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport Config from \"../lib/config\";\r\n\r\nconst badCharsRe = /[`~!@#$%^&*()\\-_=+\\[\\]\\\\|{}'\";:\\/?.>,<]+/g;\r\nconst trimRe = /^\\s+|\\s$/g;\r\n\r\nexport default function cleanSearchText(text: string, latinize = true) {\r\n  const hasTag = text.charAt(0) === '%';\r\n  text = text.replace(badCharsRe, '').replace(trimRe, '');\r\n  if(latinize) {\r\n    text = text.replace(/[^A-Za-z0-9]/g, (ch) => {\r\n      const latinizeCh = Config.LatinizeMap[ch];\r\n      return latinizeCh !== undefined ? latinizeCh : ch;\r\n    });\r\n  }\r\n  \r\n  text = text.toLowerCase();\r\n  if(hasTag) {\r\n    text = '%' + text;\r\n  }\r\n\r\n  return text;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport default function cleanUsername(username: string) {\r\n  return username && username.toLowerCase() || '';\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { formatPhoneNumber } from \"../../components/misc\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport cleanSearchText from \"../../helpers/cleanSearchText\";\r\nimport cleanUsername from \"../../helpers/cleanUsername\";\r\nimport { tsNow } from \"../../helpers/date\";\r\nimport { safeReplaceObject, isObject } from \"../../helpers/object\";\r\nimport { InputUser, Update, User as MTUser, UserProfilePhoto, UserStatus } from \"../../layer\";\r\nimport I18n, { i18n, LangPackKey } from \"../langPack\";\r\n//import apiManager from '../mtproto/apiManager';\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport { REPLIES_PEER_ID } from \"../mtproto/mtproto_config\";\r\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport SearchIndex from \"../searchIndex\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from \"./appStateManager\";\r\n\r\n// TODO: updateUserBlocked\r\n\r\nexport type User = MTUser.user;\r\n\r\nexport class AppUsersManager {\r\n  private storage = appStateManager.storages.users;\r\n  \r\n  private users: {[userId: number]: User};\r\n  private usernames: {[username: string]: number};\r\n  private contactsIndex: SearchIndex<number>;\r\n  private contactsFillPromise: Promise<Set<number>>;\r\n  private contactsList: Set<number>;\r\n  private updatedContactsList: boolean;\r\n  \r\n  private getTopPeersPromise: Promise<number[]>;\r\n\r\n  constructor() {\r\n    this.clear();\r\n\r\n    setInterval(this.updateUsersStatuses, 60000);\r\n\r\n    rootScope.addEventListener('state_synchronized', this.updateUsersStatuses);\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      updateUserStatus: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          user.status = update.status;\r\n          if(user.status) {\r\n            if('expires' in user.status) {\r\n              user.status.expires -= serverTimeManager.serverTimeOffset;\r\n            }\r\n\r\n            if('was_online' in user.status) {\r\n              user.status.was_online -= serverTimeManager.serverTimeOffset;\r\n            }\r\n          }\r\n\r\n          //user.sortStatus = this.getUserStatusForSort(user.status);\r\n          rootScope.dispatchEvent('user_update', userId);\r\n          this.setUserToStateIfNeeded(user);\r\n        } //////else console.warn('No user by id:', userId);\r\n      },\r\n\r\n      updateUserPhoto: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          this.forceUserOnline(userId);\r\n\r\n          if(update.photo._ === 'userProfilePhotoEmpty') {\r\n            delete user.photo;\r\n          } else {\r\n            user.photo = safeReplaceObject(user.photo, update.photo);\r\n          }\r\n\r\n          this.setUserToStateIfNeeded(user);\r\n\r\n          rootScope.dispatchEvent('user_update', userId);\r\n          rootScope.dispatchEvent('avatar_update', userId);\r\n        } else console.warn('No user by id:', userId);\r\n      },\r\n\r\n      updateUserName: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          this.forceUserOnline(userId);\r\n          \r\n          this.saveApiUser(Object.assign({}, user, {\r\n            first_name: update.first_name,\r\n            last_name: update.last_name,\r\n            username: update.username\r\n          }), true);\r\n        }\r\n      }\r\n    });\r\n\r\n    /* case 'updateContactLink':\r\n    this.onContactUpdated(update.user_id, update.my_link._ === 'contactLinkContact');\r\n    break; */\r\n\r\n    rootScope.addEventListener('language_change', (e) => {\r\n      const userId = this.getSelf().id;\r\n      this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\r\n    });\r\n\r\n    appStateManager.getState().then((state) => {\r\n      const users = appStateManager.storagesResults.users;\r\n      if(users.length) {\r\n        this.users = {};\r\n        for(let i = 0, length = users.length; i < length; ++i) {\r\n          const user = users[i];\r\n          if(user) {\r\n            this.users[user.id] = user;\r\n          }\r\n        }\r\n      }\r\n\r\n      const contactsList = state.contactsList;\r\n      if(contactsList && Array.isArray(contactsList)) {\r\n        contactsList.forEach(userId => {\r\n          this.pushContact(userId);\r\n        });\r\n\r\n        if(contactsList.length) {\r\n          this.contactsFillPromise = Promise.resolve(this.contactsList);\r\n        }\r\n      }\r\n\r\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\r\n        if(peerId < 0 || this.storage.getFromCache(peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.set({\r\n          [peerId]: this.getUser(peerId)\r\n        });\r\n      });\r\n\r\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\r\n        if(peerId < 0 || !this.storage.getFromCache(peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.delete(peerId);\r\n      });\r\n    });\r\n  }\r\n\r\n  public clear() {\r\n    if(this.users) {\r\n      for(const userId in this.users) {\r\n        if(!appStateManager.isPeerNeeded(+userId)) {\r\n          const user = this.users[userId];\r\n          if(user.username) {\r\n            delete this.usernames[cleanUsername(user.username)];\r\n          }\r\n  \r\n          delete this.users[userId];\r\n        }\r\n      }\r\n    } else {\r\n      this.users = {};\r\n      this.usernames = {};\r\n    }\r\n    \r\n    this.contactsIndex = new SearchIndex();\r\n    this.contactsFillPromise = undefined;\r\n    this.contactsList = new Set();\r\n    this.updatedContactsList = false;\r\n  }\r\n\r\n  private onContactsModified() {\r\n    const contactsList = [...this.contactsList];\r\n    appStateManager.pushToState('contactsList', contactsList);\r\n  }\r\n\r\n  public fillContacts() {\r\n    if(this.contactsFillPromise && this.updatedContactsList) {\r\n      return this.contactsFillPromise;\r\n    }\r\n\r\n    this.updatedContactsList = true;\r\n\r\n    const promise = apiManager.invokeApi('contacts.getContacts').then((result) => {\r\n      if(result._ === 'contacts.contacts') {\r\n        this.saveApiUsers(result.users);\r\n\r\n        result.contacts.forEach((contact) => {\r\n          this.pushContact(contact.user_id);\r\n        });\r\n\r\n        this.onContactsModified();\r\n      }\r\n\r\n      this.contactsFillPromise = promise;\r\n\r\n      return this.contactsList;\r\n    });\r\n\r\n    return this.contactsFillPromise || (this.contactsFillPromise = promise);\r\n  }\r\n\r\n  public resolveUsername(username: string) {\r\n    if(username[0] === '@') {\r\n      username = username.slice(1);\r\n    }\r\n\r\n    username = username.toLowerCase();\r\n    if(this.usernames[username]) {\r\n      return Promise.resolve(this.users[this.usernames[username]]);\r\n    }\r\n\r\n    return apiManager.invokeApi('contacts.resolveUsername', {username}).then(resolvedPeer => {\r\n      this.saveApiUsers(resolvedPeer.users);\r\n      appChatsManager.saveApiChats(resolvedPeer.chats);\r\n\r\n      return appPeersManager.getPeer(appPeersManager.getPeerId(resolvedPeer.peer));\r\n    });\r\n  }\r\n\r\n  public pushContact(userId: number) {\r\n    this.contactsList.add(userId);\r\n    this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\r\n    appStateManager.requestPeer(userId, 'contacts');\r\n  }\r\n\r\n  public getUserSearchText(id: number) {\r\n    const user = this.users[id];\r\n    if(!user) {\r\n      return '';\r\n    }\r\n\r\n    const arr: string[] = [\r\n      user.first_name,\r\n      user.last_name,\r\n      user.phone,\r\n      user.username,\r\n      user.pFlags.self ? I18n.format('SavedMessages', true) : '',\r\n      user.pFlags.self ? 'Saved Messages' : ''\r\n    ];\r\n\r\n    return arr.filter(Boolean).join(' ');\r\n  }\r\n\r\n  public getContacts(query?: string, includeSaved = false) {\r\n    return this.fillContacts().then(_contactsList => {\r\n      let contactsList = [..._contactsList];\r\n      if(query) {\r\n        const results = this.contactsIndex.search(query);\r\n        const filteredContactsList = [...contactsList].filter(id => results.has(id));\r\n\r\n        contactsList = filteredContactsList;\r\n      }\r\n\r\n      contactsList.sort((userId1: number, userId2: number) => {\r\n        const sortName1 = (this.users[userId1] || {}).sortName || '';\r\n        const sortName2 = (this.users[userId2] || {}).sortName || '';\r\n\r\n        return sortName1.localeCompare(sortName2);\r\n      });\r\n\r\n      if(includeSaved) {\r\n        if(this.testSelfSearch(query)) {\r\n          contactsList.findAndSplice(p => p === rootScope.myId);\r\n          contactsList.unshift(rootScope.myId);\r\n        }\r\n      }\r\n\r\n      /* contactsList.sort((userId1: number, userId2: number) => {\r\n        const sortName1 = (this.users[userId1] || {}).sortName || '';\r\n        const sortName2 = (this.users[userId2] || {}).sortName || '';\r\n        if(sortName1 === sortName2) {\r\n          return 0;\r\n        } \r\n        \r\n        return sortName1 > sortName2 ? 1 : -1;\r\n      }); */\r\n\r\n      return contactsList;\r\n    });\r\n  }\r\n\r\n  public toggleBlock(peerId: number, block: boolean) {\r\n    return apiManager.invokeApi(block ? 'contacts.block' : 'contacts.unblock', {\r\n      id: appPeersManager.getInputPeerById(peerId)\r\n    }).then(value => {\r\n      if(value) {\r\n        apiUpdatesManager.processUpdateMessage({\r\n          _: 'updateShort',\r\n          update: {\r\n            _: 'updatePeerBlocked',\r\n            peer_id: appPeersManager.getOutputPeer(peerId),\r\n            blocked: block\r\n          } as Update.updatePeerBlocked\r\n        });\r\n      }\r\n\r\n      return value;\r\n    });\r\n  }\r\n\r\n  public testSelfSearch(query: string) {\r\n    const user = this.getSelf();\r\n    const index = new SearchIndex();\r\n    index.indexObject(user.id, this.getUserSearchText(user.id));\r\n    return index.search(query).has(user.id);\r\n  }\r\n\r\n  public saveApiUsers(apiUsers: any[], override?: boolean) {\r\n    apiUsers.forEach((user) => this.saveApiUser(user, override));\r\n  }\r\n\r\n  public saveApiUser(user: MTUser, override?: boolean) {\r\n    if(user._ === 'userEmpty') return;\r\n\r\n    const userId = user.id;\r\n    const oldUser = this.users[userId];\r\n\r\n    // ! commented block can affect performance !\r\n    // if(oldUser && !override) {\r\n    //   console.log('saveApiUser same');\r\n    //   return;\r\n    // }\r\n\r\n    if(user.pFlags === undefined) {\r\n      user.pFlags = {};\r\n    }\r\n\r\n    if(user.pFlags.min && oldUser !== undefined) {\r\n      return;\r\n    }\r\n\r\n    // * exclude from state\r\n    // defineNotNumerableProperties(user, ['initials', 'num', 'rFirstName', 'rFullName', 'rPhone', 'sortName', 'sortStatus']);\r\n\r\n    const fullName = user.first_name + ' ' + (user.last_name || '');\r\n    if(user.username) {\r\n      const searchUsername = cleanUsername(user.username);\r\n      this.usernames[searchUsername] = userId;\r\n    }\r\n\r\n    user.sortName = user.pFlags.deleted ? '' : cleanSearchText(fullName, false);\r\n\r\n    user.initials = RichTextProcessor.getAbbreviation(fullName);\r\n\r\n    if(user.status) {\r\n      if((user.status as UserStatus.userStatusOnline).expires) {\r\n        (user.status as UserStatus.userStatusOnline).expires -= serverTimeManager.serverTimeOffset;\r\n      }\r\n\r\n      if((user.status as UserStatus.userStatusOffline).was_online) {\r\n        (user.status as UserStatus.userStatusOffline).was_online -= serverTimeManager.serverTimeOffset;\r\n      }\r\n    }\r\n\r\n    //user.sortStatus = user.pFlags.bot ? -1 : this.getUserStatusForSort(user.status);\r\n\r\n    let changedPhoto = false, changedTitle = false;\r\n    if(oldUser === undefined) {\r\n      this.users[userId] = user;\r\n    } else {\r\n      if(user.first_name !== oldUser.first_name \r\n        || user.last_name !== oldUser.last_name \r\n        || user.username !== oldUser.username) {\r\n        changedTitle = true;\r\n      }\r\n\r\n      const oldPhotoId = (oldUser.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\r\n      const newPhotoId = (user.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\r\n      if(oldPhotoId !== newPhotoId) {\r\n        changedPhoto = true;\r\n      }\r\n\r\n      /* if(user.pFlags.bot && user.bot_info_version !== oldUser.bot_info_version) {\r\n        \r\n      } */\r\n\r\n      safeReplaceObject(oldUser, user);\r\n      rootScope.dispatchEvent('user_update', userId);\r\n    }\r\n\r\n    if(changedPhoto) {\r\n      rootScope.dispatchEvent('avatar_update', user.id);\r\n    }\r\n\r\n    if(changedTitle) {\r\n      rootScope.dispatchEvent('peer_title_edit', user.id);\r\n    }\r\n\r\n    this.setUserToStateIfNeeded(user);\r\n  }\r\n\r\n  public setUserToStateIfNeeded(user: User) {\r\n    if(appStateManager.isPeerNeeded(user.id)) {\r\n      this.storage.set({\r\n        [user.id]: user\r\n      });\r\n    }\r\n  }\r\n\r\n  public formatUserPhone(phone: string) {\r\n    return '+' + formatPhoneNumber(phone).formatted;\r\n  }\r\n\r\n  public getUserStatusForSort(status: User['status'] | number) {\r\n    if(typeof(status) === 'number') {\r\n      status = this.getUser(status).status;\r\n    }\r\n\r\n    if(status) {\r\n      const expires = status._ === 'userStatusOnline' ? status.expires : (status._ === 'userStatusOffline' ? status.was_online : 0);\r\n      if(expires) {\r\n        return expires;\r\n      }\r\n\r\n      /* const timeNow = tsNow(true);\r\n      switch(status._) {\r\n        case 'userStatusRecently':\r\n          return timeNow - 86400 * 3;\r\n        case 'userStatusLastWeek':\r\n          return timeNow - 86400 * 7;\r\n        case 'userStatusLastMonth':\r\n          return timeNow - 86400 * 30;\r\n      } */\r\n      switch(status._) {\r\n        case 'userStatusRecently':\r\n          return 3;\r\n        case 'userStatusLastWeek':\r\n          return 2;\r\n        case 'userStatusLastMonth':\r\n          return 1;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  public getUser(id: any): User {\r\n    if(isObject(id)) {\r\n      return id;\r\n    }\r\n\r\n    return this.users[id] || {id: id, pFlags: {deleted: true}, access_hash: ''} as User;\r\n  }\r\n\r\n  public getSelf() {\r\n    return this.getUser(rootScope.myId);\r\n  }\r\n\r\n  public getUserStatusString(userId: number): HTMLElement {\r\n    let key: LangPackKey;\r\n    let args: any[];\r\n\r\n    switch(userId) {\r\n      case REPLIES_PEER_ID:\r\n        key = 'Peer.RepliesNotifications';\r\n        break;\r\n      case 777000:\r\n        key = 'Peer.ServiceNotifications';\r\n        break;\r\n      default: {\r\n        if(this.isBot(userId)) {\r\n          key = 'Bot';\r\n          break;\r\n        }\r\n\r\n        const user = this.getUser(userId);\r\n        if(!user) {\r\n          key = '' as any;\r\n          break;\r\n        }\r\n\r\n        if(user.pFlags.support) {\r\n          key = 'SupportStatus';\r\n          break;\r\n        }\r\n\r\n        switch(user.status?._) {\r\n          case 'userStatusRecently': {\r\n            key = 'Lately';\r\n            break;\r\n          }\r\n    \r\n          case 'userStatusLastWeek': {\r\n            key = 'WithinAWeek';\r\n            break;\r\n          }\r\n    \r\n          case 'userStatusLastMonth': {\r\n            key = 'WithinAMonth';\r\n            break;\r\n          }\r\n          \r\n          case 'userStatusOffline': {\r\n            const date = user.status.was_online;\r\n            const now = Date.now() / 1000;\r\n            \r\n            if((now - date) < 60) {\r\n              key = 'Peer.Status.justNow';\r\n            } else if((now - date) < 3600) {\r\n              key = 'Peer.Status.minAgo';\r\n              const c = (now - date) / 60 | 0;\r\n              args = [c];\r\n            } else if(now - date < 86400) {\r\n              key = 'LastSeen.HoursAgo';\r\n              const c = (now - date) / 3600 | 0;\r\n              args = [c];\r\n            } else {\r\n              key = 'Peer.Status.LastSeenAt';\r\n              const d = new Date(date * 1000);\r\n              args = [('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2), \r\n                ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2)];\r\n            }\r\n            \r\n            break;\r\n          }\r\n    \r\n          case 'userStatusOnline': {\r\n            key = 'Online';\r\n            break;\r\n          }\r\n    \r\n          default: {\r\n            key = 'ALongTimeAgo';\r\n            break;\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n    \r\n    return i18n(key, args);\r\n  }\r\n\r\n  public isBot(id: number) {\r\n    return this.users[id] && this.users[id].pFlags.bot;\r\n  }\r\n\r\n  public isContact(id: number) {\r\n    return this.contactsList.has(id);\r\n  }\r\n  \r\n  public isRegularUser(id: number) {\r\n    const user = this.users[id];\r\n    return user && !this.isBot(id) && !user.pFlags.deleted && !user.pFlags.support;\r\n  }\r\n\r\n  public isNonContactUser(id: number) {\r\n    return this.isRegularUser(id) && !this.isContact(id) && id !== rootScope.myId;\r\n  }\r\n\r\n  public hasUser(id: number, allowMin?: boolean) {\r\n    var user = this.users[id];\r\n    return isObject(user) && (allowMin || !user.pFlags.min);\r\n  }\r\n\r\n  public canSendToUser(id: number) {\r\n    const user = this.getUser(id);\r\n    return !user.pFlags.deleted && user.username !== 'replies';\r\n  }\r\n\r\n  public getUserPhoto(id: number) {\r\n    const user = this.getUser(id);\r\n\r\n    return user && user.photo || {\r\n      _: 'userProfilePhotoEmpty'\r\n    };\r\n  }\r\n\r\n  public getUserString(id: number) {\r\n    const user = this.getUser(id);\r\n    return 'u' + id + (user.access_hash ? '_' + user.access_hash : '');\r\n  }\r\n\r\n  public getUserInput(id: number): InputUser {\r\n    const user = this.getUser(id);\r\n    if(user.pFlags && user.pFlags.self) {\r\n      return {_: 'inputUserSelf'};\r\n    }\r\n\r\n    return {\r\n      _: 'inputUser',\r\n      user_id: id,\r\n      access_hash: user.access_hash\r\n    };\r\n  }\r\n\r\n  public updateUsersStatuses = () => {\r\n    const timestampNow = tsNow(true);\r\n    for(const i in this.users) {\r\n      const user = this.users[i];\r\n\r\n      if(user.status &&\r\n        user.status._ === 'userStatusOnline' &&\r\n        user.status.expires < timestampNow) {\r\n\r\n        user.status = {_: 'userStatusOffline', was_online: user.status.expires};\r\n        rootScope.dispatchEvent('user_update', user.id);\r\n\r\n        this.setUserToStateIfNeeded(user);\r\n      }\r\n    }\r\n  };\r\n\r\n  public forceUserOnline(id: number, eventTimestamp?: number) {\r\n    if(this.isBot(id)) {\r\n      return;\r\n    }\r\n\r\n    const timestamp = tsNow(true);\r\n    const onlineTimeFor = 60;\r\n    if(eventTimestamp) {\r\n      if((timestamp - eventTimestamp) >= onlineTimeFor) {\r\n        return;\r\n      }\r\n    } else if(apiUpdatesManager.updatesState.syncLoading) {\r\n      return;\r\n    }\r\n\r\n    const user = this.getUser(id);\r\n    if(user &&\r\n      user.status &&\r\n      user.status._ !== 'userStatusOnline' &&\r\n      user.status._ !== 'userStatusEmpty' &&\r\n      !user.pFlags.support &&\r\n      !user.pFlags.deleted) {\r\n\r\n      user.status = {\r\n        _: 'userStatusOnline',\r\n        expires: timestamp + onlineTimeFor\r\n      };\r\n      \r\n      //user.sortStatus = this.getUserStatusForSort(user.status);\r\n      rootScope.dispatchEvent('user_update', id);\r\n\r\n      this.setUserToStateIfNeeded(user);\r\n    }\r\n  }\r\n\r\n  /* function importContact (phone, firstName, lastName) {\r\n      return MtpApiManager.invokeApi('contacts.importContacts', {\r\n        contacts: [{\r\n          _: 'inputPhoneContact',\r\n          client_id: '1',\r\n          phone: phone,\r\n          first_name: firstName,\r\n          last_name: lastName\r\n        }],\r\n        replace: false\r\n      }).then(function (importedContactsResult) {\r\n        saveApiUsers(importedContactsResult.users)\r\n\r\n        var foundUserID = false\r\n        angular.forEach(importedContactsResult.imported, function (importedContact) {\r\n          onContactUpdated(foundUserID = importedContact.user_id, true)\r\n        })\r\n\r\n        return foundUserID || false\r\n      })\r\n  }\r\n\r\n  function importContacts (contacts) {\r\n    var inputContacts = [],\r\n      i\r\n    var j\r\n\r\n    for (i = 0; i < contacts.length; i++) {\r\n      for (j = 0; j < contacts[i].phones.length; j++) {\r\n        inputContacts.push({\r\n          _: 'inputPhoneContact',\r\n          client_id: (i << 16 | j).toString(10),\r\n          phone: contacts[i].phones[j],\r\n          first_name: contacts[i].first_name,\r\n          last_name: contacts[i].last_name\r\n        })\r\n      }\r\n    }\r\n\r\n    return MtpApiManager.invokeApi('contacts.importContacts', {\r\n      contacts: inputContacts,\r\n      replace: false\r\n    }).then(function (importedContactsResult) {\r\n      saveApiUsers(importedContactsResult.users)\r\n\r\n      var result = []\r\n      angular.forEach(importedContactsResult.imported, function (importedContact) {\r\n        onContactUpdated(importedContact.user_id, true)\r\n        result.push(importedContact.user_id)\r\n      })\r\n\r\n      return result\r\n    })\r\n  } */\r\n\r\n  /* public deleteContacts(userIds: number[]) {\r\n    var ids: any[] = [];\r\n    userIds.forEach((userId) => {\r\n      ids.push(this.getUserInput(userId));\r\n    })\r\n\r\n    return apiManager.invokeApi('contacts.deleteContacts', {\r\n      id: ids\r\n    }).then(() => {\r\n      userIds.forEach((userId) => {\r\n        this.onContactUpdated(userId, false);\r\n      });\r\n    });\r\n  } */\r\n\r\n  public getTopPeers(): Promise<number[]> {\r\n    if(this.getTopPeersPromise) return this.getTopPeersPromise;\r\n\r\n    return this.getTopPeersPromise = appStateManager.getState().then((state) => {\r\n      if(state?.topPeers?.length) {\r\n        return state.topPeers;\r\n      }\r\n\r\n      return apiManager.invokeApi('contacts.getTopPeers', {\r\n        correspondents: true,\r\n        offset: 0,\r\n        limit: 15,\r\n        hash: 0,\r\n      }).then((result) => {\r\n        let peerIds: number[] = [];\r\n        if(result._ === 'contacts.topPeers') {\r\n          //console.log(result);\r\n          this.saveApiUsers(result.users);\r\n          appChatsManager.saveApiChats(result.chats);\r\n\r\n          if(result.categories.length) {\r\n            peerIds = result.categories[0].peers.map((topPeer) => {\r\n              const peerId = appPeersManager.getPeerId(topPeer.peer);\r\n              appStateManager.requestPeer(peerId, 'topPeer');\r\n              return peerId;\r\n            });\r\n          }\r\n        }\r\n  \r\n        appStateManager.pushToState('topPeers', peerIds);\r\n  \r\n        return peerIds;\r\n      });\r\n    });\r\n  }\r\n\r\n  public getBlocked(offset = 0, limit = 0) {\r\n    return apiManager.invokeApi('contacts.getBlocked', {offset, limit}).then(contactsBlocked => {\r\n      this.saveApiUsers(contactsBlocked.users);\r\n      appChatsManager.saveApiChats(contactsBlocked.chats);\r\n      const count = contactsBlocked._ === 'contacts.blocked' ? contactsBlocked.users.length + contactsBlocked.chats.length : contactsBlocked.count;\r\n\r\n      const peerIds = contactsBlocked.users.map(u => u.id).concat(contactsBlocked.chats.map(c => -c.id));\r\n\r\n      return {count, peerIds};\r\n    });\r\n  }\r\n\r\n  /* public searchContacts(query: string, limit = 20) {\r\n    return Promise.all([\r\n      this.getContacts(query),\r\n      apiManager.invokeApi('contacts.search', {\r\n        q: query,\r\n        limit\r\n      })\r\n    ]).then(results => {\r\n      const [myContacts, peers] = results;\r\n\r\n      this.saveApiUsers(peers.users);\r\n      appChatsManager.saveApiChats(peers.chats);\r\n\r\n      // * contacts.search returns duplicates in my_results\r\n      const myResults = new Set(myContacts.concat(peers.my_results.map(p => appPeersManager.getPeerID(p))));\r\n\r\n      const out = {\r\n        my_results: [...myResults].slice(0, limit),\r\n        results: peers.results.map(p => appPeersManager.getPeerID(p))\r\n      };\r\n\r\n      return out;\r\n    });\r\n  } */\r\n  public searchContacts(query: string, limit = 20) {\r\n    return apiManager.invokeApi('contacts.search', {\r\n      q: query,\r\n      limit\r\n    }).then(peers => {\r\n      this.saveApiUsers(peers.users);\r\n      appChatsManager.saveApiChats(peers.chats);\r\n\r\n      const out = {\r\n        my_results: [...new Set(peers.my_results.map(p => appPeersManager.getPeerId(p)))], // ! contacts.search returns duplicates in my_results\r\n        results: peers.results.map(p => appPeersManager.getPeerId(p))\r\n      };\r\n\r\n      return out;\r\n    });\r\n  }\r\n\r\n  private onContactUpdated(userId: number, isContact: boolean) {\r\n    const curIsContact = this.isContact(userId);\r\n    if(isContact !== curIsContact) {\r\n      if(isContact) {\r\n        this.pushContact(userId);\r\n      } else {\r\n        this.contactsList.delete(userId);\r\n      }\r\n\r\n      this.onContactsModified();\r\n\r\n      rootScope.dispatchEvent('contacts_update', userId);\r\n    }\r\n  }\r\n\r\n  public updateUsername(username: string) {\r\n    return apiManager.invokeApi('account.updateUsername', {\r\n      username\r\n    }).then((user) => {\r\n      this.saveApiUser(user);\r\n    });\r\n  }\r\n\r\n  public setUserStatus(userId: number, offline: boolean) {\r\n    if(this.isBot(userId)) {\r\n      return;\r\n    }\r\n\r\n    const user = this.users[userId];\r\n    if(user) {\r\n      const status: any = offline ? {\r\n        _: 'userStatusOffline',\r\n        was_online: tsNow(true)\r\n      } : {\r\n        _: 'userStatusOnline',\r\n        expires: tsNow(true) + 500\r\n      };\r\n\r\n      user.status = status;\r\n      //user.sortStatus = this.getUserStatusForSort(user.status);\r\n      rootScope.dispatchEvent('user_update', userId);\r\n    }\r\n  }\r\n\r\n  public addContact(userId: number, first_name: string, last_name: string, phone: string, showPhone?: true) {\r\n    return apiManager.invokeApi('contacts.addContact', {\r\n      id: this.getUserInput(userId),\r\n      first_name,\r\n      last_name,\r\n      phone,\r\n      add_phone_privacy_exception: showPhone\r\n    }).then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\r\n\r\n      this.onContactUpdated(userId, true);\r\n    });\r\n  }\r\n\r\n  public deleteContacts(userIds: number[]) {\r\n    return apiManager.invokeApi('contacts.deleteContacts', {\r\n      id: userIds.map(userId => this.getUserInput(userId))\r\n    }).then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\r\n\r\n      userIds.forEach(userId => {\r\n        this.onContactUpdated(userId, false);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nconst appUsersManager = new AppUsersManager();\r\nMOUNT_CLASS_TO.appUsersManager = appUsersManager;\r\nexport default appUsersManager\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { ChatPhoto, DialogPeer, InputDialogPeer, InputNotifyPeer, InputPeer, Peer, Update, UserProfilePhoto } from \"../../layer\";\r\nimport type { LangPackKey } from \"../langPack\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { isObject } from \"../../helpers/object\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport I18n from '../langPack';\r\n\r\n// https://github.com/eelcohn/Telegram-API/wiki/Calculating-color-for-a-Telegram-user-on-IRC\r\n/*\r\n  HTML-color  IRC-color  Description\r\n  #c03d33     4          red\r\n  #4fad2d     3          green\r\n  #d09306     7          yellow\r\n  #168acd     10         blue\r\n  #8544d6     6          purple\r\n  #cd4073     13         pink\r\n  #2996ad     11         sea\r\n  #ce671b     5          orange\r\n  */\r\nconst DialogColorsFg = ['#fc5c51', '#0fb297', '#d09306', '#3d72ed', '#895dd5', '#cd4073', '#00c1a6', '#fa790f'];\r\nconst DialogColors = ['red', 'green', 'yellow', 'blue', 'violet', 'pink', 'cyan', 'orange'];\r\nconst DialogColorsMap = [0, 7, 4, 1, 6, 3, 5];\r\n\r\nexport type PeerType = 'channel' | 'chat' | 'megagroup' | 'group' | 'saved';\r\nexport class AppPeersManager {\r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      updatePeerBlocked: (update) => {\r\n        rootScope.dispatchEvent('peer_block', {peerId: this.getPeerId(update.peer_id), blocked: update.blocked});\r\n      }\r\n    });\r\n  }\r\n  /* public savePeerInstance(peerId: number, instance: any) {\r\n    if(peerId < 0) appChatsManager.saveApiChat(instance);\r\n    else appUsersManager.saveApiUser(instance);\r\n  } */\r\n\r\n  public canPinMessage(peerId: number) {\r\n    return peerId > 0 || appChatsManager.hasRights(-peerId, 'pin_messages');\r\n  }\r\n\r\n  public getPeerPhoto(peerId: number): UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto {\r\n    const photo = peerId > 0\r\n      ? appUsersManager.getUserPhoto(peerId)\r\n      : appChatsManager.getChatPhoto(-peerId);\r\n\r\n    return photo._ !== 'chatPhotoEmpty' && photo._ !== 'userProfilePhotoEmpty' ? photo : null;\r\n  }\r\n\r\n  public getPeerMigratedTo(peerId: number) {\r\n    if(peerId >= 0) {\r\n      return false;\r\n    }\r\n\r\n    let chat = appChatsManager.getChat(-peerId);\r\n    if(chat && chat.migrated_to && chat.pFlags.deactivated) {\r\n      return this.getPeerId(chat.migrated_to);\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  public getPeerTitle(peerId: number | any, plainText = false, onlyFirstName = false) {\r\n    if(!peerId) {\r\n      peerId = rootScope.myId;\r\n    }\r\n    \r\n    let peer: any = {}; \r\n    if(!isObject(peerId)) {\r\n      peer = this.getPeer(peerId);\r\n    } else peer = peerId;\r\n\r\n    let title = '';\r\n    if(peerId > 0) {\r\n      if(peer.first_name) title += peer.first_name;\r\n      if(peer.last_name) title += ' ' + peer.last_name;\r\n  \r\n      if(!title) title = peer.pFlags.deleted ? I18n.format('HiddenName', true) : peer.username;\r\n      else title = title.trim();\r\n    } else {\r\n      title = peer.title;\r\n    }\r\n\r\n    if(onlyFirstName) {\r\n      title = title.split(' ')[0];\r\n    }\r\n    \r\n    return plainText ? title : RichTextProcessor.wrapEmojiText(title);\r\n  }\r\n  \r\n  public getOutputPeer(peerId: number): Peer {\r\n    if(peerId > 0) {\r\n      return {_: 'peerUser', user_id: peerId};\r\n    }\r\n\r\n    let chatId = -peerId;\r\n    if(appChatsManager.isChannel(chatId)) {\r\n      return {_: 'peerChannel', channel_id: chatId};\r\n    }\r\n\r\n    return {_: 'peerChat', chat_id: chatId};\r\n  }\r\n\r\n  public getPeerString(peerId: number) {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUserString(peerId);\r\n    }\r\n    return appChatsManager.getChatString(-peerId);\r\n  }\r\n\r\n  public getPeerUsername(peerId: number): string {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUser(peerId).username || '';\r\n    }\r\n    return appChatsManager.getChat(-peerId).username || '';\r\n  }\r\n\r\n  public getPeer(peerId: number) {\r\n    return peerId > 0\r\n      ? appUsersManager.getUser(peerId)\r\n      : appChatsManager.getChat(-peerId)\r\n  }\r\n\r\n  public getPeerId(peerId: Peer | InputPeer | number | string): number {\r\n    if(typeof(peerId) === 'number') return peerId;\r\n    else if(isObject(peerId)) return (peerId as Peer.peerUser).user_id || -((peerId as Peer.peerChannel).channel_id || (peerId as Peer.peerChat).chat_id);\r\n    else if(!peerId) return 0;\r\n    \r\n    const isUser = (peerId as string).charAt(0) === 'u';\r\n    const peerParams = (peerId as string).substr(1).split('_');\r\n\r\n    return isUser ? +peerParams[0] : -peerParams[0] || 0;\r\n  }\r\n\r\n  public getDialogPeer(peerId: number): DialogPeer {\r\n    return {\r\n      _: 'dialogPeer',\r\n      peer: this.getOutputPeer(peerId)\r\n    };\r\n  }\r\n\r\n  public isChannel(peerId: number): boolean {\r\n    return (peerId < 0) && appChatsManager.isChannel(-peerId);\r\n  }\r\n\r\n  public isMegagroup(peerId: number) {\r\n    return (peerId < 0) && appChatsManager.isMegagroup(-peerId);\r\n  }\r\n\r\n  public isAnyGroup(peerId: number): boolean {\r\n    return (peerId < 0) && !appChatsManager.isBroadcast(-peerId);\r\n  }\r\n\r\n  public isBroadcast(peerId: number): boolean {\r\n    return this.isChannel(peerId) && !this.isMegagroup(peerId);\r\n  }\r\n\r\n  public isBot(peerId: number): boolean {\r\n    return (peerId > 0) && appUsersManager.isBot(peerId);\r\n  }\r\n\r\n  /* public getInputPeer(peerString: string): InputPeer {\r\n    var firstChar = peerString.charAt(0);\r\n    var peerParams = peerString.substr(1).split('_');\r\n    let id = +peerParams[0];\r\n\r\n    if(firstChar === 'u') {\r\n      //appUsersManager.saveUserAccess(id, peerParams[1]);\r\n\r\n      return {\r\n        _: 'inputPeerUser',\r\n        user_id: id,\r\n        access_hash: peerParams[1]\r\n      };\r\n    } else if(firstChar === 'c' || firstChar === 's') {\r\n      //appChatsManager.saveChannelAccess(id, peerParams[1]);\r\n      if(firstChar === 's') {\r\n        appChatsManager.saveIsMegagroup(id);\r\n      }\r\n\r\n      return {\r\n        _: 'inputPeerChannel',\r\n        channel_id: id,\r\n        access_hash: peerParams[1] || '0'\r\n      };\r\n    } else {\r\n      return {\r\n        _: 'inputPeerChat',\r\n        chat_id: id\r\n      };\r\n    }\r\n  } */\r\n\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId: true): Exclude<InputNotifyPeer, InputNotifyPeer.inputNotifyPeer>;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: false): InputNotifyPeer.inputNotifyPeer;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: boolean): InputNotifyPeer {\r\n    if(ignorePeerId) {\r\n      if(peerId > 0) {\r\n        return {_: 'inputNotifyUsers'};\r\n      } else {\r\n        if(appPeersManager.isBroadcast(peerId)) {\r\n          return {_: 'inputNotifyBroadcasts'};\r\n        } else {\r\n          return {_: 'inputNotifyChats'};\r\n        }\r\n      }\r\n    } else {\r\n      return {\r\n        _: 'inputNotifyPeer', \r\n        peer: this.getInputPeerById(peerId)\r\n      };\r\n    }\r\n  }\r\n\r\n  public getInputPeerById(peerId: number): InputPeer {\r\n    if(!peerId) {\r\n      return {_: 'inputPeerEmpty'};\r\n    }\r\n\r\n    if(peerId < 0) {\r\n      const chatId = -peerId;\r\n      if(!appChatsManager.isChannel(chatId)) {\r\n        return appChatsManager.getChatInputPeer(chatId);\r\n      } else {\r\n        return appChatsManager.getChannelInputPeer(chatId);\r\n      }\r\n    }\r\n\r\n    return {\r\n      _: 'inputPeerUser',\r\n      user_id: peerId,\r\n      access_hash: appUsersManager.getUser(peerId).access_hash\r\n    };\r\n  }\r\n\r\n  public getInputDialogPeerById(peerId: number): InputDialogPeer {\r\n    return {\r\n      _: 'inputDialogPeer',\r\n      peer: this.getInputPeerById(peerId)\r\n    }\r\n  }\r\n\r\n  public getPeerColorById(peerId: number, pic = true) {\r\n    if(!peerId) return '';\r\n\r\n    const idx = DialogColorsMap[(peerId < 0 ? -peerId : peerId) % 7];\r\n    const color = (pic ? DialogColors : DialogColorsFg)[idx];\r\n    return color;\r\n  }\r\n\r\n  public getPeerSearchText(peerId: number) {\r\n    let text;\r\n    if(peerId > 0) {\r\n      text = '%pu ' + appUsersManager.getUserSearchText(peerId);\r\n    } else if(peerId < 0) {\r\n      const chat = appChatsManager.getChat(-peerId);\r\n      text = '%pg ' + (chat.title || '');\r\n    }\r\n    return text;\r\n  }\r\n\r\n  public getDialogType(peerId: number): PeerType {\r\n    if(appPeersManager.isMegagroup(peerId)) {\r\n      return 'megagroup';\r\n    } else if(appPeersManager.isChannel(peerId)) {\r\n      return 'channel';\r\n    } else if(peerId < 0) {\r\n      return 'group';\r\n    } else {\r\n      return peerId === rootScope.myId ? 'saved' : 'chat';\r\n    }\r\n  }\r\n\r\n  public getDeleteButtonText(peerId: number): LangPackKey {\r\n    switch(this.getDialogType(peerId)) {\r\n      case 'channel':\r\n        return 'ChatList.Context.LeaveChannel';\r\n\r\n      case 'megagroup':\r\n        return 'ChatList.Context.LeaveGroup';\r\n\r\n      case 'group':\r\n        return 'ChatList.Context.DeleteAndExit';\r\n      \r\n      default:\r\n        return 'ChatList.Context.DeleteChat';\r\n    }\r\n  }\r\n}\r\n\r\nconst appPeersManager = new AppPeersManager();\r\nMOUNT_CLASS_TO.appPeersManager = appPeersManager;\r\nexport default appPeersManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { isObject, safeReplaceObject, copy, deepEqual } from \"../../helpers/object\";\r\nimport { ChannelParticipant, Chat, ChatAdminRights, ChatBannedRights, ChatParticipant, ChatPhoto, InputChannel, InputChatPhoto, InputFile, InputPeer, Update, Updates } from \"../../layer\";\r\nimport apiManagerProxy from \"../mtproto/mtprotoworker\";\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from \"./appStateManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\n\r\nexport type Channel = Chat.channel;\r\n\r\nexport type ChatRights = keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags'] | 'change_type' | 'change_permissions' | 'delete_chat' | 'view_participants';\r\n\r\nexport class AppChatsManager {\r\n  private storage = appStateManager.storages.chats;\r\n  \r\n  private chats: {[id: number]: Chat.channel | Chat.chat | any};\r\n  //private usernames: any;\r\n  //private channelAccess: any;\r\n  //private megagroups: {[id: number]: true};\r\n\r\n  constructor() {\r\n    this.clear();\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      /* updateChannel: (update) => {\r\n        const channelId = update.channel_id;\r\n        //console.log('updateChannel:', update);\r\n        rootScope.broadcast('channel_settings', {channelId});\r\n      }, */\r\n\r\n      updateChannelParticipant: (update) => {\r\n        apiManagerProxy.clearCache('channels.getParticipants', (params) => {\r\n          return (params.channel as InputChannel.inputChannel).channel_id === update.channel_id;\r\n        });\r\n      },\r\n\r\n      updateChatDefaultBannedRights: (update) => {\r\n        const chatId = -appPeersManager.getPeerId(update.peer);\r\n        const chat: Chat.chat = this.chats[chatId];\r\n        if(chat) {\r\n          chat.default_banned_rights = update.default_banned_rights;\r\n          rootScope.dispatchEvent('chat_update', chatId);\r\n        }\r\n      }\r\n    });\r\n\r\n    appStateManager.getState().then((state) => {\r\n      const chats = appStateManager.storagesResults.chats;\r\n      if(chats.length) {\r\n        this.chats = {};\r\n        for(let i = 0, length = chats.length; i < length; ++i) {\r\n          const chat = chats[i];\r\n          if(chat) {\r\n            this.chats[chat.id] = chat;\r\n          }\r\n        }\r\n      }\r\n\r\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\r\n        if(peerId > 0 || this.storage.getFromCache(-peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.set({\r\n          [-peerId]: this.getChat(-peerId)\r\n        });\r\n      });\r\n\r\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\r\n        if(peerId > 0 || !this.storage.getFromCache(-peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.delete(-peerId);\r\n      });\r\n    });\r\n  }\r\n\r\n  public clear() {\r\n    if(this.chats) {\r\n      for(const chatId in this.chats) {\r\n        if(!appStateManager.isPeerNeeded(-+chatId)) {\r\n          /* const chat = this.chats[chatId];\r\n          if(chat.username) {\r\n            delete this.usernames[cleanUsername(chat.username)];\r\n          } */\r\n  \r\n          delete this.chats[chatId];\r\n        }\r\n      }\r\n    } else {\r\n      this.chats = {};\r\n    }\r\n  }\r\n\r\n  public saveApiChats(apiChats: any[], override?: boolean) {\r\n    apiChats.forEach(chat => this.saveApiChat(chat, override));\r\n  }\r\n\r\n  public saveApiChat(chat: Chat, override?: boolean) {\r\n    if(chat._ === 'chatEmpty') return;\r\n    /* if(chat._ !== 'chat' && chat._ !== 'channel') {\r\n      return;\r\n    } */\r\n    \r\n    // * exclude from state\r\n    // defineNotNumerableProperties(chat, ['rTitle', 'initials']);\r\n\r\n    const oldChat: Exclude<Chat, Chat.chatEmpty> = this.chats[chat.id];\r\n\r\n    /* if(oldChat && !override) {\r\n      return;\r\n    } */\r\n\r\n    if((chat as Chat.chat).pFlags === undefined) {\r\n      (chat as Chat.chat).pFlags = {};\r\n    }\r\n\r\n    if((chat as Chat.channel).pFlags.min && oldChat !== undefined) {\r\n      return;\r\n    }\r\n\r\n    chat.initials = RichTextProcessor.getAbbreviation(chat.title);\r\n\r\n    if(chat._ === 'channel' &&\r\n        chat.participants_count === undefined &&\r\n        oldChat !== undefined &&\r\n        (oldChat as Chat.channel).participants_count) {\r\n      chat.participants_count = (oldChat as Chat.channel).participants_count;\r\n    }\r\n\r\n    /* if(chat.username) {\r\n      let searchUsername = searchIndexManager.cleanUsername(chat.username);\r\n      this.usernames[searchUsername] = chat.id;\r\n    } */\r\n\r\n    let changedPhoto = false, changedTitle = false;\r\n    if(oldChat === undefined) {\r\n      this.chats[chat.id] = chat;\r\n    } else {\r\n      const oldPhotoId = ((oldChat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\r\n      const newPhotoId = ((chat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\r\n      if(oldPhotoId !== newPhotoId) {\r\n        changedPhoto = true;\r\n      }\r\n\r\n      if(oldChat.title !== chat.title) {\r\n        changedTitle = true;\r\n      }\r\n\r\n      safeReplaceObject(oldChat, chat);\r\n      rootScope.dispatchEvent('chat_update', chat.id);\r\n    }\r\n\r\n    if(changedPhoto) {\r\n      rootScope.dispatchEvent('avatar_update', -chat.id);\r\n    }\r\n\r\n    if(changedTitle) {\r\n      rootScope.dispatchEvent('peer_title_edit', -chat.id);\r\n    }\r\n\r\n    if(appStateManager.isPeerNeeded(-chat.id)) {\r\n      this.storage.set({\r\n        [chat.id]: chat\r\n      });\r\n    }\r\n  }\r\n\r\n  public getChat(id: number) {\r\n    if(id < 0) id = -id;\r\n    return this.chats[id] || {_: 'chatEmpty', id, deleted: true, access_hash: '', pFlags: {}/* this.channelAccess[id] */};\r\n  }\r\n\r\n  public combineParticipantBannedRights(id: number, rights: ChatBannedRights) {\r\n    const chat: Chat.channel = this.getChat(id);\r\n\r\n    if(chat.default_banned_rights) {\r\n      rights = copy(rights);\r\n      const defaultRights = chat.default_banned_rights.pFlags;\r\n      for(let i in defaultRights) {\r\n        // @ts-ignore\r\n        rights.pFlags[i] = defaultRights[i];\r\n      }\r\n    }\r\n\r\n    return rights;\r\n  }\r\n\r\n  public hasRights(id: number, action: ChatRights, rights?: ChatAdminRights | ChatBannedRights, isThread?: boolean) {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'chatEmpty') return false;\r\n\r\n    if(chat._ === 'chatForbidden' ||\r\n        chat._ === 'channelForbidden' ||\r\n        (chat as Chat.chat).pFlags.kicked ||\r\n        (chat.pFlags.left && !(chat as Chat.channel).pFlags.megagroup)) {\r\n      return false;\r\n    }\r\n\r\n    if(chat.pFlags.creator && rights === undefined) {\r\n      return true;\r\n    }\r\n\r\n    if(!rights) {\r\n      rights = chat.admin_rights || (chat as Chat.channel).banned_rights || chat.default_banned_rights;\r\n\r\n      if(!rights) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    let myFlags: Partial<{[flag in keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags']]: true}> = {};\r\n    if(rights) {\r\n      myFlags = rights.pFlags as any;\r\n    }\r\n\r\n    switch(action) {\r\n      case 'embed_links':\r\n      case 'send_games':\r\n      case 'send_gifs':\r\n      case 'send_inline':\r\n      case 'send_media':\r\n      case 'send_messages':\r\n      case 'send_polls':\r\n      case 'send_stickers': {\r\n        if(!isThread && chat.pFlags.left) {\r\n          return false;\r\n        }\r\n\r\n        if(rights._ === 'chatBannedRights' && myFlags[action]) {\r\n          return false;\r\n        }\r\n\r\n        if(chat._ === 'channel') {\r\n          if(!chat.pFlags.megagroup && !myFlags.post_messages) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      // * revoke foreign messages\r\n      case 'delete_messages': {\r\n        return !!myFlags.delete_messages;\r\n      }\r\n\r\n      case 'pin_messages': {\r\n        return rights._ === 'chatAdminRights' ? myFlags[action] || !!myFlags.post_messages : !myFlags[action];\r\n      }\r\n\r\n      case 'invite_users':\r\n      case 'change_info': {\r\n        return rights._ === 'chatAdminRights' ? myFlags[action] : !myFlags[action];\r\n      }\r\n\r\n      // * only creator can do that\r\n      case 'change_type':\r\n      case 'delete_chat': {\r\n        return false;\r\n      }\r\n\r\n      case 'change_permissions': {\r\n        return rights._ === 'chatAdminRights' && myFlags['ban_users'];\r\n      }\r\n\r\n      case 'view_participants': {\r\n        return !!(chat._ === 'chat' || !chat.pFlags.broadcast || chat.pFlags.creator || chat.admin_rights);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public editChatDefaultBannedRights(id: number, banned_rights: ChatBannedRights) {\r\n    const chat: Chat.chat = this.getChat(id);\r\n    if(chat.default_banned_rights) {\r\n      if(chat.default_banned_rights.until_date === banned_rights.until_date && deepEqual(chat.default_banned_rights.pFlags, banned_rights.pFlags)) {\r\n        return Promise.resolve();\r\n      }\r\n    }\r\n    \r\n    return apiManager.invokeApi('messages.editChatDefaultBannedRights', {\r\n      peer: appPeersManager.getInputPeerById(-id),\r\n      banned_rights\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  /* public resolveUsername(username: string) {\r\n    return this.usernames[username] || 0;\r\n  } */\r\n\r\n  /* public saveChannelAccess(id: number, accessHash: string) {\r\n    this.channelAccess[id] = accessHash;\r\n  } */\r\n\r\n  /* public saveIsMegagroup(id: number) {\r\n    this.megagroups[id] = true;\r\n  } */\r\n\r\n  public isChannel(id: number) {\r\n    const chat = this.chats[id];\r\n    return chat && (chat._ === 'channel' || chat._ === 'channelForbidden')/*  || this.channelAccess[id] */;\r\n  }\r\n\r\n  public isMegagroup(id: number) {\r\n    /* if(this.megagroups[id]) {\r\n      return true;\r\n    } */\r\n\r\n    const chat = this.chats[id];\r\n    return chat && chat._ === 'channel' && chat.pFlags.megagroup;\r\n  }\r\n\r\n  public isBroadcast(id: number) {\r\n    return this.isChannel(id) && !this.isMegagroup(id);\r\n  }\r\n\r\n  public isInChat(id: number) {\r\n    let good = true;\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'channelForbidden' \r\n      || chat._ === 'chatForbidden' \r\n      || chat._ === 'chatEmpty' \r\n      || (chat as Chat.chat).pFlags.left \r\n      || (chat as Chat.chat).pFlags.kicked \r\n      || (chat as Chat.chat).pFlags.deactivated) {\r\n      good = false;\r\n    }\r\n\r\n    return good;\r\n  }\r\n\r\n  public getChannelInput(id: number): InputChannel {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'chatEmpty' || !(chat as Chat.channel).access_hash) {\r\n      return {\r\n        _: 'inputChannelEmpty'\r\n      };\r\n    } else {\r\n      return {\r\n        _: 'inputChannel',\r\n        channel_id: id,\r\n        access_hash: (chat as Chat.channel).access_hash/*  || this.channelAccess[id] */ || '0'\r\n      };\r\n    }\r\n  }\r\n\r\n  public getChatInputPeer(id: number): InputPeer.inputPeerChat {\r\n    return {\r\n      _: 'inputPeerChat',\r\n      chat_id: id\r\n    };\r\n  }\r\n\r\n  public getChannelInputPeer(id: number): InputPeer.inputPeerChannel {\r\n    return {\r\n      _: 'inputPeerChannel',\r\n      channel_id: id,\r\n      access_hash: this.getChat(id).access_hash/*  || this.channelAccess[id] */ || 0\r\n    };\r\n  }\r\n\r\n  public hasChat(id: number, allowMin?: true) {\r\n    const chat = this.chats[id]\r\n    return isObject(chat) && (allowMin || !chat.pFlags.min);\r\n  }\r\n\r\n  public getChatPhoto(id: number) {\r\n    const chat: Chat.chat = this.getChat(id);\r\n\r\n    return chat && chat.photo || {\r\n      _: 'chatPhotoEmpty'\r\n    };\r\n  }\r\n\r\n  public getChatString(id: number) {\r\n    const chat = this.getChat(id);\r\n    if(this.isChannel(id)) {\r\n      return (this.isMegagroup(id) ? 's' : 'c') + id + '_' + chat.access_hash;\r\n    }\r\n    return 'g' + id;\r\n  }\r\n\r\n  /* public wrapForFull(id: number, fullChat: any) {\r\n    const chatFull = copy(fullChat);\r\n    const chat = this.getChat(id);\r\n\r\n    if(!chatFull.participants_count) {\r\n      chatFull.participants_count = chat.participants_count;\r\n    }\r\n\r\n    if(chatFull.participants &&\r\n        chatFull.participants._ === 'chatParticipants') {\r\n      chatFull.participants.participants = this.wrapParticipants(id, chatFull.participants.participants);\r\n    }\r\n\r\n    if(chatFull.about) {\r\n      chatFull.rAbout = RichTextProcessor.wrapRichText(chatFull.about, {noLinebreaks: true});\r\n    }\r\n\r\n    //chatFull.peerString = this.getChatString(id);\r\n    chatFull.chat = chat;\r\n\r\n    return chatFull;\r\n  }\r\n\r\n  public wrapParticipants(id: number, participants: any[]) {\r\n    const chat = this.getChat(id);\r\n    const myId = appUsersManager.getSelf().id;\r\n    if(this.isChannel(id)) {\r\n      const isAdmin = chat.pFlags.creator;\r\n      participants.forEach((participant) => {\r\n        participant.canLeave = myId === participant.user_id;\r\n        participant.canKick = isAdmin && participant._ === 'channelParticipant';\r\n\r\n        // just for order by last seen\r\n        participant.user = appUsersManager.getUser(participant.user_id);\r\n      });\r\n    } else {\r\n      const isAdmin = chat.pFlags.creator || chat.pFlags.admins_enabled && chat.pFlags.admin;\r\n      participants.forEach((participant) => {\r\n        participant.canLeave = myId === participant.user_id;\r\n        participant.canKick = !participant.canLeave && (\r\n          chat.pFlags.creator ||\r\n          participant._ === 'chatParticipant' && (isAdmin || myId === participant.inviter_id)\r\n        );\r\n\r\n        // just for order by last seen\r\n        participant.user = appUsersManager.getUser(participant.user_id);\r\n      });\r\n    }\r\n\r\n    return participants;\r\n  } */\r\n\r\n  public createChannel(title: string, about: string): Promise<number> {\r\n    return apiManager.invokeApi('channels.createChannel', {\r\n      broadcast: true,\r\n      title,\r\n      about\r\n    }).then((updates: any) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n\r\n      const channelId = updates.chats[0].id;\r\n      rootScope.dispatchEvent('history_focus', {peerId: -channelId});\r\n\r\n      return channelId;\r\n    });\r\n  }\r\n\r\n  public inviteToChannel(id: number, userIds: number[]) {\r\n    const input = this.getChannelInput(id);\r\n    const usersInputs = userIds.map(u => appUsersManager.getUserInput(u));\r\n\r\n    return apiManager.invokeApi('channels.inviteToChannel', {\r\n      channel: input,\r\n      users: usersInputs\r\n    }).then(updates => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public createChat(title: string, userIds: number[]): Promise<number> {\r\n    return apiManager.invokeApi('messages.createChat', {\r\n      users: userIds.map(u => appUsersManager.getUserInput(u)),\r\n      title\r\n    }).then(updates => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n\r\n      const chatId = (updates as any as Updates.updates).chats[0].id;\r\n      rootScope.dispatchEvent('history_focus', {peerId: -chatId});\r\n\r\n      return chatId;\r\n    });\r\n  }\r\n\r\n  private onChatUpdated = (chatId: number, updates: any) => {\r\n    //console.log('onChatUpdated', chatId, updates);\r\n\r\n    apiUpdatesManager.processUpdateMessage(updates);\r\n    if(updates &&\r\n        /* updates.updates &&\r\n        updates.updates.length && */\r\n        this.isChannel(chatId)) {\r\n      rootScope.dispatchEvent('invalidate_participants', chatId);\r\n    }\r\n  };\r\n\r\n  public leaveChannel(id: number) {\r\n    return apiManager.invokeApi('channels.leaveChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public joinChannel(id: number) {\r\n    return apiManager.invokeApi('channels.joinChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public addChatUser(id: number, userId: number, fwdLimit = 100) {\r\n    return apiManager.invokeApi('messages.addChatUser', {\r\n      chat_id: id,\r\n      user_id: appUsersManager.getUserInput(userId),\r\n      fwd_limit: fwdLimit\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public deleteChatUser(id: number, userId: number) {\r\n    return apiManager.invokeApi('messages.deleteChatUser', {\r\n      chat_id: id,\r\n      user_id: appUsersManager.getUserInput(userId)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public leaveChat(id: number) {\r\n    return this.deleteChatUser(id, appUsersManager.getSelf().id);\r\n  }\r\n\r\n  public leave(id: number) {\r\n    return this.isChannel(id) ? this.leaveChannel(id) : this.leaveChat(id);\r\n  }\r\n\r\n  public delete(id: number) {\r\n    return this.isChannel(id) ? this.deleteChannel(id) : this.deleteChat(id);\r\n  }\r\n\r\n  public deleteChannel(id: number) {\r\n    return apiManager.invokeApi('channels.deleteChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public deleteChat(id: number) {\r\n    //return this.leaveChat(id).then(() => {\r\n      return apiManager.invokeApi('messages.deleteChat', {\r\n        chat_id: id\r\n      });\r\n    //});\r\n  }\r\n\r\n  public migrateChat(id: number): Promise<number> {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'channel') return Promise.resolve(chat.id);\r\n    return apiManager.invokeApi('messages.migrateChat', {\r\n      chat_id: id\r\n    }).then((updates) => {\r\n      this.onChatUpdated(id, updates);\r\n      const update: Update.updateChannel = (updates as Updates.updates).updates.find(u => u._ === 'updateChannel') as any;\r\n      return update.channel_id;\r\n    });\r\n  }\r\n\r\n  public updateUsername(id: number, username: string) {\r\n    return apiManager.invokeApi('channels.updateUsername', {\r\n      channel: this.getChannelInput(id),\r\n      username\r\n    }).then((bool) => {\r\n      if(bool) {\r\n        const chat: Chat.channel = this.getChat(id);\r\n        chat.username = username;\r\n      }\r\n\r\n      return bool;\r\n    });\r\n  }\r\n\r\n  public editPhoto(id: number, inputFile: InputFile) {\r\n    const inputChatPhoto: InputChatPhoto = {\r\n      _: 'inputChatUploadedPhoto',\r\n      file: inputFile\r\n    };\r\n\r\n    let promise: any;\r\n    if(this.isChannel(id)) {\r\n      promise = apiManager.invokeApi('channels.editPhoto', {\r\n        channel: this.getChannelInput(id),\r\n        photo: inputChatPhoto\r\n      });\r\n    } else {\r\n      promise = apiManager.invokeApi('messages.editChatPhoto', {\r\n        chat_id: id,\r\n        photo: inputChatPhoto\r\n      });\r\n    }\r\n\r\n    return promise.then((updates: any) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public editTitle(id: number, title: string) {\r\n    let promise: any;\r\n\r\n    if(this.isChannel(id)) {\r\n      promise = apiManager.invokeApi('channels.editTitle', {\r\n        channel: this.getChannelInput(id),\r\n        title\r\n      });\r\n    } else {\r\n      promise = apiManager.invokeApi('messages.editChatTitle', {\r\n        chat_id: id,\r\n        title\r\n      });\r\n    }\r\n\r\n    return promise.then((updates: any) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public editAbout(id: number, about: string) {\r\n    return apiManager.invokeApi('messages.editChatAbout', {\r\n      peer: appPeersManager.getInputPeerById(-id),\r\n      about\r\n    }).then(bool => {\r\n      //apiUpdatesManager.processUpdateMessage(updates);\r\n      rootScope.dispatchEvent('peer_bio_edit', -id);\r\n    });\r\n  }\r\n\r\n  public getParticipantPeerId(participant: ChannelParticipant | ChatParticipant) {\r\n    const peerId = (participant as ChannelParticipant.channelParticipantBanned).peer ? \r\n      appPeersManager.getPeerId((participant as ChannelParticipant.channelParticipantBanned).peer) : \r\n      (participant as ChatParticipant.chatParticipant).user_id;\r\n    return peerId;\r\n  }\r\n\r\n  public editBanned(id: number, participant: number | ChannelParticipant, banned_rights: ChatBannedRights) {\r\n    const peerId = typeof(participant) === 'number' ? participant : this.getParticipantPeerId(participant);\r\n    return apiManager.invokeApi('channels.editBanned', {\r\n      channel: this.getChannelInput(id),\r\n      participant: appPeersManager.getInputPeerById(peerId),\r\n      banned_rights\r\n    }).then((updates) => {\r\n      this.onChatUpdated(id, updates);\r\n\r\n      if(typeof(participant) !== 'number') {\r\n        const timestamp = Date.now() / 1000 | 0;\r\n        apiUpdatesManager.processUpdateMessage({\r\n          _: 'updateShort',\r\n          update: {\r\n            _: 'updateChannelParticipant',\r\n            channel_id: id,\r\n            date: timestamp,\r\n            actor_id: undefined,\r\n            qts: undefined,\r\n            user_id: peerId,\r\n            prev_participant: participant,\r\n            new_participant: Object.keys(banned_rights.pFlags).length ? {\r\n              _: 'channelParticipantBanned',\r\n              date: timestamp,\r\n              banned_rights,\r\n              kicked_by: appUsersManager.getSelf().id,\r\n              peer: appPeersManager.getOutputPeer(peerId),\r\n              pFlags: {}\r\n            } : undefined\r\n          } as Update.updateChannelParticipant\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public clearChannelParticipantBannedRights(id: number, participant: number | ChannelParticipant) {\r\n    return this.editBanned(id, participant, {\r\n      _: 'chatBannedRights',\r\n      until_date: 0,\r\n      pFlags: {}\r\n    });\r\n  }\r\n  \r\n  public kickFromChannel(id: number, participant: number | ChannelParticipant) {\r\n    return this.editBanned(id, participant, {\r\n      _: 'chatBannedRights',\r\n      until_date: 0,\r\n      pFlags: {\r\n        view_messages: true\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nconst appChatsManager = new AppChatsManager();\r\nMOUNT_CLASS_TO.appChatsManager = appChatsManager;\r\nexport default appChatsManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\n//import apiManager from '../mtproto/apiManager';\r\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport { Update } from '../../layer';\r\nimport { logger, LogTypes } from '../logger';\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport rootScope from '../rootScope';\r\n//import networkerFactory from '../mtproto/networkerFactory';\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from './appStateManager';\r\n\r\ntype UpdatesState = {\r\n  pendingPtsUpdates: {pts: number, pts_count: number}[],\r\n  pendingSeqUpdates?: {[seq: number]: {seq: number, date: number, updates: any[]}},\r\n  syncPending: {\r\n    seqAwaiting?: number,\r\n    ptsAwaiting?: true,\r\n    timeout: number\r\n  },\r\n  syncLoading: Promise<void>,\r\n\r\n  seq?: number,\r\n  pts?: number,\r\n  date?: number,\r\n  lastPtsUpdateTime?: number\r\n};\r\n\r\nconst SYNC_DELAY = 6;\r\n\r\nexport class ApiUpdatesManager {\r\n  public updatesState: UpdatesState = {\r\n    pendingPtsUpdates: [],\r\n    pendingSeqUpdates: {},\r\n    syncPending: null,\r\n    syncLoading: null\r\n  };\r\n\r\n  private channelStates: {[channelId: number]: UpdatesState} = {};\r\n  private attached = false;\r\n\r\n  private log = logger('UPDATES', LogTypes.Error | LogTypes.Warn | LogTypes.Log/*  | LogTypes.Debug */);\r\n  private debug = DEBUG;\r\n\r\n  private setProxy() {\r\n    const self = this;\r\n    this.updatesState = new Proxy(this.updatesState, {\r\n      set: function(target: ApiUpdatesManager['updatesState'], key: keyof ApiUpdatesManager['updatesState'], value: ApiUpdatesManager['updatesState'][typeof key]) {\r\n        // @ts-ignore\r\n        target[key] = value;\r\n        self.saveUpdatesState();\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  public saveUpdatesState() {\r\n    const us = this.updatesState;\r\n    appStateManager.pushToState('updates', {\r\n      seq: us.seq,\r\n      pts: us.pts,\r\n      date: us.date\r\n    });\r\n  }\r\n\r\n  private popPendingSeqUpdate() {\r\n    const state = this.updatesState;\r\n    const nextSeq = state.seq + 1;\r\n    const pendingUpdatesData = state.pendingSeqUpdates[nextSeq];\r\n    if(!pendingUpdatesData) {\r\n      return false;\r\n    }\r\n\r\n    const updates = pendingUpdatesData.updates;\r\n    for(let i = 0, length = updates.length; i < length; ++i) {\r\n      this.saveUpdate(updates[i]);\r\n    }\r\n\r\n    state.seq = pendingUpdatesData.seq;\r\n    if(pendingUpdatesData.date && state.date < pendingUpdatesData.date) {\r\n      state.date = pendingUpdatesData.date;\r\n    }\r\n    delete state.pendingSeqUpdates[nextSeq];\r\n  \r\n    if(!this.popPendingSeqUpdate() &&\r\n      state.syncPending &&\r\n      state.syncPending.seqAwaiting &&\r\n      state.seq >= state.syncPending.seqAwaiting) {\r\n      if(!state.syncPending.ptsAwaiting) {\r\n        clearTimeout(state.syncPending.timeout);\r\n        state.syncPending = null;\r\n      } else {\r\n        delete state.syncPending.seqAwaiting;\r\n      }\r\n    }\r\n  \r\n    return true;\r\n  }\r\n\r\n  private popPendingPtsUpdate(channelId: number) {\r\n    const curState = channelId ? this.getChannelState(channelId) : this.updatesState;\r\n    if(!curState.pendingPtsUpdates.length) {\r\n      return false;\r\n    }\r\n\r\n    curState.pendingPtsUpdates.sort((a, b) => {\r\n      return a.pts - b.pts;\r\n    });\r\n    // this.log('pop update', channelId, curState.pendingPtsUpdates)\r\n  \r\n    let curPts = curState.pts;\r\n    let goodPts = 0;\r\n    let goodIndex = 0;\r\n    for(let i = 0, length = curState.pendingPtsUpdates.length; i < length; ++i) {\r\n      const update = curState.pendingPtsUpdates[i];\r\n      curPts += update.pts_count;\r\n      if(curPts >= update.pts) {\r\n        goodPts = update.pts;\r\n        goodIndex = i;\r\n      }\r\n    }\r\n  \r\n    if(!goodPts) {\r\n      return false;\r\n    }\r\n  \r\n    this.debug && this.log.debug('pop pending pts updates', goodPts, curState.pendingPtsUpdates.slice(0, goodIndex + 1));\r\n  \r\n    curState.pts = goodPts;\r\n    for(let i = 0; i <= goodIndex; ++i) {\r\n      const update = curState.pendingPtsUpdates[i];\r\n\r\n      // @ts-ignore\r\n      this.saveUpdate(update);\r\n    }\r\n    curState.pendingPtsUpdates.splice(0, goodIndex + 1);\r\n  \r\n    if(!curState.pendingPtsUpdates.length && curState.syncPending) {\r\n      if(!curState.syncPending.seqAwaiting) {\r\n        clearTimeout(curState.syncPending.timeout);\r\n        curState.syncPending = null;\r\n      } else {\r\n        delete curState.syncPending.ptsAwaiting;\r\n      }\r\n    }\r\n  \r\n    return true;\r\n  }\r\n\r\n  public forceGetDifference() {\r\n    if(!this.updatesState.syncLoading) {\r\n      this.getDifference();\r\n    }\r\n  }\r\n\r\n  public processUpdateMessage = (updateMessage: any, options: Partial<{\r\n    override: boolean\r\n  }> = {}) => {\r\n    // return forceGetDifference()\r\n    const processOpts = {\r\n      date: updateMessage.date,\r\n      seq: updateMessage.seq,\r\n      seqStart: updateMessage.seq_start,\r\n      //ignoreSyncLoading: options.ignoreSyncLoading\r\n    };\r\n\r\n    this.debug && this.log.debug('processUpdateMessage', updateMessage);\r\n  \r\n    switch(updateMessage._) {\r\n      case 'updatesTooLong':\r\n      case 'new_session_created':\r\n        this.forceGetDifference();\r\n        break;\r\n  \r\n      case 'updateShort':\r\n        this.processUpdate(updateMessage.update, processOpts);\r\n        break;\r\n  \r\n      case 'updateShortMessage':\r\n      case 'updateShortChatMessage': {\r\n        this.debug && this.log.debug('updateShortMessage | updateShortChatMessage', {...updateMessage});\r\n        const isOut = updateMessage.pFlags.out;\r\n        const fromId = updateMessage.from_id || (isOut ? rootScope.myId : updateMessage.user_id);\r\n        const toId = updateMessage.chat_id\r\n          ? -updateMessage.chat_id\r\n          : (updateMessage.user_id || rootScope.myId);\r\n  \r\n        this.processUpdate({\r\n          _: 'updateNewMessage',\r\n          message: {\r\n            _: 'message',\r\n            pFlags: updateMessage.pFlags,\r\n            id: updateMessage.id,\r\n            from_id: appPeersManager.getOutputPeer(fromId),\r\n            peer_id: appPeersManager.getOutputPeer(toId),\r\n            date: updateMessage.date,\r\n            message: updateMessage.message,\r\n            fwd_from: updateMessage.fwd_from,\r\n            reply_to: updateMessage.reply_to,\r\n            entities: updateMessage.entities\r\n          },\r\n          pts: updateMessage.pts,\r\n          pts_count: updateMessage.pts_count\r\n        }, processOpts);\r\n        break;\r\n      }\r\n  \r\n      case 'updatesCombined':\r\n      case 'updates':\r\n        appUsersManager.saveApiUsers(updateMessage.users, options.override);\r\n        appChatsManager.saveApiChats(updateMessage.chats, options.override);\r\n  \r\n        updateMessage.updates.forEach((update: any) => {\r\n          this.processUpdate(update, processOpts);\r\n        });\r\n        break;\r\n  \r\n      default:\r\n        this.log.warn('Unknown update message', updateMessage);\r\n    }\r\n  };\r\n  \r\n  private getDifference(first = false): Promise<void> {\r\n    // this.trace('Get full diff')\r\n    const updatesState = this.updatesState;\r\n    let wasSyncing = updatesState.syncLoading;\r\n    if(!wasSyncing) {\r\n      updatesState.pendingSeqUpdates = {};\r\n      updatesState.pendingPtsUpdates = [];\r\n    }\r\n  \r\n    if(updatesState.syncPending) {\r\n      clearTimeout(updatesState.syncPending.timeout);\r\n      updatesState.syncPending = null;\r\n    }\r\n\r\n    const promise = apiManager.invokeApi('updates.getDifference', {\r\n      pts: updatesState.pts, \r\n      pts_total_limit: first && false ? 1200 : undefined,\r\n      date: updatesState.date, \r\n      qts: -1\r\n    }, {\r\n      timeout: 0x7fffffff\r\n    }).then((differenceResult) => {\r\n      this.debug && this.log.debug('Get diff result', differenceResult);\r\n\r\n      if(differenceResult._ === 'updates.differenceEmpty') {\r\n        this.debug && this.log.debug('apply empty diff', differenceResult.seq);\r\n        updatesState.date = differenceResult.date;\r\n        updatesState.seq = differenceResult.seq;\r\n        return;\r\n      }\r\n\r\n      // ! SORRY I'M SORRY I'M SORRY\r\n      if(first) {\r\n        rootScope.dispatchEvent('state_synchronizing');\r\n      }\r\n\r\n      if(differenceResult._ !== 'updates.differenceTooLong') {\r\n        appUsersManager.saveApiUsers(differenceResult.users);\r\n        appChatsManager.saveApiChats(differenceResult.chats);\r\n\r\n        // Should be first because of updateMessageID\r\n        // this.log('applying', differenceResult.other_updates.length, 'other updates')\r\n    \r\n        differenceResult.other_updates.forEach((update) => {\r\n          switch(update._) {\r\n            case 'updateChannelTooLong':\r\n            case 'updateNewChannelMessage':\r\n            case 'updateEditChannelMessage':\r\n              this.processUpdate(update);\r\n              return;\r\n          }\r\n          \r\n          this.saveUpdate(update);\r\n        });\r\n\r\n        // this.log('applying', differenceResult.new_messages.length, 'new messages')\r\n        differenceResult.new_messages.forEach((apiMessage) => {\r\n          this.saveUpdate({\r\n            _: 'updateNewMessage',\r\n            message: apiMessage,\r\n            pts: updatesState.pts,\r\n            pts_count: 0\r\n          });\r\n        });\r\n\r\n        const nextState = differenceResult._ === 'updates.difference' ? differenceResult.state : differenceResult.intermediate_state;\r\n        updatesState.seq = nextState.seq;\r\n        updatesState.pts = nextState.pts;\r\n        updatesState.date = nextState.date;\r\n      } else {\r\n        updatesState.pts = differenceResult.pts;\r\n        delete updatesState.seq;\r\n        delete updatesState.date;\r\n        \r\n        this.channelStates = {};\r\n        \r\n        rootScope.dispatchEvent('state_cleared');\r\n      }\r\n  \r\n      // this.log('apply diff', updatesState.seq, updatesState.pts)\r\n  \r\n      if(differenceResult._ === 'updates.differenceSlice') {\r\n        return this.getDifference();\r\n      } else {\r\n        this.debug && this.log.debug('finished get diff');\r\n      }\r\n    });\r\n\r\n    if(!wasSyncing) {\r\n      this.justAName(updatesState, promise);\r\n    }\r\n  \r\n    return promise;\r\n  }\r\n\r\n  private getChannelDifference(channelId: number): Promise<void> {\r\n    const channelState = this.getChannelState(channelId);\r\n    const wasSyncing = channelState.syncLoading;\r\n    if(!wasSyncing) {\r\n      channelState.pendingPtsUpdates = [];\r\n    }\r\n\r\n    if(channelState.syncPending) {\r\n      clearTimeout(channelState.syncPending.timeout);\r\n      channelState.syncPending = null;\r\n    }\r\n\r\n    //this.log.trace('Get channel diff', appChatsManager.getChat(channelId), channelState.pts);\r\n    const promise = apiManager.invokeApi('updates.getChannelDifference', {\r\n      channel: appChatsManager.getChannelInput(channelId),\r\n      filter: {_: 'channelMessagesFilterEmpty'},\r\n      pts: channelState.pts,\r\n      limit: 30\r\n    }, {timeout: 0x7fffffff}).then((differenceResult) => {\r\n      this.debug && this.log.debug('Get channel diff result', differenceResult)\r\n      channelState.pts = 'pts' in differenceResult ? differenceResult.pts : undefined;\r\n  \r\n      if(differenceResult._ === 'updates.channelDifferenceEmpty') {\r\n        this.debug && this.log.debug('apply channel empty diff', differenceResult);\r\n        return;\r\n      }\r\n  \r\n      if(differenceResult._ === 'updates.channelDifferenceTooLong') {\r\n        this.debug && this.log.debug('channel diff too long', differenceResult);\r\n        delete this.channelStates[channelId];\r\n\r\n        // @ts-ignore\r\n        this.saveUpdate({_: 'updateChannelReload', channel_id: channelId});\r\n        return;\r\n      }\r\n  \r\n      appUsersManager.saveApiUsers(differenceResult.users);\r\n      appChatsManager.saveApiChats(differenceResult.chats);\r\n  \r\n      // Should be first because of updateMessageID\r\n      this.debug && this.log.debug('applying', differenceResult.other_updates.length, 'channel other updates');\r\n      differenceResult.other_updates.forEach((update) => {\r\n        this.saveUpdate(update);\r\n      });\r\n  \r\n      this.debug && this.log.debug('applying', differenceResult.new_messages.length, 'channel new messages');\r\n      differenceResult.new_messages.forEach((apiMessage) => {\r\n        this.saveUpdate({\r\n          _: 'updateNewChannelMessage',\r\n          message: apiMessage,\r\n          pts: channelState.pts,\r\n          pts_count: 0\r\n        });\r\n      });\r\n  \r\n      this.debug && this.log.debug('apply channel diff', channelState.pts);\r\n  \r\n      if(differenceResult._ === 'updates.channelDifference' &&\r\n        !differenceResult.pFlags['final']) {\r\n        return this.getChannelDifference(channelId);\r\n      } else {\r\n        this.debug && this.log.debug('finished channel get diff');\r\n      }\r\n    });\r\n\r\n    if(!wasSyncing) {\r\n      this.justAName(channelState, promise, channelId);\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  private justAName(state: UpdatesState, promise: UpdatesState['syncLoading'], channelId?: number) {\r\n    state.syncLoading = promise;\r\n    rootScope.dispatchEvent('state_synchronizing', channelId);\r\n\r\n    promise.then(() => {\r\n      state.syncLoading = null;\r\n      rootScope.dispatchEvent('state_synchronized', channelId);\r\n    }, () => {\r\n      state.syncLoading = null;\r\n    });\r\n  }\r\n  \r\n  public addChannelState(channelId: number, pts: number) {\r\n    if(!pts) {\r\n      throw new Error('Add channel state without pts ' + channelId);\r\n    }\r\n\r\n    if(!(channelId in this.channelStates)) {\r\n      this.channelStates[channelId] = {\r\n        pts,\r\n        pendingPtsUpdates: [],\r\n        syncPending: null,\r\n        syncLoading: null\r\n      };\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getChannelState(channelId: number, pts?: number) {\r\n    if(this.channelStates[channelId] === undefined) {\r\n      this.addChannelState(channelId, pts);\r\n    }\r\n\r\n    return this.channelStates[channelId];\r\n  }\r\n\r\n  private processUpdate(update: any, options: Partial<{\r\n    date: number,\r\n    seq: number,\r\n    seqStart: number/* ,\r\n    ignoreSyncLoading: boolean */\r\n  }> = {}) {\r\n    let channelId = 0;\r\n    switch(update._) {\r\n      case 'updateNewChannelMessage':\r\n      case 'updateEditChannelMessage':\r\n        channelId = -appPeersManager.getPeerId(update.message.peer_id);\r\n        break;\r\n      case 'updateDeleteChannelMessages':\r\n        channelId = update.channel_id;\r\n        break;\r\n      case 'updateChannelTooLong':\r\n        channelId = update.channel_id;\r\n        if(!(channelId in this.channelStates)) {\r\n          return false;\r\n        }\r\n        break;\r\n    }\r\n  \r\n    const curState = channelId ? this.getChannelState(channelId, update.pts) : this.updatesState;\r\n  \r\n    // this.log.log('process', channelId, curState.pts, update)\r\n  \r\n    if(curState.syncLoading/*  && !options.ignoreSyncLoading */) {\r\n      return false;\r\n    }\r\n  \r\n    if(update._ === 'updateChannelTooLong') {\r\n      if(!curState.lastPtsUpdateTime ||\r\n          curState.lastPtsUpdateTime < (Date.now() - SYNC_DELAY)) {\r\n        // this.log.trace('channel too long, get diff', channelId, update)\r\n        this.getChannelDifference(channelId);\r\n      }\r\n      return false;\r\n    }\r\n  \r\n    if(update._ === 'updateNewMessage' ||\r\n        update._ === 'updateEditMessage' ||\r\n        update._ === 'updateNewChannelMessage' ||\r\n        update._ === 'updateEditChannelMessage') {\r\n      const message = update.message;\r\n      const toPeerId = appPeersManager.getPeerId(message.peer_id);\r\n      const fwdHeader = message.fwd_from || {};\r\n      let reason: any = false;\r\n      if(message.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(message.from_id), message.pFlags.post/* || channelId*/) && (reason = 'author') ||\r\n          fwdHeader.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(fwdHeader.from_id), !!fwdHeader.channel_id) && (reason = 'fwdAuthor') ||\r\n          fwdHeader.channel_id && !appChatsManager.hasChat(fwdHeader.channel_id, true) && (reason = 'fwdChannel') ||\r\n          toPeerId > 0 && !appUsersManager.hasUser(toPeerId) && (reason = 'toPeer User') ||\r\n          toPeerId < 0 && !appChatsManager.hasChat(-toPeerId) && (reason = 'toPeer Chat')) {\r\n        this.log.warn('Not enough data for message update', toPeerId, reason, message)\r\n        if(channelId && appChatsManager.hasChat(channelId)) {\r\n          this.getChannelDifference(channelId);\r\n        } else {\r\n          this.forceGetDifference();\r\n        }\r\n        return false;\r\n      }\r\n    } else if(channelId && !appChatsManager.hasChat(channelId)) {\r\n      // this.log.log('skip update, missing channel', channelId, update)\r\n      return false;\r\n    }\r\n  \r\n    let popPts: boolean;\r\n    let popSeq: boolean;\r\n  \r\n    if(update.pts) {\r\n      const newPts = curState.pts + (update.pts_count || 0);\r\n      if(newPts < update.pts) {\r\n        this.debug && this.log.warn('Pts hole', curState, update, channelId && appChatsManager.getChat(channelId));\r\n        curState.pendingPtsUpdates.push(update);\r\n        if(!curState.syncPending && !curState.syncLoading) {\r\n          curState.syncPending = {\r\n            timeout: window.setTimeout(() => {\r\n              curState.syncPending = null;\r\n\r\n              if(curState.syncLoading) {\r\n                return;\r\n              }\r\n\r\n              if(channelId) {\r\n                this.getChannelDifference(channelId);\r\n              } else {\r\n                this.getDifference();\r\n              }\r\n            }, SYNC_DELAY)\r\n          };\r\n        }\r\n\r\n        curState.syncPending.ptsAwaiting = true;\r\n        return false;\r\n      }\r\n\r\n      if(update.pts > curState.pts) {\r\n        curState.pts = update.pts;\r\n        popPts = true;\r\n  \r\n        curState.lastPtsUpdateTime = Date.now();\r\n      } else if(update.pts_count) {\r\n        // this.log.warn('Duplicate update', update)\r\n        return false;\r\n      }\r\n\r\n      if(channelId && options.date && this.updatesState.date < options.date) {\r\n        this.updatesState.date = options.date;\r\n      }\r\n    } else if(!channelId && options.seq > 0) {\r\n      const seq = options.seq;\r\n      const seqStart = options.seqStart || seq;\r\n  \r\n      if(seqStart !== curState.seq + 1) {\r\n        if(seqStart > curState.seq) {\r\n          this.debug && this.log.warn('Seq hole', curState, curState.syncPending && curState.syncPending.seqAwaiting);\r\n  \r\n          if(curState.pendingSeqUpdates[seqStart] === undefined) {\r\n            curState.pendingSeqUpdates[seqStart] = {seq, date: options.date, updates: []};\r\n          }\r\n          curState.pendingSeqUpdates[seqStart].updates.push(update);\r\n  \r\n          if(!curState.syncPending) {\r\n            curState.syncPending = {\r\n              timeout: window.setTimeout(() => {\r\n                curState.syncPending = null;\r\n\r\n                if(curState.syncLoading) {\r\n                  return;\r\n                }\r\n\r\n                this.getDifference();\r\n              }, SYNC_DELAY)\r\n            };\r\n          }\r\n\r\n          if(!curState.syncPending.seqAwaiting ||\r\n            curState.syncPending.seqAwaiting < seqStart) {\r\n            curState.syncPending.seqAwaiting = seqStart;\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n  \r\n      if(curState.seq !== seq) {\r\n        curState.seq = seq;\r\n        if(options.date && curState.date < options.date) {\r\n          curState.date = options.date;\r\n        }\r\n\r\n        popSeq = true;\r\n      }\r\n    }\r\n  \r\n    this.saveUpdate(update);\r\n  \r\n    if(popPts) {\r\n      this.popPendingPtsUpdate(channelId);\r\n    } else if(popSeq) {\r\n      this.popPendingSeqUpdate();\r\n    }\r\n  }\r\n\r\n  public saveUpdate(update: Update) {\r\n    //this.debug && this.log('saveUpdate', update);\r\n    rootScope.dispatchEvent(update._, update as any);\r\n  }\r\n  \r\n  public attach() {\r\n    if(this.attached) return;\r\n\r\n    //return;\r\n\r\n    this.log('attach');\r\n    \r\n    this.attached = true;\r\n\r\n    appStateManager.getState().then(_state => {\r\n      const state = _state.updates;\r\n\r\n      //rootScope.broadcast('state_synchronizing');\r\n      if(!state || !state.pts || !state.date || !state.seq) {\r\n        this.log('will get new state');\r\n\r\n        this.updatesState.syncLoading = new Promise((resolve) => {\r\n          apiManager.invokeApi('updates.getState', {}, {noErrorBox: true}).then((stateResult) => {\r\n            this.updatesState.seq = stateResult.seq;\r\n            this.updatesState.pts = stateResult.pts;\r\n            this.updatesState.date = stateResult.date;\r\n            this.saveUpdatesState();\r\n            //setTimeout(() => {\r\n              this.updatesState.syncLoading = null;\r\n              resolve();\r\n              //rootScope.broadcast('state_synchronized');\r\n            //}, 1000);\r\n        \r\n          // ! for testing\r\n          // updatesState.seq = 1\r\n          // updatesState.pts = stateResult.pts - 5000\r\n          // updatesState.date = 1\r\n          // getDifference()\r\n          });\r\n        });\r\n      } else {\r\n        // ! for testing\r\n        /* state.seq = 1;\r\n        state.pts = state.pts - 15;\r\n        state.date = 1; */\r\n\r\n        Object.assign(this.updatesState, state);\r\n        \r\n        this.log('will get difference', Object.assign({}, state));\r\n        \r\n        this.getDifference(true)/* .finally(() => {\r\n          if(this.updatesState.syncLoading) {\r\n            rootScope.broadcast('state_synchronizing');\r\n          }\r\n        }) */;\r\n      }\r\n\r\n      apiManager.setUpdatesProcessor(this.processUpdateMessage);\r\n\r\n      // this.updatesState.syncLoading.then(() => {\r\n        this.setProxy();\r\n      // });\r\n    });\r\n  }\r\n}\r\n\r\nconst apiUpdatesManager = new ApiUpdatesManager();\r\nMOUNT_CLASS_TO.apiUpdatesManager = apiUpdatesManager;\r\nexport default apiUpdatesManager\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport cleanSearchText from '../helpers/cleanSearchText';\r\n\r\nexport default class SearchIndex<SearchWhat> {\r\n  private fullTexts: Map<SearchWhat, string> = new Map();\r\n\r\n  // minChars can be 0 because it requires at least one word (one symbol) to be found\r\n  constructor(private cleanText = true, private latinize = true, private minChars: number = 0) {\r\n\r\n  }\r\n\r\n  public indexObject(id: SearchWhat, searchText: string) {\r\n    /* if(searchIndex.fullTexts.hasOwnProperty(id)) {\r\n      return false;\r\n    } */\r\n\r\n    if(searchText.trim() && this.cleanText) {\r\n      searchText = cleanSearchText(searchText, this.latinize);\r\n    }\r\n\r\n    if(!searchText) {\r\n      this.fullTexts.delete(id);\r\n      return false;\r\n    }\r\n\r\n    this.fullTexts.set(id, searchText);\r\n    \r\n    /* const shortIndexes = searchIndex.shortIndexes;\r\n    searchText.split(' ').forEach((searchWord) => {\r\n      let len = Math.min(searchWord.length, 3),\r\n        wordPart, i;\r\n      for(i = 1; i <= len; i++) {\r\n        wordPart = searchWord.substr(0, i);\r\n        if(shortIndexes[wordPart] === undefined) {\r\n          shortIndexes[wordPart] = [id];\r\n        } else {\r\n          shortIndexes[wordPart].push(id);\r\n        }\r\n      }\r\n    }); */\r\n  }\r\n\r\n  public search(query: string) {\r\n    const fullTexts = this.fullTexts;\r\n    //const shortIndexes = searchIndex.shortIndexes;\r\n\r\n    if(this.cleanText) {\r\n      query = cleanSearchText(query, this.latinize);\r\n    }\r\n\r\n    const newFoundObjs: Array<{fullText: string, fullTextLength: number, what: SearchWhat, foundChars: number}> = [];\r\n    const queryWords = query.split(' ');\r\n    const queryWordsLength = queryWords.length;\r\n    fullTexts.forEach((fullText, what) => {\r\n      let found = true;\r\n      let foundChars = 0;\r\n      for(let i = 0; i < queryWordsLength; ++i) { // * verify that all words are found\r\n        const word = queryWords[i];\r\n        const idx = fullText.indexOf(word);\r\n        if(idx === -1 || (idx !== 0 && fullText[idx - 1] !== ' ')) { // * search only from word beginning\r\n          found = false;\r\n          break;\r\n        }\r\n\r\n        foundChars += word.length;\r\n      }\r\n\r\n      if(found) {\r\n        foundChars += queryWordsLength - 1;\r\n        const fullTextLength = fullText.length;\r\n        if(this.minChars <= foundChars || fullTextLength <= foundChars) {\r\n          newFoundObjs.push({fullText, fullTextLength, what, foundChars});\r\n        }\r\n      }\r\n    });\r\n\r\n    newFoundObjs.sort((a, b) => a.fullTextLength - b.fullTextLength || b.foundChars - a.foundChars);\r\n\r\n    //newFoundObjs.sort((a, b) => a.fullText.localeCompare(b.fullText));\r\n    const newFoundObjs2: Set<SearchWhat> = new Set(newFoundObjs.map(o => o.what));\r\n\r\n    /* const queryWords = query.split(' ');\r\n    let foundArr: number[];\r\n    for(let i = 0; i < queryWords.length; i++) {\r\n      const newFound = shortIndexes[queryWords[i].substr(0, 3)];\r\n      if(!newFound) {\r\n        foundArr = [];\r\n        break;\r\n      }\r\n      \r\n      if(foundArr === undefined || foundArr.length > newFound.length) {\r\n        foundArr = newFound;\r\n      }\r\n    }\r\n\r\n    for(let j = 0; j < foundArr.length; j++) {\r\n      let found = true;\r\n      let searchText = fullTexts[foundArr[j]];\r\n      for(let i = 0; i < queryWords.length; i++) {\r\n        if(searchText.indexOf(queryWords[i]) === -1) {\r\n          found = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if(found) {\r\n        newFoundObjs[foundArr[j]] = true;\r\n      }\r\n    } */\r\n\r\n    return newFoundObjs2;\r\n  }\r\n}\r\n"],"sourceRoot":""}