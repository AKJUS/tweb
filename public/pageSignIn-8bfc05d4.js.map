{"version":3,"mappings":"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","names":["btnNext","btnQr","onFirstMount","inputWrapper","lastCountrySelected","lastCountryCodeSelected","CountryInputField","country","code","telInputField","telEl","placeCaretAtEnd","TelInputField","formatted","lottieLoader","countryName","countryInputField","onSubmit","CheckboxField","signedCheckboxField","keepSigned","rootScope","apiManagerProxy","state","stateStorage","Button","cancelEvent","toggle","toggleDisability","replaceContent","i18n","putPreloader","phone_number","App","authorization","__vitePreload","m","err","attachClickEvent","pageSignQR","h4","_i18n","subtitle","page","tryAgain","nearestDcResult","langPack","I18n","done","promise","dcId","dcs","g","_dcs","dbKey","sessionStorage","IS_TOUCH_SUPPORTED","getLanguageChangeButton","Page","ripple"],"sources":["../src/pages/pageSignIn.ts"],"sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport {putPreloader} from '../components/putPreloader';\r\nimport Page from './page';\r\nimport CheckboxField from '../components/checkboxField';\r\nimport Button from '../components/button';\r\nimport IS_TOUCH_SUPPORTED from '../environment/touchSupport';\r\nimport App from '../config/app';\r\nimport I18n, {_i18n, i18n} from '../lib/langPack';\r\nimport lottieLoader from '../lib/rlottie/lottieLoader';\r\nimport ripple from '../components/ripple';\r\nimport pageSignQR from './pageSignQR';\r\nimport getLanguageChangeButton from '../components/languageChangeButton';\r\nimport cancelEvent from '../helpers/dom/cancelEvent';\r\nimport {attachClickEvent} from '../helpers/dom/clickEvent';\r\nimport replaceContent from '../helpers/dom/replaceContent';\r\nimport toggleDisability from '../helpers/dom/toggleDisability';\r\nimport sessionStorage from '../lib/sessionStorage';\r\nimport {DcAuthKey} from '../types';\r\nimport placeCaretAtEnd from '../helpers/dom/placeCaretAtEnd';\r\nimport {HelpCountry, HelpCountryCode} from '../layer';\r\nimport stateStorage from '../lib/stateStorage';\r\nimport rootScope from '../lib/rootScope';\r\nimport TelInputField from '../components/telInputField';\r\nimport apiManagerProxy from '../lib/mtproto/mtprotoworker';\r\nimport CountryInputField from '../components/countryInputField';\r\n\r\n// import _countries from '../countries_pretty.json';\r\nlet btnNext: HTMLButtonElement = null, btnQr: HTMLButtonElement;\r\n\r\nconst onFirstMount = () => {\r\n  /* if(Modes.test) {\r\n    Countries.push({\r\n      _: 'help.country',\r\n      default_name: 'Test Country',\r\n      country_codes: [{\r\n        _: 'help.countryCode',\r\n        country_code: '999 66',\r\n        patterns: ['999 66 XXX XX']\r\n      }],\r\n      iso2: 'KK'\r\n    });\r\n\r\n    console.log('Added test country to list!');\r\n  } */\r\n\r\n  // const countries: Country[] = _countries.default.filter((c) => c.emoji);\r\n  // const countries: Country[] = Countries.filter((c) => c.emoji).sort((a, b) => a.name.localeCompare(b.name));\r\n  // const countries = I18n.countriesList.filter((country) => !country.pFlags?.hidden);\r\n\r\n  const inputWrapper = document.createElement('div');\r\n  inputWrapper.classList.add('input-wrapper');\r\n\r\n  let lastCountrySelected: HelpCountry, lastCountryCodeSelected: HelpCountryCode;\r\n  const countryInputField = new CountryInputField({\r\n    onCountryChange: (country, code) => {\r\n      lastCountrySelected = country, lastCountryCodeSelected = code;\r\n\r\n      if(!code) {\r\n        return;\r\n      }\r\n\r\n      telInputField.value = telInputField.lastValue = '+' + code.country_code;\r\n      setTimeout(() => {\r\n        telEl.focus();\r\n        placeCaretAtEnd(telEl, true);\r\n      }, 0);\r\n    }\r\n  });\r\n\r\n  const telInputField = new TelInputField({\r\n    onInput: (formatted) => {\r\n      lottieLoader.loadLottieWorkers();\r\n\r\n      const {country, code} = formatted || {};\r\n      const countryName = country ? country.name || country.default_name : ''/* 'Unknown' */;\r\n      if(countryName !== countryInputField.value && (\r\n        !lastCountrySelected ||\r\n          !country ||\r\n          !code || (\r\n          lastCountrySelected !== country &&\r\n            lastCountryCodeSelected.country_code !== code.country_code\r\n        )\r\n      )\r\n      ) {\r\n        countryInputField.override(country, code, countryName);\r\n      }\r\n\r\n      // if(country && (telInputField.value.length - 1) >= (country.pattern ? country.pattern.length : 9)) {\r\n      if(country || (telInputField.value.length - 1) > 1) {\r\n        btnNext.style.visibility = '';\r\n      } else {\r\n        btnNext.style.visibility = 'hidden';\r\n      }\r\n    }\r\n  });\r\n\r\n  const telEl = telInputField.input;\r\n\r\n  telEl.addEventListener('keypress', (e) => {\r\n    // console.log('keypress', this.value);\r\n    if(!btnNext.style.visibility &&/* this.value.length >= 9 && */ e.key === 'Enter') {\r\n      return onSubmit();\r\n    }\r\n  });\r\n\r\n  /* telEl.addEventListener('focus', function(this: typeof telEl, e) {\r\n    this.removeAttribute('readonly'); // fix autocomplete\r\n  });*/\r\n\r\n  const signedCheckboxField = new CheckboxField({\r\n    text: 'Login.KeepSigned',\r\n    name: 'keepSession',\r\n    withRipple: true,\r\n    checked: true\r\n  });\r\n\r\n  signedCheckboxField.input.addEventListener('change', () => {\r\n    const keepSigned = signedCheckboxField.checked;\r\n    rootScope.managers.appStateManager.pushToState('keepSigned', keepSigned);\r\n\r\n    apiManagerProxy.toggleStorages(keepSigned, true);\r\n  });\r\n\r\n  apiManagerProxy.getState().then((state) => {\r\n    if(!stateStorage.isAvailable()) {\r\n      signedCheckboxField.checked = false;\r\n      signedCheckboxField.label.classList.add('checkbox-disabled');\r\n    } else {\r\n      signedCheckboxField.checked = state.keepSigned;\r\n    }\r\n  });\r\n\r\n  btnNext = Button('btn-primary btn-color-primary', {text: 'Login.Next'});\r\n  btnNext.style.visibility = 'hidden';\r\n\r\n  const onSubmit = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    const toggle = toggleDisability([/* telEl, countryInput,  */btnNext, btnQr], true);\r\n\r\n    replaceContent(btnNext, i18n('PleaseWait'));\r\n    putPreloader(btnNext);\r\n\r\n    // return;\r\n\r\n    const phone_number = telInputField.value;\r\n    rootScope.managers.apiManager.invokeApi('auth.sendCode', {\r\n      phone_number: phone_number,\r\n      api_id: App.id,\r\n      api_hash: App.hash,\r\n      settings: {\r\n        _: 'codeSettings', // that's how we sending Type\r\n        pFlags: {}\r\n      }\r\n      // lang_code: navigator.language || 'en'\r\n    }).then((code) => {\r\n      // console.log('got code', code);\r\n\r\n      if(code._ === 'auth.sentCodeSuccess') {\r\n        const {authorization} = code;\r\n        if(authorization._ === 'auth.authorization') {\r\n          rootScope.managers.apiManager.setUser(authorization.user);\r\n\r\n          import('./pageIm').then((m) => {\r\n            m.default.mount();\r\n          });\r\n        }\r\n      }\r\n\r\n      import('./pageAuthCode').then((m) => m.default.mount(Object.assign(code, {phone_number: phone_number})));\r\n    }).catch((err) => {\r\n      toggle();\r\n\r\n      switch(err.type) {\r\n        case 'PHONE_NUMBER_INVALID':\r\n          telInputField.setError();\r\n          replaceContent(telInputField.label, i18n('Login.PhoneLabelInvalid'));\r\n          telEl.classList.add('error');\r\n          replaceContent(btnNext, i18n('Login.Next'));\r\n          break;\r\n        default:\r\n          console.error('auth.sendCode error:', err);\r\n          btnNext.innerText = err.type;\r\n          break;\r\n      }\r\n    });\r\n  };\r\n\r\n  attachClickEvent(btnNext, onSubmit);\r\n\r\n  btnQr = Button('btn-primary btn-secondary btn-primary-transparent primary', {text: 'Login.QR.Login'});\r\n\r\n  const qrMounted = false;\r\n  btnQr.addEventListener('click', () => {\r\n    pageSignQR.mount();\r\n    /* const promise = import('./pageSignQR');\r\n    btnQr.disabled = true;\r\n\r\n    let preloaderDiv: HTMLElement;\r\n    if(!qrMounted) {\r\n      preloaderDiv = putPreloader(btnQr);\r\n      qrMounted = true;\r\n    }\r\n\r\n    promise.then((module) => {\r\n      module.default.mount();\r\n\r\n      setTimeout(() => {\r\n        btnQr.removeAttribute('disabled');\r\n        if(preloaderDiv) {\r\n          preloaderDiv.remove();\r\n        }\r\n      }, 200);\r\n    }); */\r\n  });\r\n\r\n  inputWrapper.append(countryInputField.container, telInputField.container, signedCheckboxField.label, btnNext, btnQr);\r\n\r\n  const h4 = document.createElement('h4');\r\n  h4.classList.add('text-center');\r\n  _i18n(h4, 'Login.Title');\r\n\r\n  const subtitle = document.createElement('div');\r\n  subtitle.classList.add('subtitle', 'text-center');\r\n  _i18n(subtitle, 'Login.StartText');\r\n\r\n  page.pageEl.querySelector('.container').append(h4, subtitle, inputWrapper);\r\n\r\n  const tryAgain = () => {\r\n    rootScope.managers.apiManager.invokeApi('help.getNearestDc').then((nearestDcResult) => {\r\n      const langPack = stateStorage.getFromCache('langPack');\r\n      if(langPack && !langPack.countries?.hash) {\r\n        I18n.getLangPack(langPack.lang_code).then(() => {\r\n          telInputField.simulateInputEvent();\r\n        });\r\n      }\r\n\r\n      const dcs = new Set([1, 2, 3, 4, 5]);\r\n      const done: number[] = [nearestDcResult.this_dc];\r\n\r\n      let promise: Promise<any>;\r\n      if(nearestDcResult.nearest_dc !== nearestDcResult.this_dc) {\r\n        promise = rootScope.managers.apiManager.getNetworkerVoid(nearestDcResult.nearest_dc).then(() => {\r\n          done.push(nearestDcResult.nearest_dc);\r\n        });\r\n      }\r\n\r\n      (promise || Promise.resolve()).then(() => {\r\n        done.forEach((dcId) => {\r\n          dcs.delete(dcId);\r\n        });\r\n\r\n        const _dcs = [...dcs];\r\n        const g = async(): Promise<void> => {\r\n          const dcId = _dcs.shift();\r\n          if(!dcId) return;\r\n\r\n          const dbKey: DcAuthKey = `dc${dcId}_auth_key` as any;\r\n          const key = await sessionStorage.get(dbKey);\r\n          if(key) {\r\n            return g();\r\n          }\r\n\r\n          setTimeout(() => { // * если одновременно запросить все нетворкеры, не будет проходить запрос на код\r\n            rootScope.managers.apiManager.getNetworkerVoid(dcId/* , {fileDownload: true} */).finally(g);\r\n          }, /* done.includes(dcId) ? 0 :  */3000);\r\n        };\r\n\r\n        g();\r\n      });\r\n\r\n      return nearestDcResult;\r\n    }).then((nearestDcResult) => {\r\n      if(!countryInputField.value.length && !telInputField.value.length) {\r\n        countryInputField.selectCountryByIso2(nearestDcResult.country);\r\n      }\r\n\r\n      // console.log('woohoo', nearestDcResult, country);\r\n    })// .catch(tryAgain);\r\n  };\r\n\r\n  if(!IS_TOUCH_SUPPORTED) {\r\n    setTimeout(() => {\r\n      telEl.focus();\r\n    }, 0);\r\n  }\r\n\r\n  getLanguageChangeButton(inputWrapper);\r\n\r\n  tryAgain();\r\n};\r\n\r\nconst page = new Page('page-sign', true, onFirstMount, () => {\r\n  if(btnNext) {\r\n    replaceContent(btnNext, i18n('Login.Next'));\r\n    ripple(btnNext, undefined, undefined, true);\r\n    btnNext.removeAttribute('disabled');\r\n  }\r\n\r\n  if(btnQr) {\r\n    btnQr.removeAttribute('disabled');\r\n  }\r\n\r\n  rootScope.managers.appStateManager.pushToState('authState', {_: 'authStateSignIn'});\r\n});\r\n\r\nexport default page;\r\n"],"file":"pageSignIn-8bfc05d4.js"}