{"version":3,"file":"231.6daa4b78a67992db4f2a.chunk.js","mappings":"oKAYA,IAAIA,EAEJ,MAoCMC,EAAO,IAAI,IAAK,mBAAmB,GApCpB,KAAW,O,OAAD,E,OAAA,E,EAAA,aAC7B,OAAaA,EAAKC,OAAOC,mBAAmB,GAE5C,MAAM,KAACC,EAAI,MAAEC,EAAK,OAAEC,GAAUN,EAC9B,IAAIO,EACJ,IACE,oCAA0CH,GAC1C,MAAMI,QAAsB,kCAAwC,mCAAoC,CACtGC,OAAQ,OACRC,SAAU,SACVC,eAAgBN,GACf,CAACD,KAAAA,EAAMQ,cAAc,IAED,uBAApBJ,EAAcK,IACf,gCAAsCL,EAAcM,MACpDP,EAAiB,8BAAmBQ,MAAMC,GAAMA,EAAEC,WAGpD,MAAMC,GAEC,4BADCA,EAAiBC,MAEpBD,EAAiBE,SAAU,EAC5Bb,EAAiB,8BAAyBQ,MAAMC,GAAMA,EAAEC,WAGxDI,QAAQC,MAAM,8BAA+BJ,GAKnDK,SAASC,MAAOlB,MAAAA,OAAM,EAANA,EAAQmB,QAAS,YAAcC,mBAAmBpB,GAAU,GACzEC,GACDA,EAAeQ,MAAMd,GAASA,EAAK0B,W,YAhCR,K,iRAoC+BC,IAC5D5B,EAAO4B,EACP,yCAA+C,YAAa,CAACf,EAAG,sBAAuBb,KAAAA,OAGzF","sources":["webpack://tweb/./src/pages/pageSignImport.ts"],"sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport {putPreloader} from '../components/putPreloader';\nimport App from '../config/app';\nimport rootScope from '../lib/rootScope';\nimport {AuthState} from '../types';\nimport Page from './page';\n\nlet data: AuthState.signImport['data'];\n\nconst onFirstMount = async() => {\n  putPreloader(page.pageEl.firstElementChild, true);\n\n  const {dcId, token, tgAddr} = data;\n  let mountPageAfter: Promise<Page>;\n  try {\n    rootScope.managers.apiManager.setBaseDcId(dcId);\n    const authorization = await rootScope.managers.apiManager.invokeApi('auth.importWebTokenAuthorization', {\n      api_id: App.id,\n      api_hash: App.hash,\n      web_auth_token: token\n    }, {dcId, ignoreErrors: true});\n\n    if(authorization._ === 'auth.authorization') {\n      rootScope.managers.apiManager.setUser(authorization.user);\n      mountPageAfter = import('./pageIm').then((m) => m.default);\n      // return;\n    }\n  } catch(err) {\n    switch((err as ApiError).type) {\n      case 'SESSION_PASSWORD_NEEDED':\n        (err as ApiError).handled = true;\n        mountPageAfter = import('./pagePassword').then((m) => m.default);\n        break;\n      default:\n        console.error('authorization import error:', err);\n        break;\n    }\n  }\n\n  location.hash = tgAddr?.trim() ? '#?tgaddr=' + encodeURIComponent(tgAddr) : '';\n  if(mountPageAfter) {\n    mountPageAfter.then((page) => page.mount());\n  }\n};\n\nconst page = new Page('page-signImport', true, onFirstMount, (_data: typeof data) => {\n  data = _data;\n  rootScope.managers.appStateManager.pushToState('authState', {_: 'authStateSignImport', data});\n});\n\nexport default page;\n"],"names":["data","page","pageEl","firstElementChild","dcId","token","tgAddr","mountPageAfter","authorization","api_id","api_hash","web_auth_token","ignoreErrors","_","user","then","m","default","err","type","handled","console","error","location","hash","trim","encodeURIComponent","mount","_data"],"sourceRoot":""}