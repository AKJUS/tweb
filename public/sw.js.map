{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/config/modes.ts","webpack:///./src/config/debug.ts","webpack:///./src/lib/logger.ts","webpack:///./src/lib/serviceWorker/cache.ts","webpack:///./src/helpers/blob.ts","webpack:///./src/helpers/context.ts","webpack:///./src/helpers/userAgent.ts","webpack:///./src/lib/filemanager.ts","webpack:///./src/lib/cacheStorage.ts","webpack:///./src/lib/serviceWorker/stream.ts","webpack:///./src/helpers/schedulers/debounce.ts","webpack:///./src/helpers/cancellablePromise.ts","webpack:///./src/config/databases/state.ts","webpack:///./src/lib/idb.ts","webpack:///./src/helpers/object.ts","webpack:///./src/lib/serviceWorker/push.ts","webpack:///./src/lib/serviceWorker/index.service.ts","webpack:///./src/lib/serviceWorker/timeout.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","test","location","search","indexOf","debug","http","ssl","multipleConnections","asServiceWorker","DEBUG","window","self","LogTypes","LOG_LEVELS","None","Error","Warn","Log","Debug","_logTimer","Date","now","dT","toFixed","logger","prefix","type","args","console","log","warn","info","error","trace","setPrefix","_prefix","setLevel","level","slice","reduce","acc","v","isCorrectResponse","response","ok","status","readBlobAs","blob","method","Promise","resolve","reader","FileReader","addEventListener","e","target","result","readBlobAsUint8Array","readBlobAsArrayBuffer","then","buffer","Uint8Array","blobConstruct","blobParts","mimeType","safeMimeType","blobSafeMimeType","Blob","bb","BlobBuilder","forEach","blobPart","append","getBlob","isWebWorker","WorkerGlobalScope","isServiceWorker","ServiceWorkerGlobalScope","getWindowClients","clients","matchAll","includeUncontrolled","notifyServiceWorker","all","listeners","length","listener","postMessage","notifyWorker","noop","userAgent","navigator","toLowerCase","vendor","isSafari","platform","maxTouchPoints","MSStream","match","isFirefox","blobSupported","this","fileWriter","bytes","arr","write","saveFileCallback","part","push","truncate","finalize","saveToStorage","dbName","useStorage","STORAGES","openDatabase","openDbPromise","caches","open","entryName","timeoutOperation","cache","delete","put","fileName","Response","headers","size","save","callback","reject","rejected","timeout","setTimeout","undefined","res","err","clearTimeout","fakeWriter","getFakeFileWriter","saveFile","catch","enabled","map","storage","deleteAll","cacheStorage","setInterval","keys","requests","filtered","Map","timestamp","request","url","has","set","promises","id","promise","ignoreSearch","ignoreVary","clientId","deferredPromises","find","client","taskId","streams","loadedOffsets","Set","destroy","getId","limitPart","STREAM_CHUNK_UPPER_LIMIT","STREAM_CHUNK_MIDDLE_LIMIT","destroyDebounced","fn","ms","shouldRunFirst","shouldRunLast","waitingTimeout","debounce","alignedOffset","limit","fromPreload","task","payload","dcId","JSON","stringify","windowClient","deferred","uploadFile","add","deferredHelper","isFulfilled","isRejected","notify","notifyAll","lastNotify","addNotifyListener","finally","cancel","assign","deferredPromise","bytesPromise","saveChunkToCache","preloadChunks","getChunkKey","getFile","requestFilePartFromCache","requestFilePartFromWorker","offset","end","requestFilePart","range","possibleResponse","statusText","responseForSafariFirstRange","Math","ceil","alignLimit","base","alignOffset","ab","byteLength","version","stores","db","storeName","storageIsAvailable","fromObject","safeAssign","preserve","onclose","close","createNew","indexedDB","message","finished","onerror","onsuccess","event","calledNew","onabort","transaction","onversionchange","onupgradeneeded","oldVersion","newVersion","store","objectStoreNames","contains","os","createObjectStore","indexes","index","createIndex","indexName","keyPath","objectParameters","Array","isArray","concat","getObjectStore","objectStore","clear","idx","perf","performance","oncomplete","results","getAll","defaultBaseUrl","protocol","hostname","pathname","split","join","defaults","push_mute_until","push_last_alive","push_lang","push_settings","obj","data","json","hasActiveWindows","checksPromise","muteUntil","lastAliveTime","clientList","nowTime","userInvisibleIsSupported","badge","reason","closePromise","settings","lang","icon","peerId","title","body","description","custom","channel_id","chat_id","from_id","tag","nopreview","push_message_nopreview","actions","action","push_action_mute1d","registration","showNotification","notification","notifications","onCloseNotification","fireNotification","closeAllNotifications","waitUntil","pendingNotification","focus","openWindow","baseUrl","getNotifications","len","taskListeners","notifications_clear","ping","ports","source","localNotifications","onPing","toggleStorage","onFetch","origin","respondWith","file","fetch","clone","replace","random","requestCache","scope","params","exec","header","chunks","ranges","parseRange","parse","decodeURIComponent","stream","delay","race","requestRange","onStreamFetch","onChangeState","onfetch","skipWaiting","claim","onunhandledrejection","onoffline","ononline"],"mappings":"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","file":"sw.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nconst Modes = {\r\n  test: location.search.indexOf('test=1') > 0/*  || true */,\r\n  debug: location.search.indexOf('debug=1') > 0,\r\n  http: false, //location.search.indexOf('http=1') > 0,\r\n  ssl: true, // location.search.indexOf('ssl=1') > 0 || location.protocol === 'https:' && location.search.indexOf('ssl=0') === -1,\r\n  multipleConnections: true,\r\n  asServiceWorker: false\r\n};\r\n\r\n                  \r\n                             \r\n          \r\n\r\nexport default Modes;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from \"./modes\";\r\n\r\nexport const DEBUG = process.env.NODE_ENV !== 'production' || Modes.debug;\r\nconst ctx: any = typeof(window) !== 'undefined' ? window : self;\r\nexport const MOUNT_CLASS_TO: any = DEBUG || true/*  && false */ ? ctx : {};\r\nexport default DEBUG;\r\n\r\n//let m = DEBUG;\r\n/* if(!DEBUG) {\r\n  ctx.sandpitTurtle = () => {\r\n    //if(!m) {\r\n      for(let i in MOUNT_CLASS_TO) {\r\n        ctx[i] = MOUNT_CLASS_TO[i];\r\n      }\r\n      //m = true;\r\n    //}\r\n  \r\n    //DEBUG = !DEBUG;\r\n  };\r\n} */\r\n\r\n/* export const superDebug = (object: any, key: string) => {\r\n  var d = object[key];\r\n  var beforeStr = '', afterStr = '';\r\n  for(var r of d) {\r\n    beforeStr += r.before.hex + '\\n';\r\n    afterStr += r.after.hex + '\\n';\r\n  }\r\n\r\n  beforeStr = beforeStr.trim();\r\n  afterStr = afterStr.trim();\r\n  //var beforeStr = d.map(r => r.before.hex).join('\\n');\r\n  //var afterStr = d.map(r => r.after.hex).join('\\n');\r\n\r\n  var dada = (name: string, str: string) => {\r\n    var a = document.createElement('a');\r\n    a.target = '_blank';\r\n    a.download = name + '.txt';\r\n    a.href = URL.createObjectURL(new Blob([str], {\r\n      type: 'text/plain'\r\n    }));\r\n    document.body.append(a);\r\n    a.click();\r\n  };\r\n\r\n  dada(key + '_' + 'before', beforeStr);\r\n  dada(key + '_' + 'after', afterStr);\r\n}\r\n\r\nMOUNT_CLASS_TO.superDebug = superDebug; */\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport DEBUG from \"../config/debug\";\r\n\r\nexport enum LogTypes {\r\n  None = 0,\r\n  Error = 1,\r\n  Warn = 2,\r\n  Log = 4,\r\n  Debug = 8\r\n};\r\n\r\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\r\n\r\nconst _logTimer = Date.now();\r\nfunction dT() {\r\n  return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';\r\n}\r\n\r\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error) {\r\n  if(!DEBUG/*  || true */) {\r\n    type = LogTypes.Error;\r\n  }\r\n\r\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\r\n\r\n  function Log(...args: any[]) {\r\n    return type & LogTypes.Log && console.log(dT(), prefix, ...args);\r\n  }\r\n  \r\n  Log.warn = function(...args: any[]) {\r\n    return type & LogTypes.Warn && console.warn(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.info = function(...args: any[]) {\r\n    return type & LogTypes.Log && console.info(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.error = function(...args: any[]) {\r\n    return type & LogTypes.Error && console.error(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.trace = function(...args: any[]) {\r\n    return type & LogTypes.Log && console.trace(dT(), prefix, ...args);\r\n  };\r\n\r\n  /* Log.debug = function(...args: any[]) {\r\n    return level & LogLevels.debug && console.log(dT(), prefix, ...args);\r\n  }; */\r\n\r\n  Log.debug = function(...args: any[]) {\r\n    return type & LogTypes.Debug && console.debug(dT(), prefix, ...args);\r\n  };\r\n\r\n  Log.setPrefix = function(_prefix: string) {\r\n    prefix = '[' + _prefix + ']:';\r\n  };\r\n\r\n  Log.setPrefix(prefix);\r\n\r\n  Log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\r\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\r\n  };\r\n  \r\n  return Log;\r\n};\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nconst ctx = self as any as ServiceWorkerGlobalScope;\r\nexport const CACHE_ASSETS_NAME = 'cachedAssets';\r\n\r\nfunction isCorrectResponse(response: Response) {\r\n  return response.ok && response.status === 200;\r\n}\r\n\r\nexport async function requestCache(event: FetchEvent) {\r\n  try {\r\n    const cache = await ctx.caches.open(CACHE_ASSETS_NAME);\r\n    const file = await cache.match(event.request, {ignoreVary: true});\r\n  \r\n    if(file && isCorrectResponse(file)) {\r\n      return file;\r\n    }\r\n  \r\n    const headers: HeadersInit = {'Vary': '*'};\r\n    let response = await fetch(event.request, {headers});\r\n    if(isCorrectResponse(response)) {\r\n      cache.put(event.request, response.clone());\r\n    } else if(response.status === 304) { // possible fix for 304 in Safari\r\n      const url = event.request.url.replace(/\\?.+$/, '') + '?' + (Math.random() * 100000 | 0);\r\n      response = await fetch(url, {headers});\r\n      if(isCorrectResponse(response)) {\r\n        cache.put(event.request, response.clone());\r\n      }\r\n    }\r\n  \r\n    return response;\r\n  } catch(err) {\r\n    return fetch(event.request);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport function readBlobAs(blob: Blob, method: 'readAsText'): Promise<string>;\r\nexport function readBlobAs(blob: Blob, method: 'readAsDataURL'): Promise<string>;\r\nexport function readBlobAs(blob: Blob, method: 'readAsArrayBuffer'): Promise<ArrayBuffer>;\r\nexport function readBlobAs(blob: Blob, method: 'readAsArrayBuffer' | 'readAsText' | 'readAsDataURL'): Promise<any> {\r\n  return new Promise<any>((resolve) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('loadend', (e) => resolve(e.target.result));\r\n    reader[method](blob);\r\n  });\r\n}\r\n\r\nexport function readBlobAsText(blob: Blob) {\r\n  return readBlobAs(blob, 'readAsText');\r\n}\r\n\r\nexport function readBlobAsDataURL(blob: Blob) {\r\n  return readBlobAs(blob, 'readAsDataURL');\r\n}\r\n\r\nexport function readBlobAsArrayBuffer(blob: Blob) {\r\n  return readBlobAs(blob, 'readAsArrayBuffer');\r\n}\r\n\r\nexport function readBlobAsUint8Array(blob: Blob) {\r\n  return readBlobAsArrayBuffer(blob).then(buffer => new Uint8Array(buffer));\r\n}\r\n\r\nexport function blobConstruct(blobParts: any, mimeType: string = ''): Blob {\r\n  let blob;\r\n  const safeMimeType = blobSafeMimeType(mimeType);\r\n  try {\r\n    blob = new Blob(blobParts, {type: safeMimeType});\r\n  } catch(e) {\r\n    // @ts-ignore\r\n    let bb = new BlobBuilder;\r\n    blobParts.forEach((blobPart: any) => {\r\n      bb.append(blobPart);\r\n    });\r\n    blob = bb.getBlob(safeMimeType);\r\n  }\r\n  return blob;\r\n}\r\n\r\n// https://www.iana.org/assignments/media-types/media-types.xhtml\r\nexport function blobSafeMimeType(mimeType: string) {\r\n  if([\r\n    'image/jpeg',\r\n    'image/png',\r\n    'image/gif',\r\n    'image/webp',\r\n    'image/bmp',\r\n    'video/mp4',\r\n    'video/webm',\r\n    'video/quicktime',\r\n    'audio/ogg',\r\n    'audio/mpeg',\r\n    'audio/mp4',\r\n    'application/json',\r\n    'application/pdf'\r\n  ].indexOf(mimeType) === -1) {\r\n    return 'application/octet-stream';\r\n  }\r\n\r\n  return mimeType;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport const isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\r\nexport const isServiceWorker = typeof ServiceWorkerGlobalScope !== 'undefined' && self instanceof ServiceWorkerGlobalScope;\r\nexport const isWorker = isWebWorker || isServiceWorker;\r\n\r\n// в SW может быть сразу две переменных TRUE, поэтому проверяю по последней\r\n\r\nexport const getWindowClients = () => {\r\n  return (self as any as ServiceWorkerGlobalScope)\r\n  .clients\r\n  .matchAll({ includeUncontrolled: false, type: 'window' });\r\n};\r\n\r\nconst notifyServiceWorker = (all: boolean, ...args: any[]) => {\r\n  (self as any as ServiceWorkerGlobalScope)\r\n  .clients\r\n  .matchAll({ includeUncontrolled: false, type: 'window' })\r\n  .then((listeners) => {\r\n    if(!listeners.length) {\r\n      //console.trace('no listeners?', self, listeners);\r\n      return;\r\n    }\r\n\r\n    listeners.slice(all ? 0 : -1).forEach(listener => {\r\n      // @ts-ignore\r\n      listener.postMessage(...args);\r\n    });\r\n  });\r\n};\r\n\r\nconst notifyWorker = (...args: any[]) => {\r\n  // @ts-ignore\r\n  (self as any as DedicatedWorkerGlobalScope).postMessage(...args);\r\n};\r\n\r\nconst noop = () => {};\r\n\r\nexport const notifySomeone = isServiceWorker ? notifyServiceWorker.bind(null, false) : (isWebWorker ? notifyWorker : noop);\r\nexport const notifyAll = isServiceWorker ? notifyServiceWorker.bind(null, true) : (isWebWorker ? notifyWorker : noop);\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport const userAgent = navigator ? navigator.userAgent : null;\r\nexport const isApple = navigator.userAgent.search(/OS X|iPhone|iPad|iOS/i) !== -1;\r\nexport const isAndroid = navigator.userAgent.toLowerCase().indexOf('android') !== -1;\r\nexport const isChromium = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\r\n\r\nexport const ctx = typeof(window) !== 'undefined' ? window : self;\r\n\r\n// https://stackoverflow.com/a/58065241\r\nexport const isAppleMobile = (/iPad|iPhone|iPod/.test(navigator.platform) ||\r\n  (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) &&\r\n  !ctx.MSStream;\r\n\r\nexport const isSafari = !!('safari' in ctx) || !!(userAgent && (/\\b(iPad|iPhone|iPod)\\b/.test(userAgent) || (!!userAgent.match('Safari') && !userAgent.match('Chrome'))))/*  || true */;\r\nexport const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\r\n\r\nexport const isMobileSafari = isSafari && isAppleMobile;\r\n\r\nexport const isMobile = /* screen.width && screen.width < 480 ||  */navigator.maxTouchPoints > 0 && navigator.userAgent.search(/iOS|iPhone OS|Android|BlackBerry|BB10|Series ?[64]0|J2ME|MIDP|opera mini|opera mobi|mobi.+Gecko|Windows Phone/i) != -1;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { blobConstruct, readBlobAsUint8Array } from \"../helpers/blob\";\r\n\r\nexport class FileManager {\r\n  public blobSupported = true;\r\n  \r\n  constructor() {\r\n    try {\r\n      blobConstruct([], '');\r\n    } catch(e) {\r\n      this.blobSupported = false;\r\n    }\r\n  }\r\n  \r\n  public isAvailable() {\r\n    return this.blobSupported;\r\n  }\r\n  \r\n  public write(fileWriter: ReturnType<FileManager['getFakeFileWriter']>, bytes: Uint8Array | Blob | string): Promise<void> {\r\n    if(bytes instanceof Blob) { // is file bytes\r\n      return readBlobAsUint8Array(bytes).then(arr => {\r\n        return fileWriter.write(arr);\r\n      });\r\n    } else {\r\n      return fileWriter.write(bytes);\r\n    }\r\n  }\r\n\r\n  public getFakeFileWriter(mimeType: string, saveFileCallback?: (blob: Blob) => Promise<Blob>) {\r\n    const blobParts: Array<Uint8Array | string> = [];\r\n    const fakeFileWriter = {\r\n      write: async(part: Uint8Array | string) => {\r\n        if(!this.blobSupported) {\r\n          throw false;\r\n        }\r\n        \r\n        blobParts.push(part);\r\n      },\r\n      truncate: () => {\r\n        blobParts.length = 0;\r\n      },\r\n      finalize: (saveToStorage = true) => {\r\n        const blob = blobConstruct(blobParts, mimeType);\r\n\r\n        if(saveToStorage && saveFileCallback) {\r\n          saveFileCallback(blob);\r\n        }\r\n        \r\n        return blob;\r\n      }\r\n    };\r\n    \r\n    return fakeFileWriter;\r\n  }\r\n}\r\n\r\nexport default new FileManager();\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from '../config/modes';\r\nimport { blobConstruct } from '../helpers/blob';\r\nimport FileManager from './filemanager';\r\n//import { MOUNT_CLASS_TO } from './mtproto/mtproto_config';\r\n//import { logger } from './polyfill';\r\n\r\nexport type CacheStorageDbName = 'cachedFiles' | 'cachedStreamChunks' | 'cachedAssets';\r\n\r\nexport default class CacheStorageController {\r\n  private static STORAGES: CacheStorageController[] = [];\r\n  private openDbPromise: Promise<Cache>;\r\n\r\n  private useStorage = true;\r\n\r\n  //private log: ReturnType<typeof logger> = logger('CS');\r\n\r\n  constructor(private dbName: CacheStorageDbName) {\r\n    if(Modes.test) {\r\n      this.dbName += '_test';\r\n    }\r\n\r\n    if(CacheStorageController.STORAGES.length) {\r\n      this.useStorage = CacheStorageController.STORAGES[0].useStorage;\r\n    }\r\n    \r\n    this.openDatabase();\r\n    CacheStorageController.STORAGES.push(this);\r\n  }\r\n\r\n  private openDatabase(): Promise<Cache> {\r\n    return this.openDbPromise ?? (this.openDbPromise = caches.open(this.dbName));\r\n  }\r\n\r\n  public delete(entryName: string) {\r\n    return this.timeoutOperation((cache) => cache.delete('/' + entryName));\r\n  }\r\n\r\n  public deleteAll() {\r\n    return caches.delete(this.dbName);\r\n  }\r\n\r\n  public get(entryName: string) {\r\n    return this.timeoutOperation((cache) => cache.match('/' + entryName));\r\n  }\r\n\r\n  public save(entryName: string, response: Response) {\r\n    // return new Promise((resolve) => {}); // DEBUG\r\n    return this.timeoutOperation((cache) => cache.put('/' + entryName, response));\r\n  }\r\n\r\n  public getFile(fileName: string, method: 'blob' | 'json' | 'text' = 'blob'): Promise<any> {\r\n    /* if(method === 'blob') {\r\n      return Promise.reject();\r\n    } */\r\n\r\n    // const str = `get fileName: ${fileName}`;\r\n    // console.time(str);\r\n    return this.get(fileName).then((response) => {\r\n      if(!response) {\r\n        //console.warn('getFile:', response, fileName);\r\n        throw 'NO_ENTRY_FOUND';\r\n      }\r\n\r\n      const promise = response[method]();\r\n      // promise.then(() => {\r\n      //   console.timeEnd(str);\r\n      // });\r\n      return promise;\r\n    });\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct(blob) as Blob;\r\n    }\r\n\r\n    const response = new Response(blob, {\r\n      headers: {\r\n        'Content-Length': '' + blob.size\r\n      }\r\n    });\r\n    \r\n    return this.save(fileName, response).then(() => blob as Blob);\r\n  }\r\n\r\n  public timeoutOperation<T>(callback: (cache: Cache) => Promise<T>) {\r\n    if(!this.useStorage) {\r\n      return Promise.reject('STORAGE_OFFLINE');\r\n    }\r\n\r\n    return new Promise<T>(async(resolve, reject) => {\r\n      let rejected = false;\r\n      const timeout = setTimeout(() => {\r\n        reject();\r\n        //console.warn('CACHESTORAGE TIMEOUT');\r\n        rejected = true;\r\n      }, 15e3);\r\n\r\n      try {\r\n        const cache = await this.openDatabase();\r\n        if(!cache) {\r\n          this.useStorage = false;\r\n          this.openDbPromise = undefined;\r\n          throw 'no cache?';\r\n        }\r\n\r\n        const res = await callback(cache);\r\n\r\n        if(rejected) return;\r\n        resolve(res);\r\n      } catch(err) {\r\n        reject(err);\r\n      }\r\n\r\n      clearTimeout(timeout);\r\n    });\r\n  }\r\n\r\n  public getFileWriter(fileName: string, mimeType: string) {\r\n    const fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob).catch(() => blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  }\r\n\r\n  public static toggleStorage(enabled: boolean) {\r\n    return Promise.all(this.STORAGES.map(storage => {\r\n      storage.useStorage = enabled;\r\n      \r\n      if(!enabled) {\r\n        return storage.deleteAll();\r\n      }\r\n    }));\r\n  }\r\n}\r\n\r\n//const cacheStorage = new CacheStorageController(); \r\n//MOUNT_CLASS_TO.cacheStorage = cacheStorage;\r\n//export default cacheStorage;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { readBlobAsUint8Array } from \"../../helpers/blob\";\r\nimport { CancellablePromise, deferredPromise } from \"../../helpers/cancellablePromise\";\r\nimport { getWindowClients, notifySomeone } from \"../../helpers/context\";\r\nimport debounce from \"../../helpers/schedulers/debounce\";\r\nimport { isSafari } from \"../../helpers/userAgent\";\r\nimport { InputFileLocation, UploadFile } from \"../../layer\";\r\nimport CacheStorageController from \"../cacheStorage\";\r\nimport { DownloadOptions } from \"../mtproto/apiFileManager\";\r\nimport { RequestFilePartTask, deferredPromises, log } from \"./index.service\";\r\nimport timeout from \"./timeout\";\r\n\r\nconst cacheStorage = new CacheStorageController('cachedStreamChunks');\r\nconst CHUNK_TTL = 86400;\r\nconst CHUNK_CACHED_TIME_HEADER = 'Time-Cached';\r\n\r\nconst clearOldChunks = () => {\r\n  return cacheStorage.timeoutOperation((cache) => {\r\n    return cache.keys().then(requests => {\r\n      const filtered: Map<StreamId, Request> = new Map();\r\n      const timestamp = Date.now() / 1000 | 0;\r\n      for(const request of requests) {\r\n        const match = request.url.match(/\\/(\\d+?)\\?/);\r\n        if(match && !filtered.has(match[1])) {\r\n          filtered.set(match[1], request);\r\n        }\r\n      }\r\n\r\n      const promises: Promise<any>[] = [];\r\n      for(const [id, request] of filtered) {\r\n        const promise = cache.match(request).then((response) => {\r\n          if((+response.headers.get(CHUNK_CACHED_TIME_HEADER) + CHUNK_TTL) <= timestamp) {\r\n            log('will delete stream chunk:', id);\r\n            return cache.delete(request, {ignoreSearch: true, ignoreVary: true});\r\n          }\r\n        });\r\n\r\n        promises.push(promise);\r\n      }\r\n\r\n      return Promise.all(promises);\r\n    });\r\n  });\r\n};\r\n\r\nsetInterval(clearOldChunks, 1800e3);\r\nsetInterval(() => {\r\n  getWindowClients().then((clients) => {\r\n    for(const [clientId, promises] of deferredPromises) {\r\n      if(!clients.find(client => client.id === clientId)) {\r\n        for(const taskId in promises) {\r\n          const promise = promises[taskId];\r\n          promise.reject();\r\n        }\r\n\r\n        deferredPromises.delete(clientId);\r\n      }\r\n    }\r\n  });\r\n}, 120e3);\r\n\r\ntype StreamRange = [number, number];\r\ntype StreamId = string;\r\nconst streams: Map<StreamId, Stream> = new Map();\r\nclass Stream {\r\n  private destroyDebounced: () => void;\r\n  private id: StreamId;\r\n  private limitPart: number;\r\n  private loadedOffsets: Set<number> = new Set();\r\n\r\n  constructor(private info: DownloadOptions) {\r\n    this.id = Stream.getId(info);\r\n    streams.set(this.id, this);\r\n\r\n    // ! если грузить очень большое видео чанками по 512Кб в мобильном Safari, то стрим не запустится\r\n    this.limitPart = info.size > (75 * 1024 * 1024) ? STREAM_CHUNK_UPPER_LIMIT : STREAM_CHUNK_MIDDLE_LIMIT;\r\n    this.destroyDebounced = debounce(this.destroy, 150000, false, true);\r\n  }\r\n\r\n  private destroy = () => {\r\n    streams.delete(this.id);\r\n  };\r\n\r\n  private async requestFilePartFromWorker(alignedOffset: number, limit: number, fromPreload = false) {\r\n    const task: Omit<RequestFilePartTask, 'id'> = {\r\n      type: 'requestFilePart',\r\n      payload: [this.info.dcId, this.info.location, alignedOffset, limit]\r\n    };\r\n\r\n    const taskId = JSON.stringify(task);\r\n    (task as RequestFilePartTask).id = taskId;\r\n\r\n    const windowClient = await getWindowClients().then((clients) => {\r\n      if(!clients.length) {\r\n        return;\r\n      }\r\n\r\n      return clients.find(client => deferredPromises.has(client.id)) || clients[0];\r\n    });\r\n\r\n    if(!windowClient) {\r\n      throw new Error('no window');\r\n    }\r\n\r\n    let promises = deferredPromises.get(windowClient.id);\r\n    if(!promises) {\r\n      deferredPromises.set(windowClient.id, promises = {});\r\n    }\r\n    \r\n    let deferred = promises[taskId] as CancellablePromise<UploadFile.uploadFile>;\r\n    if(deferred) {\r\n      return deferred.then(uploadFile => uploadFile.bytes);\r\n    }\r\n    \r\n    windowClient.postMessage(task);\r\n    this.loadedOffsets.add(alignedOffset);\r\n    \r\n    deferred = promises[taskId] = deferredPromise<UploadFile.uploadFile>();\r\n    const bytesPromise = deferred.then(uploadFile => uploadFile.bytes);\r\n\r\n    this.saveChunkToCache(bytesPromise, alignedOffset, limit);\r\n    !fromPreload && this.preloadChunks(alignedOffset, alignedOffset + (this.limitPart * 15));\r\n\r\n    return bytesPromise;\r\n  }\r\n\r\n  private requestFilePartFromCache(alignedOffset: number, limit: number, fromPreload?: boolean) {\r\n    const key = this.getChunkKey(alignedOffset, limit);\r\n    return cacheStorage.getFile(key).then((blob: Blob) => {\r\n      return fromPreload ? new Uint8Array() : readBlobAsUint8Array(blob);\r\n    }, (error) => {\r\n      if(error === 'NO_ENTRY_FOUND') {\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  private requestFilePart(alignedOffset: number, limit: number, fromPreload?: boolean) {\r\n    return this.requestFilePartFromCache(alignedOffset, limit, fromPreload).then(bytes => {\r\n      return bytes || this.requestFilePartFromWorker(alignedOffset, limit, fromPreload);\r\n    });\r\n  }\r\n\r\n  private saveChunkToCache(deferred: Promise<Uint8Array>, alignedOffset: number, limit: number) {\r\n    return deferred.then(bytes => {\r\n      const key = this.getChunkKey(alignedOffset, limit);\r\n      const response = new Response(bytes, {\r\n        headers: {\r\n          'Content-Length': '' + bytes.length,\r\n          'Content-Type': 'application/octet-stream',\r\n          [CHUNK_CACHED_TIME_HEADER]: '' + (Date.now() / 1000 | 0)\r\n        }\r\n      });\r\n\r\n      return cacheStorage.save(key, response);\r\n    });\r\n  }\r\n\r\n  private preloadChunks(offset: number, end: number) {\r\n    if(end > this.info.size) {\r\n      end = this.info.size;\r\n    }\r\n\r\n    for(; offset < end; offset += this.limitPart) {\r\n      if(this.loadedOffsets.has(offset)) {\r\n        continue;\r\n      }\r\n\r\n      this.loadedOffsets.add(offset);\r\n      this.requestFilePart(offset, this.limitPart, true);\r\n    }\r\n  }\r\n\r\n  public requestRange(range: StreamRange) {\r\n    this.destroyDebounced();\r\n\r\n    const possibleResponse = responseForSafariFirstRange(range, this.info.mimeType, this.info.size);\r\n    if(possibleResponse) {\r\n      return possibleResponse;\r\n    }\r\n\r\n    const [offset, end] = range;\r\n\r\n    /* if(info.size > limitPart && isSafari && offset === limitPart) {\r\n      //end = info.size - 1;\r\n      //offset = info.size - 1 - limitPart;\r\n      offset = info.size - (info.size % limitPart);\r\n    } */\r\n\r\n    const limit = end && end < this.limitPart ? alignLimit(end - offset + 1) : this.limitPart;\r\n    const alignedOffset = alignOffset(offset, limit);\r\n\r\n    return this.requestFilePart(alignedOffset, limit).then(ab => {\r\n      //log.debug('[stream] requestFilePart result:', result);\r\n\r\n      const headers: Record<string, string> = {\r\n        'Accept-Ranges': 'bytes',\r\n        'Content-Range': `bytes ${alignedOffset}-${alignedOffset + ab.byteLength - 1}/${this.info.size || '*'}`,\r\n        'Content-Length': `${ab.byteLength}`,\r\n      };\r\n\r\n      if(this.info.mimeType) headers['Content-Type'] = this.info.mimeType;\r\n\r\n      if(isSafari) {\r\n        ab = ab.slice(offset - alignedOffset, end - alignedOffset + 1);\r\n        headers['Content-Range'] = `bytes ${offset}-${offset + ab.byteLength - 1}/${this.info.size || '*'}`;\r\n        headers['Content-Length'] = `${ab.byteLength}`;\r\n      }\r\n\r\n      // simulate slow connection\r\n      //setTimeout(() => {\r\n        return new Response(ab, {\r\n          status: 206,\r\n          statusText: 'Partial Content',\r\n          headers,\r\n        });\r\n      //}, 2.5e3);\r\n    });\r\n  }\r\n\r\n  private getChunkKey(alignedOffset: number, limit: number) {\r\n    return this.id + '?offset=' + alignedOffset + '&limit=' + limit;\r\n  }\r\n\r\n  public static get(info: DownloadOptions) {\r\n    return streams.get(this.getId(info)) ?? new Stream(info);\r\n  }\r\n\r\n  private static getId(info: DownloadOptions) {\r\n    return (info.location as InputFileLocation.inputDocumentFileLocation).id;\r\n  }\r\n}\r\n\r\nexport default function onStreamFetch(event: FetchEvent, params: string) {\r\n  const range = parseRange(event.request.headers.get('Range'));\r\n  const info: DownloadOptions = JSON.parse(decodeURIComponent(params));\r\n  const stream = Stream.get(info);\r\n\r\n  //log.debug('[stream]', url, offset, end);\r\n\r\n  event.respondWith(Promise.race([\r\n    timeout(45 * 1000),\r\n    stream.requestRange(range)\r\n  ]));\r\n}\r\n\r\nfunction responseForSafariFirstRange(range: StreamRange, mimeType: string, size: number): Response {\r\n  if(range[0] === 0 && range[1] === 1) {\r\n    return new Response(new Uint8Array(2).buffer, {\r\n      status: 206,\r\n      statusText: 'Partial Content',\r\n      headers: {\r\n        'Accept-Ranges': 'bytes',\r\n        'Content-Range': `bytes 0-1/${size || '*'}`,\r\n        'Content-Length': '2',\r\n        'Content-Type': mimeType || 'video/mp4',\r\n      },\r\n    });\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/* const STREAM_CHUNK_UPPER_LIMIT = 256 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 256 * 4; */\r\n/* const STREAM_CHUNK_UPPER_LIMIT = 1024 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 1024 * 4; */\r\nconst STREAM_CHUNK_MIDDLE_LIMIT = 512 * 1024;\r\nconst STREAM_CHUNK_UPPER_LIMIT = 1024 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 512 * 4;\r\n\r\nfunction parseRange(header: string): StreamRange {\r\n  if(!header) return [0, 0];\r\n  const [, chunks] = header.split('=');\r\n  const ranges = chunks.split(', ');\r\n  const [offset, end] = ranges[0].split('-');\r\n\r\n  return [+offset, +end || 0];\r\n}\r\n\r\nfunction alignOffset(offset: number, base = SMALLEST_CHUNK_LIMIT) {\r\n  return offset - (offset % base);\r\n}\r\n\r\nfunction alignLimit(limit: number) {\r\n  return 2 ** Math.ceil(Math.log(limit) / Math.log(2));\r\n}\r\n","// * Jolly Cobra's schedulers\r\n\r\nimport { AnyToVoidFunction } from \"../../types\";\r\n\r\nexport default function debounce<F extends AnyToVoidFunction>(\r\n  fn: F,\r\n  ms: number,\r\n  shouldRunFirst = true,\r\n  shouldRunLast = true,\r\n) {\r\n  let waitingTimeout: number | null = null;\r\n\r\n  return (...args: Parameters<F>) => {\r\n    if(waitingTimeout) {\r\n      clearTimeout(waitingTimeout);\r\n      waitingTimeout = null;\r\n    } else if(shouldRunFirst) {\r\n      // @ts-ignore\r\n      fn(...args);\r\n    }\r\n\r\n    waitingTimeout = setTimeout(() => {\r\n      if(shouldRunLast) {\r\n        // @ts-ignore\r\n        fn(...args);\r\n      }\r\n\r\n      waitingTimeout = null;\r\n    }, ms) as any;\r\n  };\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport interface CancellablePromise<T> extends Promise<T> {\r\n  resolve?: (value: T) => void,\r\n  reject?: (...args: any[]) => void,\r\n  cancel?: () => void,\r\n\r\n  notify?: (...args: any[]) => void,\r\n  notifyAll?: (...args: any[]) => void,\r\n  lastNotify?: any,\r\n  listeners?: Array<(...args: any[]) => void>,\r\n  addNotifyListener?: (callback: (...args: any[]) => void) => void,\r\n\r\n  isFulfilled?: boolean,\r\n  isRejected?: boolean\r\n}\r\n\r\nexport function deferredPromise<T>() {\r\n  let deferredHelper: any = {\r\n    isFulfilled: false, \r\n    isRejected: false,\r\n\r\n    notify: () => {}, \r\n    notifyAll: (...args: any[]) => {\r\n      deferredHelper.lastNotify = args;\r\n      deferredHelper.listeners.forEach((callback: any) => callback(...args));\r\n    }, \r\n\r\n    lastNotify: undefined,\r\n    listeners: [],\r\n    addNotifyListener: (callback: (...args: any[]) => void) => {\r\n      if(deferredHelper.lastNotify) {\r\n        callback(...deferredHelper.lastNotify);\r\n      }\r\n\r\n      deferredHelper.listeners.push(callback);\r\n    }\r\n  };\r\n\r\n  let deferred: CancellablePromise<T> = new Promise<T>((resolve, reject) => {\r\n    deferredHelper.resolve = (value: T) => {\r\n      if(deferred.isFulfilled) return;\r\n\r\n      deferred.isFulfilled = true;\r\n      resolve(value);\r\n    };\r\n    \r\n    deferredHelper.reject = (...args: any[]) => {\r\n      if(deferred.isRejected) return;\r\n      \r\n      deferred.isRejected = true;\r\n      reject(...args);\r\n    };\r\n  });\r\n\r\n  // @ts-ignore\r\n  /* deferred.then = (resolve: (value: T) => any, reject: (...args: any[]) => any) => {\r\n    const n = deferredPromise<ReturnType<typeof resolve>>();\r\n    \r\n  }; */\r\n\r\n  deferred.finally(() => {\r\n    deferred.notify = null;\r\n    deferred.listeners.length = 0;\r\n    deferred.lastNotify = null;\r\n\r\n    if(deferred.cancel) {\r\n      deferred.cancel = () => {};\r\n    }\r\n  });\r\n\r\n  Object.assign(deferred, deferredHelper);\r\n\r\n  return deferred;\r\n}","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from '.';\r\n\r\nconst DATABASE_STATE: Database<'session' | 'stickerSets' | 'users' | 'chats' | 'messages' | 'dialogs'> = {\r\n  name: 'tweb',\r\n  version: 7,\r\n  stores: [{\r\n    name: 'session'\r\n  }, {\r\n    name: 'stickerSets'\r\n  }, {\r\n    name: 'users'\r\n  }, {\r\n    name: 'chats'\r\n  }, {\r\n    name: 'dialogs'\r\n  }, {\r\n    name: 'messages'\r\n  }]\r\n};\r\n\r\nexport default DATABASE_STATE;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from '../config/databases';\r\nimport Modes from '../config/modes';\r\nimport { blobConstruct } from '../helpers/blob';\r\nimport { safeAssign } from '../helpers/object';\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\r\n */\r\nexport type IDBIndex = {\r\n  indexName: string,\r\n  keyPath: string,\r\n  objectParameters: IDBIndexParameters\r\n};\r\n\r\nexport type IDBStore = {\r\n  name: string, \r\n  indexes?: IDBIndex[]\r\n};\r\n\r\nexport type IDBOptions = {\r\n  name?: string,\r\n  storeName: string,\r\n  stores?: IDBStore[],\r\n  version?: number\r\n};\r\n\r\nconst DEBUG = false;\r\n\r\nexport default class IDBStorage<T extends Database<any>> {\r\n  private static STORAGES: IDBStorage<Database<any>>[] = [];\r\n  private openDbPromise: Promise<IDBDatabase>;\r\n  private db: IDBDatabase;\r\n  private storageIsAvailable = true;\r\n\r\n  private log: ReturnType<typeof logger>;\r\n  \r\n  private name: string;\r\n  private version: number;\r\n  private stores: IDBStore[];\r\n  private storeName: T['stores'][0]['name'];\r\n\r\n  constructor(db: T, storeName: typeof db['stores'][0]['name']) {\r\n    safeAssign(this, db);\r\n\r\n    if(Modes.test) {\r\n      this.name += '_test';\r\n    }\r\n\r\n    this.storeName = storeName;\r\n\r\n    this.log = logger('IDB-' + this.storeName);\r\n\r\n    this.openDatabase(true);\r\n\r\n    IDBStorage.STORAGES.push(this);\r\n  }\r\n\r\n  public static closeDatabases(preserve?: IDBStorage<Database<any>>) {\r\n    this.STORAGES.forEach(storage => {\r\n      if(preserve && preserve === storage) {\r\n        return;\r\n      }\r\n\r\n      const db = storage.db;\r\n      if(db) {\r\n        db.onclose = () => {};\r\n        db.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ! WARNING ! function requires at least one opened connection\r\n   */\r\n  /* public static clearObjectStores() {\r\n    const storage = this.STORAGES[0];\r\n    this.closeDatabases(storage);\r\n\r\n    const names = Array.from(storage.db.objectStoreNames);\r\n    const promises = names.map(name => storage.clear(name));\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  /* public static deleteDatabase() {\r\n    this.closeDatabases();\r\n\r\n    const storages = this.STORAGES;\r\n    const dbNames = Array.from(new Set(storages.map(storage => storage.name)));\r\n    const promises = dbNames.map(dbName => {\r\n      return new Promise<void>((resolve, reject) => {\r\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\r\n  \r\n        deleteRequest.onerror = () => {\r\n          reject();\r\n        };\r\n  \r\n        deleteRequest.onsuccess = () => {\r\n          resolve();\r\n        };\r\n      });\r\n    });\r\n\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  public isAvailable() {\r\n    return this.storageIsAvailable;\r\n  }\r\n\r\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\r\n    if(this.openDbPromise && !createNew) {\r\n      return this.openDbPromise;\r\n    }\r\n\r\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\r\n      const os = db.createObjectStore(store.name);\r\n\r\n      if(store.indexes?.length) {\r\n        for(const index of store.indexes) {\r\n          os.createIndex(index.indexName, index.keyPath, index.objectParameters);\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      var request = indexedDB.open(this.name, this.version);\r\n\r\n      if(!request) {\r\n        return Promise.reject();\r\n      }\r\n    } catch(error) {\r\n      this.log.error('error opening db', error.message)\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    let finished = false;\r\n    setTimeout(() => {\r\n      if(!finished) {\r\n        request.onerror({type: 'IDB_CREATE_TIMEOUT'} as Event);\r\n      }\r\n    }, 3000);\r\n\r\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\r\n      request.onsuccess = (event) => {\r\n        finished = true;\r\n        const db = request.result;\r\n        let calledNew = false;\r\n\r\n        this.log('Opened');\r\n  \r\n        db.onerror = (error) => {\r\n          this.storageIsAvailable = false;\r\n          this.log.error('Error creating/accessing IndexedDB database', error);\r\n          reject(error);\r\n        };\r\n\r\n        db.onclose = (e) => {\r\n          this.log.error('closed:', e);\r\n          !calledNew && this.openDatabase();\r\n        };\r\n\r\n        db.onabort = (e) => {\r\n          this.log.error('abort:', e);\r\n          const transaction = e.target as IDBTransaction;\r\n          \r\n          this.openDatabase(calledNew = true);\r\n\r\n          if(transaction.onerror) {\r\n            transaction.onerror(e);\r\n          }\r\n\r\n          db.close();\r\n        };\r\n\r\n        db.onversionchange = (e) => {\r\n          this.log.error('onversionchange, lol?');\r\n        };\r\n\r\n        resolve(this.db = db);\r\n      };\r\n  \r\n      request.onerror = (event) => {\r\n        finished = true;\r\n        this.storageIsAvailable = false;\r\n        this.log.error('Error creating/accessing IndexedDB database', event);\r\n        reject(event);\r\n      };\r\n  \r\n      request.onupgradeneeded = (event) => {\r\n        finished = true;\r\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\r\n\r\n        // @ts-ignore\r\n        var db = event.target.result as IDBDatabase;\r\n        this.stores.forEach((store) => {\r\n          /* if(db.objectStoreNames.contains(store.name)) {\r\n            //if(event.oldVersion === 1) {\r\n              db.deleteObjectStore(store.name);\r\n            //}\r\n          } */\r\n    \r\n          if(!db.objectStoreNames.contains(store.name)) {\r\n            createObjectStore(db, store);\r\n          }\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  public delete(entryName: string | string[]): Promise<void> {\r\n    //return Promise.resolve();\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.delete(entryName));\r\n    }, DEBUG ? 'delete: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public clear(storeName?: IDBStorage<T>['storeName']) {\r\n    return this.getObjectStore('readwrite', (objectStore) => objectStore.clear(), DEBUG ? 'clear' : '', storeName);\r\n  }\r\n\r\n  public save(entryName: string | string[], value: any | any[]) {\r\n    // const handleError = (error: Error) => {\r\n    //   this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\r\n    //   if((!error || error.name === 'InvalidStateError')/*  && false */) {\r\n    //     setTimeout(() => {\r\n    //       this.save(entryName, value);\r\n    //     }, 2e3);\r\n    //   } else {\r\n    //     //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\r\n    //   }\r\n    // };\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n      value = [].concat(value);\r\n    }\r\n    \r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName, idx) => objectStore.put(value[idx], entryName));\r\n    }, DEBUG ? 'save: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct([blob]) as Blob;\r\n    }\r\n\r\n    return this.save(fileName, blob);\r\n  }\r\n\r\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\r\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    if(!(blob instanceof Blob)) {\r\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\r\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\r\n      return this.storagePutB64String(db, fileName, address).then(() => {\r\n        return blob;\r\n      });\r\n    }\r\n\r\n    try {\r\n      var reader = new FileReader();\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    let promise = new Promise<Blob>((resolve, reject) => {\r\n      reader.onloadend = () => {\r\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\r\n          resolve(blob);\r\n        }, reject);\r\n      }\r\n  \r\n      reader.onerror = reject;\r\n    });\r\n    \r\n\r\n    try {\r\n      reader.readAsDataURL(blob);\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\r\n    try {\r\n      var objectStore = db.transaction([this.storeName], 'readwrite')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.put(b64string, fileName);\r\n    } catch(error) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = function(event) {\r\n        resolve();\r\n      };\r\n  \r\n      request.onerror = reject;\r\n    });\r\n  }\r\n\r\n  public getBlobSize(blob: any) {\r\n    return blob.size || blob.byteLength || blob.length;\r\n  } */\r\n\r\n  public get<T>(entryName: string[]): Promise<T[]>;\r\n  public get<T>(entryName: string): Promise<T>;\r\n  public get<T>(entryName: string | string[]): Promise<T> | Promise<T[]> {\r\n    //return Promise.reject();\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore<T>('readonly', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.get(entryName));\r\n    }, DEBUG ? 'get: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  private getObjectStore<T>(mode: IDBTransactionMode, objectStore: (objectStore: IDBObjectStore) => IDBRequest | IDBRequest[], log?: string, storeName = this.storeName) {\r\n    let perf: number;\r\n\r\n    if(log) {\r\n      perf = performance.now();\r\n      this.log(log + ': start');\r\n    }\r\n\r\n    return this.openDatabase().then((db) => {\r\n      return new Promise<T>((resolve, reject) => {\r\n        /* if(mode === 'readwrite') {\r\n          return;\r\n        } */\r\n\r\n        const transaction = db.transaction([storeName], mode);\r\n\r\n        transaction.onerror = (e) => {\r\n          clearTimeout(timeout);\r\n          reject(transaction.error);\r\n        };\r\n  \r\n        transaction.oncomplete = (e) => {\r\n          clearTimeout(timeout);\r\n\r\n          if(log) {\r\n            this.log(log + ': end', performance.now() - perf);\r\n          }\r\n\r\n          const results = r.map(r => r.result);\r\n          resolve(isArray ? results : results[0]);\r\n        };\r\n  \r\n        const timeout = setTimeout(() => {\r\n          this.log.error('transaction not finished', transaction);\r\n        }, 10000);\r\n  \r\n        /* transaction.addEventListener('abort', (e) => {\r\n          //handleError();\r\n          this.log.error('IndexedDB: transaction abort!', transaction.error);\r\n        }); */\r\n  \r\n        const requests = objectStore(transaction.objectStore(storeName));\r\n\r\n        const isArray = Array.isArray(requests);\r\n        const r: IDBRequest[] = isArray ? requests : [].concat(requests) as any;\r\n\r\n        // const length = r.length;\r\n        // /* let left = length;\r\n\r\n        // const onRequestFinished = (error?: Error) => {\r\n        //   if(!--left) {\r\n        //     resolve(result);\r\n        //     clearTimeout(timeout);\r\n        //   }\r\n        // }; */\r\n\r\n        // for(let i = 0; i < length; ++i) {\r\n        //   const request = r[i];\r\n        //   request.onsuccess = () => {\r\n        //     onRequestFinished();\r\n        //   };\r\n\r\n        //   request.onerror = (e) => {\r\n        //     onRequestFinished(transaction.error);\r\n        //   };\r\n        // }\r\n      });\r\n    });\r\n  }\r\n\r\n  public getAll<T>(): Promise<T[]> {\r\n    return this.getObjectStore<T[]>('readonly', (objectStore) => objectStore.getAll(), DEBUG ? 'getAll' : '');\r\n  }\r\n\r\n  /* public getAllKeys(): Promise<Array<string>> {\r\n    console.time('getAllEntries');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.getAllKeys();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var result = event.target.result;\r\n          resolve(result);\r\n          console.timeEnd('getAllEntries');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public isFileExists(fileName: string): Promise<boolean> {\r\n    console.time('isFileExists');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.openCursor(fileName);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var cursor = event.target.result;\r\n          resolve(!!cursor);\r\n          console.timeEnd('isFileExists');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public getFileWriter(fileName: string, mimeType: string) {\r\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  } */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport function copy<T>(obj: T): T {\r\n  //in case of premitives\r\n  if(obj === null || typeof(obj) !== \"object\") {\r\n    return obj;\r\n  }\r\n \r\n  //date objects should be \r\n  if(obj instanceof Date) {\r\n    return new Date(obj.getTime()) as any;\r\n  }\r\n \r\n  //handle Array\r\n  if(Array.isArray(obj)) {\r\n    // @ts-ignore\r\n    const clonedArr: T = obj.map(el => copy(el)) as any as T;\r\n    return clonedArr;\r\n  }\r\n \r\n  //lastly, handle objects\r\n  // @ts-ignore\r\n  let clonedObj = new obj.constructor();\r\n  for(var prop in obj){\r\n    if(obj.hasOwnProperty(prop)) {\r\n      clonedObj[prop] = copy(obj[prop]);\r\n    }\r\n  }\r\n  return clonedObj;\r\n}\r\n\r\nexport function deepEqual(x: any, y: any): boolean {\r\n  const ok = Object.keys, tx = typeof x, ty = typeof y;\r\n  return x && y && tx === 'object' && tx === ty ? (\r\n    ok(x).length === ok(y).length &&\r\n      ok(x).every(key => deepEqual(x[key], y[key]))\r\n  ) : (x === y);\r\n}\r\n\r\nexport function defineNotNumerableProperties(obj: {[key: string]: any}, names: string[]) {\r\n  //const perf = performance.now();\r\n  const props = {writable: true, configurable: true};\r\n  const out: {[name: string]: typeof props} = {};\r\n  names.forEach(name => {\r\n    if(obj[name] === undefined) {\r\n      out[name] = props;\r\n    }\r\n  });\r\n  Object.defineProperties(obj, out);\r\n  //console.log('defineNotNumerableProperties time:', performance.now() - perf);\r\n}\r\n\r\nexport function getObjectKeysAndSort(object: any, sort: 'asc' | 'desc' = 'asc') {\r\n  if(!object) return [];\r\n  const ids = Object.keys(object).map(i => +i);\r\n  if(sort === 'asc') return ids.sort((a, b) => a - b);\r\n  else return ids.sort((a, b) => b - a);\r\n}\r\n\r\nexport function safeReplaceObject(wasObject: any, newObject: any) {\r\n  if(!wasObject) {\r\n    return newObject;\r\n  }\r\n\r\n  for(var key in wasObject) {\r\n    if(!newObject.hasOwnProperty(key)) {\r\n      delete wasObject[key];\r\n    }\r\n  }\r\n\r\n  for(var key in newObject) {\r\n    //if (newObject.hasOwnProperty(key)) { // useless\r\n      wasObject[key] = newObject[key];\r\n    //}\r\n  }\r\n  \r\n  return wasObject;\r\n}\r\n\r\n/**\r\n * Will be used for FILE_REFERENCE_EXPIRED\r\n * @param key \r\n * @param wasObject \r\n * @param newObject \r\n */\r\nexport function safeReplaceArrayInObject<K>(key: K, wasObject: any, newObject: any) {\r\n  if('byteLength' in newObject[key]) { // Uint8Array\r\n    newObject[key] = [...newObject[key]];\r\n  }\r\n\r\n  if(wasObject && wasObject[key] !== newObject[key]) {\r\n    wasObject[key].length = newObject[key].length;\r\n    (newObject[key] as any[]).forEach((v, i) => {\r\n      wasObject[key][i] = v;\r\n    });\r\n\r\n    /* wasObject[key].set(newObject[key]); */\r\n    newObject[key] = wasObject[key];\r\n  }\r\n}\r\n\r\nexport function isObject(object: any) {\r\n  return typeof(object) === 'object' && object !== null;\r\n}\r\n\r\nexport function getDeepProperty(object: any, key: string) {\r\n  const splitted = key.split('.');\r\n  let o: any = object;\r\n  splitted.forEach(key => {\r\n    if(!key) {\r\n      return;\r\n    }\r\n    \r\n    // @ts-ignore\r\n    o = o[key];\r\n  });\r\n  \r\n  return o;\r\n}\r\n\r\nexport function setDeepProperty(object: any, key: string, value: any) {\r\n  const splitted = key.split('.');\r\n  getDeepProperty(object, splitted.slice(0, -1).join('.'))[splitted.pop()] = value;\r\n}\r\n\r\nexport function validateInitObject(initObject: any, currentObject: any, onReplace?: (key: string) => void, previousKey?: string) {\r\n  for(const key in initObject) {\r\n    if(typeof(currentObject[key]) !== typeof(initObject[key])) {\r\n      currentObject[key] = copy(initObject[key]);\r\n      onReplace && onReplace(previousKey || key);\r\n    } else if(isObject(initObject[key])) {\r\n      validateInitObject(initObject[key], currentObject[key], onReplace, previousKey || key);\r\n    }\r\n  }\r\n}\r\n\r\nexport function safeAssign(object: any, fromObject: any) {\r\n  if(!fromObject) return;\r\n  \r\n  for(let i in fromObject) {\r\n    if(fromObject[i] !== undefined) {\r\n      object[i] = fromObject[i];\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from \"../../config/databases\";\r\nimport DATABASE_STATE from \"../../config/databases/state\";\r\nimport { isFirefox } from \"../../helpers/userAgent\";\r\nimport IDBStorage from \"../idb\";\r\nimport { log, ServiceWorkerPingTask, ServiceWorkerPushClickTask } from \"./index.service\";\r\n\r\nconst ctx = self as any as ServiceWorkerGlobalScope;\r\nconst defaultBaseUrl = location.protocol + '//' + location.hostname + location.pathname.split('/').slice(0, -1).join('/') + '/';\r\n\r\nexport type PushNotificationObject = {\r\n  loc_key: string,\r\n  loc_args: string[],\r\n  //user_id: number, // should be number\r\n  custom: {\r\n    channel_id?: string, // should be number\r\n    chat_id?: string, // should be number\r\n    from_id?: string, // should be number\r\n    msg_id: string,\r\n    peerId?: string // should be number\r\n  },\r\n  sound?: string,\r\n  random_id: number,\r\n  badge?: string, // should be number\r\n  description: string,\r\n  mute: string, // should be number\r\n  title: string,\r\n\r\n  action?: 'mute1d' | 'push_settings', // will be set before postMessage to main thread\r\n};\r\n\r\nclass SomethingGetter<T extends Database<any>, Storage extends Record<string, any>> {\r\n  private cache: Partial<Storage> = {};\r\n  private storage: IDBStorage<T>;\r\n\r\n  constructor(\r\n    db: T, \r\n    storeName: typeof db['stores'][number]['name'], \r\n    private defaults: {\r\n      [Property in keyof Storage]: ((value: Storage[Property]) => Storage[Property]) | Storage[Property]\r\n    }\r\n  ) {\r\n    this.storage = new IDBStorage<T>(db, storeName);\r\n  }\r\n\r\n  public async get<T extends keyof Storage>(key: T) {\r\n    if(this.cache[key] !== undefined) {\r\n      return this.cache[key];\r\n    }\r\n\r\n    let value: Storage[T];\r\n    try {\r\n      value = await this.storage.get(key as string);\r\n    } catch(err) {\r\n\r\n    }\r\n\r\n    if(this.cache[key] !== undefined) {\r\n      return this.cache[key];\r\n    }\r\n\r\n    if(value === undefined) {\r\n      const callback = this.defaults[key];\r\n      value = typeof(callback) === 'function' ? callback() : callback;\r\n    }\r\n\r\n    return this.cache[key] = value;\r\n  }\r\n\r\n  public async set<T extends keyof Storage>(key: T, value: Storage[T]) {\r\n    this.cache[key] = value;\r\n\r\n    try {\r\n      this.storage.save(key as string, value);\r\n    } catch(err) {\r\n\r\n    }\r\n  }\r\n}\r\n\r\ntype PushStorage = {\r\n  push_mute_until: number,\r\n  push_last_alive: number,\r\n  push_lang: Partial<ServiceWorkerPingTask['payload']['lang']>\r\n  push_settings: Partial<ServiceWorkerPingTask['payload']['settings']>\r\n};\r\n\r\nconst getter = new SomethingGetter<typeof DATABASE_STATE, PushStorage>(DATABASE_STATE, 'session', {\r\n  push_mute_until: 0,\r\n  push_last_alive: 0,\r\n  push_lang: {},\r\n  push_settings: {}\r\n});\r\n\r\nctx.addEventListener('push', (event) => {\r\n  const obj: PushNotificationObject = event.data.json();\r\n  log('push', obj);\r\n\r\n  let hasActiveWindows = false;\r\n  const checksPromise = Promise.all([\r\n    getter.get('push_mute_until'), \r\n    getter.get('push_last_alive'), \r\n    ctx.clients.matchAll({type: 'window'})\r\n  ]).then((result) => {\r\n    const [muteUntil, lastAliveTime, clientList] = result;\r\n    \r\n    log('matched clients', clientList);\r\n    hasActiveWindows = clientList.length > 0;\r\n    if(hasActiveWindows) {\r\n      throw 'Supress notification because some instance is alive';\r\n    }\r\n    \r\n    const nowTime = Date.now();\r\n    if(userInvisibleIsSupported() &&\r\n        muteUntil &&\r\n        nowTime < muteUntil) {\r\n      throw `Supress notification because mute for ${Math.ceil((muteUntil - nowTime) / 60000)} min`;\r\n    }\r\n\r\n    if(!obj.badge) {\r\n      throw 'No badge?';\r\n    }\r\n  });\r\n\r\n  checksPromise.catch(reason => {\r\n    log(reason);\r\n  });\r\n\r\n  const notificationPromise = checksPromise.then(() => {\r\n    return Promise.all([getter.get('push_settings'), getter.get('push_lang')])\r\n  }).then((result) => {\r\n    return fireNotification(obj, result[0], result[1]);\r\n  });\r\n\r\n  const closePromise = notificationPromise.catch(() => {\r\n    log('Closing all notifications on push', hasActiveWindows);\r\n    if(userInvisibleIsSupported() || hasActiveWindows) {\r\n      return closeAllNotifications();\r\n    }\r\n\r\n    return ctx.registration.showNotification('Telegram', {\r\n      tag: 'unknown_peer'\r\n    }).then(() => {\r\n      if(hasActiveWindows) {\r\n        return closeAllNotifications();\r\n      }\r\n\r\n      setTimeout(() => closeAllNotifications(), hasActiveWindows ? 0 : 100);\r\n    }).catch((error) => {\r\n      log.error('Show notification error', error);\r\n    });\r\n  });\r\n\r\n  event.waitUntil(closePromise);\r\n});\r\n\r\nctx.addEventListener('notificationclick', (event) => {\r\n  const notification = event.notification;\r\n  log('On notification click: ', notification.tag);\r\n  notification.close();\r\n\r\n  const action = event.action as PushNotificationObject['action'];\r\n  if(action === 'mute1d' && userInvisibleIsSupported()) {\r\n    log('[SW] mute for 1d');\r\n    getter.set('push_mute_until', Date.now() + 86400e3);\r\n    return;\r\n  }\r\n\r\n  const data: PushNotificationObject = notification.data;\r\n  if(!data) {\r\n    return;\r\n  }\r\n\r\n  const promise = ctx.clients.matchAll({\r\n    type: 'window'\r\n  }).then((clientList) => {\r\n    data.action = action;\r\n    pendingNotification = {type: 'push_click', payload: data};\r\n    for(let i = 0; i < clientList.length; i++) {\r\n      const client = clientList[i];\r\n      if('focus' in client) {\r\n        client.focus();\r\n        client.postMessage(pendingNotification);\r\n        pendingNotification = undefined;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if(ctx.clients.openWindow) {\r\n      return getter.get('push_settings').then((settings) => {\r\n        return ctx.clients.openWindow(settings.baseUrl || defaultBaseUrl);\r\n      });\r\n    }\r\n  }).catch((error) => {\r\n    log.error('Clients.matchAll error', error);\r\n  })\r\n\r\n  event.waitUntil(promise);\r\n});\r\n\r\nctx.addEventListener('notificationclose', onCloseNotification);\r\n\r\nlet notifications: Set<Notification> = new Set();\r\nlet pendingNotification: ServiceWorkerPushClickTask;\r\nfunction pushToNotifications(notification: Notification) {\r\n  if(!notifications.has(notification)) {\r\n    notifications.add(notification);\r\n    // @ts-ignore\r\n    notification.onclose = onCloseNotification;\r\n  }\r\n}\r\n\r\nfunction onCloseNotification(event: NotificationEvent) {\r\n  removeFromNotifications(event.notification)\r\n}\r\n\r\nfunction removeFromNotifications(notification: Notification) {\r\n  notifications.delete(notification);\r\n}\r\n\r\nexport function closeAllNotifications() {\r\n  for(const notification of notifications) {\r\n    try {\r\n      notification.close();\r\n    } catch(e) {}\r\n  }\r\n\r\n  let promise: Promise<void>;\r\n  if('getNotifications' in ctx.registration) {\r\n    promise = ctx.registration.getNotifications({}).then((notifications) => {\r\n      for(let i = 0, len = notifications.length; i < len; ++i) {\r\n        try {\r\n          notifications[i].close();\r\n        } catch(e) {}\r\n      }\r\n    }).catch((error) => {\r\n      log.error('Offline register SW error', error);\r\n    });\r\n  } else {\r\n    promise = Promise.resolve();\r\n  }\r\n\r\n  notifications.clear();\r\n\r\n  return promise;\r\n}\r\n\r\nfunction userInvisibleIsSupported() {\r\n  return isFirefox;\r\n}\r\n\r\nfunction fireNotification(obj: PushNotificationObject, settings: PushStorage['push_settings'], lang: PushStorage['push_lang']) {\r\n  const icon = 'assets/img/logo_filled_rounded.png';\r\n  let title = obj.title || 'Telegram';\r\n  let body = obj.description || '';\r\n  let peerId: number;\r\n\r\n  if(obj.custom) {\r\n    if(obj.custom.channel_id) {\r\n      peerId = -obj.custom.channel_id;\r\n    } else if(obj.custom.chat_id) {\r\n      peerId = -obj.custom.chat_id;\r\n    } else {\r\n      peerId = +obj.custom.from_id || 0;\r\n    }\r\n  }\r\n\r\n  obj.custom.peerId = '' + peerId;\r\n  let tag = 'peer' + peerId;\r\n\r\n  if(settings && settings.nopreview) {\r\n    title = 'Telegram';\r\n    body = lang.push_message_nopreview || 'You have a new message';\r\n    tag = 'unknown_peer';\r\n  }\r\n\r\n  log('show notify', title, body, icon, obj);\r\n\r\n  const actions: (Omit<NotificationAction, 'action'> & {action: PushNotificationObject['action']})[] = [{\r\n    action: 'mute1d',\r\n    title: lang.push_action_mute1d || 'Mute for 24H'\r\n  }/* , {\r\n    action: 'push_settings',\r\n    title: lang.push_action_settings || 'Settings'\r\n  } */];\r\n\r\n  const notificationPromise = ctx.registration.showNotification(title, {\r\n    body,\r\n    icon,\r\n    tag,\r\n    data: obj,\r\n    actions\r\n  });\r\n\r\n  return notificationPromise.then((event) => {\r\n    // @ts-ignore\r\n    if(event && event.notification) {\r\n      // @ts-ignore\r\n      pushToNotifications(event.notification);\r\n    }\r\n  }).catch((error) => {\r\n    log.error('Show notification promise', error);\r\n  });\r\n}\r\n\r\nexport function onPing(task: ServiceWorkerPingTask, event: ExtendableMessageEvent) {\r\n  const client = event.ports && event.ports[0] || event.source;\r\n  const payload = task.payload;\r\n\r\n  if(payload.localNotifications) {\r\n    getter.set('push_last_alive', Date.now());\r\n  }\r\n\r\n  if(pendingNotification &&\r\n      client &&\r\n      'postMessage' in client) {\r\n    client.postMessage(pendingNotification, []);\r\n    pendingNotification = undefined;\r\n  }\r\n\r\n  if(payload.lang) {\r\n    getter.set('push_lang', payload.lang);\r\n  }\r\n\r\n  if(payload.settings) {\r\n    getter.set('push_settings', payload.settings);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n                  \r\n                                   \r\n          \r\n//import CacheStorageController from '../cacheStorage';\r\nimport type { Modify, WorkerTaskTemplate, WorkerTaskVoidTemplate } from '../../types';\r\nimport type { InputFileLocation, UploadFile } from '../../layer';\r\nimport type { WebPushApiManager } from '../mtproto/webPushApiManager';\r\nimport type { PushNotificationObject } from './push';\r\nimport type { ToggleStorageTask } from '../mtproto/mtprotoworker';\r\nimport { logger, LogTypes } from '../logger';\r\nimport { CancellablePromise } from '../../helpers/cancellablePromise';\r\nimport { CACHE_ASSETS_NAME, requestCache } from './cache';\r\nimport onStreamFetch from './stream';\r\nimport { closeAllNotifications, onPing } from './push';\r\nimport CacheStorageController from '../cacheStorage';\r\n\r\nexport const log = logger('SW', LogTypes.Error | LogTypes.Debug | LogTypes.Log | LogTypes.Warn);\r\nconst ctx = self as any as ServiceWorkerGlobalScope;\r\nexport const deferredPromises: Map<WindowClient['id'], {[taskId: string]: CancellablePromise<any>}> = new Map();\r\n\r\nexport interface RequestFilePartTask extends Modify<WorkerTaskTemplate, {id: string}> {\r\n  type: 'requestFilePart',\r\n  payload: [number, InputFileLocation, number, number]\r\n};\r\n\r\nexport interface RequestFilePartTaskResponse extends Modify<WorkerTaskTemplate, {id: string}> {\r\n  type: 'requestFilePart',\r\n  payload?: UploadFile.uploadFile,\r\n  originalPayload?: RequestFilePartTask['payload']\r\n};\r\n\r\nexport interface ServiceWorkerPingTask extends WorkerTaskVoidTemplate {\r\n  type: 'ping',\r\n  payload: {\r\n    localNotifications: boolean,\r\n    lang: {\r\n      push_action_mute1d: string\r\n      push_action_settings: string\r\n      push_message_nopreview: string\r\n    },\r\n    settings: WebPushApiManager['settings']\r\n  }\r\n};\r\n\r\nexport interface ServiceWorkerNotificationsClearTask extends WorkerTaskVoidTemplate {\r\n  type: 'notifications_clear'\r\n};\r\n\r\nexport interface ServiceWorkerPushClickTask extends WorkerTaskVoidTemplate {\r\n  type: 'push_click',\r\n  payload: PushNotificationObject\r\n};\r\n\r\nexport type ServiceWorkerTask = RequestFilePartTaskResponse | ServiceWorkerPingTask | ServiceWorkerNotificationsClearTask | ToggleStorageTask;\r\n\r\n                   \r\nconst taskListeners: {\r\n  [type in ServiceWorkerTask['type']]: (task: any, event: ExtendableMessageEvent) => void\r\n} = {\r\n  notifications_clear: () => {\r\n    closeAllNotifications();\r\n  },\r\n  ping: (task: ServiceWorkerPingTask, event) => {\r\n    onPing(task, event);\r\n  },\r\n  requestFilePart: (task: RequestFilePartTaskResponse, e: ExtendableMessageEvent) => {\r\n    const windowClient = e.source as WindowClient;\r\n    const promises = deferredPromises.get(windowClient.id);\r\n    if(!promises) {\r\n      return;\r\n    }\r\n\r\n    const promise = promises[task.id];\r\n    if(promise) {\r\n      if(task.error) {\r\n        promise.reject(task.error);\r\n      } else {\r\n        promise.resolve(task.payload);\r\n      }\r\n  \r\n      delete promises[task.id];\r\n    }\r\n  },\r\n  toggleStorage: (task: ToggleStorageTask) => {\r\n    CacheStorageController.toggleStorage(task.payload);\r\n  }\r\n};\r\nctx.addEventListener('message', (e) => {\r\n  const task = e.data as ServiceWorkerTask;\r\n  const callback = taskListeners[task.type];\r\n  if(callback) {\r\n    callback(task, e);\r\n  }\r\n});\r\n          \r\n\r\n//const cacheStorage = new CacheStorageController('cachedAssets');\r\n/* let taskId = 0;\r\n\r\nexport function getTaskId() {\r\n  return taskId;\r\n}\r\n\r\nexport function incrementTaskId() {\r\n  return taskId++;\r\n} */\r\n\r\nconst onFetch = (event: FetchEvent): void => {\r\n  if(event.request.url.indexOf(location.origin + '/') === 0 && event.request.url.match(/\\.(js|css|jpe?g|json|wasm|png|mp3|svg|tgs|ico|woff2?|ttf|webmanifest?)(?:\\?.*)?$/)) {\r\n    return event.respondWith(requestCache(event));\r\n  }\r\n\r\n  try {\r\n    const [, url, scope, params] = /http[:s]+\\/\\/.*?(\\/(.*?)(?:$|\\/(.*)$))/.exec(event.request.url) || [];\r\n\r\n    //log.debug('[fetch]:', event);\r\n  \r\n    switch(scope) {\r\n      case 'stream': {\r\n        onStreamFetch(event, params);\r\n        break;\r\n      }\r\n    }\r\n  } catch(err) {\r\n    event.respondWith(new Response('', {\r\n      status: 500,\r\n      statusText: 'Internal Server Error',\r\n    }));\r\n  }\r\n};\r\n\r\nconst onChangeState = () => {\r\n  ctx.onfetch = onFetch;\r\n};\r\n\r\nctx.addEventListener('install', (event) => {\r\n  log('installing');\r\n  event.waitUntil(ctx.skipWaiting()); // Activate worker immediately\r\n});\r\n\r\nctx.addEventListener('activate', (event) => {\r\n  log('activating', ctx);\r\n  event.waitUntil(ctx.caches.delete(CACHE_ASSETS_NAME));\r\n  event.waitUntil(ctx.clients.claim());\r\n});\r\n\r\nctx.onerror = (error) => {\r\n  log.error('error:', error);\r\n};\r\n\r\nctx.onunhandledrejection = (error) => {\r\n  log.error('onunhandledrejection:', error);\r\n};\r\n\r\nctx.onoffline = ctx.ononline = onChangeState;\r\n\r\nonChangeState();\r\n","export default function timeout(delay: number): Promise<Response> {\r\n  return new Promise(((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(new Response('', {\r\n        status: 408,\r\n        statusText: 'Request timed out.',\r\n      }));\r\n    }, delay);\r\n  }));\r\n}\r\n"],"sourceRoot":""}