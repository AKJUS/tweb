{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/config/modes.ts","webpack:///./src/config/debug.ts","webpack:///./src/lib/logger.ts","webpack:///./src/lib/serviceWorker/cache.ts","webpack:///./src/helpers/blob.ts","webpack:///./src/helpers/context.ts","webpack:///./src/lib/filemanager.ts","webpack:///./src/lib/cacheStorage.ts","webpack:///./src/lib/serviceWorker/stream.ts","webpack:///./src/helpers/schedulers/debounce.ts","webpack:///./src/helpers/cancellablePromise.ts","webpack:///./src/config/databases/state.ts","webpack:///./src/helpers/userAgent.ts","webpack:///./src/lib/idb.ts","webpack:///./src/helpers/object.ts","webpack:///./src/lib/serviceWorker/push.ts","webpack:///./src/lib/serviceWorker/index.service.ts","webpack:///./src/lib/serviceWorker/timeout.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","test","location","search","indexOf","debug","http","ssl","multipleConnections","asServiceWorker","DEBUG","window","self","LogTypes","LOG_LEVELS","None","Error","Warn","Log","Debug","_logTimer","Date","now","dT","toFixed","logger","prefix","type","args","console","log","warn","info","error","trace","setPrefix","_prefix","setLevel","level","slice","reduce","acc","v","isCorrectResponse","response","ok","status","readBlobAs","blob","method","Promise","resolve","reader","FileReader","addEventListener","e","target","result","readBlobAsUint8Array","readBlobAsArrayBuffer","then","buffer","Uint8Array","blobConstruct","blobParts","mimeType","safeMimeType","blobSafeMimeType","Blob","bb","BlobBuilder","forEach","blobPart","append","getBlob","isWebWorker","WorkerGlobalScope","isServiceWorker","ServiceWorkerGlobalScope","getWindowClients","clients","matchAll","includeUncontrolled","notifyServiceWorker","all","listeners","length","listener","postMessage","notifyWorker","noop","blobSupported","this","fileWriter","bytes","arr","write","saveFileCallback","part","push","truncate","finalize","saveToStorage","dbName","useStorage","STORAGES","openDatabase","openDbPromise","caches","open","entryName","timeoutOperation","cache","delete","match","put","fileName","Response","headers","size","save","callback","reject","rejected","timeout","setTimeout","undefined","res","err","clearTimeout","fakeWriter","getFakeFileWriter","saveFile","catch","enabled","map","storage","deleteAll","cacheStorage","setInterval","keys","requests","filtered","Map","timestamp","request","url","has","set","promises","id","promise","ignoreSearch","ignoreVary","clientId","deferredPromises","find","client","taskId","streams","loadedOffsets","Set","destroy","getId","limitPart","STREAM_CHUNK_UPPER_LIMIT","STREAM_CHUNK_MIDDLE_LIMIT","destroyDebounced","fn","ms","shouldRunFirst","shouldRunLast","waitingTimeout","debounce","alignedOffset","limit","fromPreload","task","payload","dcId","JSON","stringify","windowClient","deferred","uploadFile","add","deferredHelper","isFulfilled","isRejected","notify","notifyAll","lastNotify","addNotifyListener","finally","cancel","assign","deferredPromise","bytesPromise","saveChunkToCache","preloadChunks","getChunkKey","getFile","requestFilePartFromCache","requestFilePartFromWorker","offset","requestFilePart","end","preloadChunk","alignOffset","range","possibleResponse","statusText","responseForSafariFirstRange","Math","ceil","alignLimit","min","ab","byteLength","base","version","stores","userAgent","navigator","toLowerCase","vendor","isFirefox","platform","maxTouchPoints","MSStream","db","storeName","storageIsAvailable","fromObject","safeAssign","preserve","onclose","close","createNew","indexedDB","message","finished","onerror","onsuccess","event","calledNew","onabort","transaction","onversionchange","onupgradeneeded","oldVersion","newVersion","store","objectStoreNames","contains","os","createObjectStore","indexes","index","createIndex","indexName","keyPath","objectParameters","Array","isArray","concat","getObjectStore","objectStore","clear","idx","perf","performance","oncomplete","results","getAll","defaultBaseUrl","protocol","hostname","pathname","split","join","defaults","push_mute_until","push_last_alive","push_lang","push_settings","obj","data","json","hasActiveWindows","checksPromise","muteUntil","lastAliveTime","clientList","nowTime","userInvisibleIsSupported","badge","reason","closePromise","settings","lang","icon","peerId","title","body","description","custom","channel_id","chat_id","from_id","tag","nopreview","push_message_nopreview","actions","action","push_action_mute1d","registration","showNotification","notification","notifications","onCloseNotification","fireNotification","closeAllNotifications","waitUntil","pendingNotification","focus","openWindow","baseUrl","getNotifications","len","taskListeners","notifications_clear","ping","ports","source","localNotifications","onPing","toggleStorage","onFetch","origin","respondWith","file","fetch","clone","replace","random","requestCache","scope","params","exec","header","chunks","ranges","parseRange","parse","decodeURIComponent","stream","delay","race","requestRange","onStreamFetch","onChangeState","onfetch","skipWaiting","claim","onunhandledrejection","onoffline","ononline"],"mappings":"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","file":"sw.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nconst Modes = {\n  test: location.search.indexOf('test=1') > 0/*  || true */,\n  debug: location.search.indexOf('debug=1') > 0,\n  http: false, //location.search.indexOf('http=1') > 0,\n  ssl: true, // location.search.indexOf('ssl=1') > 0 || location.protocol === 'https:' && location.search.indexOf('ssl=0') === -1,\n  multipleConnections: true,\n  asServiceWorker: false\n};\n\n                  \n                             \n          \n\nexport default Modes;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport Modes from \"./modes\";\n\nexport const DEBUG = process.env.NODE_ENV !== 'production' || Modes.debug;\nconst ctx: any = typeof(window) !== 'undefined' ? window : self;\nexport const MOUNT_CLASS_TO: any = DEBUG || true/*  && false */ ? ctx : {};\nexport default DEBUG;\n\n//let m = DEBUG;\n/* if(!DEBUG) {\n  ctx.sandpitTurtle = () => {\n    //if(!m) {\n      for(let i in MOUNT_CLASS_TO) {\n        ctx[i] = MOUNT_CLASS_TO[i];\n      }\n      //m = true;\n    //}\n  \n    //DEBUG = !DEBUG;\n  };\n} */\n\n/* export const superDebug = (object: any, key: string) => {\n  var d = object[key];\n  var beforeStr = '', afterStr = '';\n  for(var r of d) {\n    beforeStr += r.before.hex + '\\n';\n    afterStr += r.after.hex + '\\n';\n  }\n\n  beforeStr = beforeStr.trim();\n  afterStr = afterStr.trim();\n  //var beforeStr = d.map(r => r.before.hex).join('\\n');\n  //var afterStr = d.map(r => r.after.hex).join('\\n');\n\n  var dada = (name: string, str: string) => {\n    var a = document.createElement('a');\n    a.target = '_blank';\n    a.download = name + '.txt';\n    a.href = URL.createObjectURL(new Blob([str], {\n      type: 'text/plain'\n    }));\n    document.body.append(a);\n    a.click();\n  };\n\n  dada(key + '_' + 'before', beforeStr);\n  dada(key + '_' + 'after', afterStr);\n}\n\nMOUNT_CLASS_TO.superDebug = superDebug; */\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport DEBUG from \"../config/debug\";\n\nexport enum LogTypes {\n  None = 0,\n  Error = 1,\n  Warn = 2,\n  Log = 4,\n  Debug = 8\n};\n\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\n\nconst _logTimer = Date.now();\nfunction dT() {\n  return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';\n}\n\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error) {\n  if(!DEBUG/*  || true */) {\n    type = LogTypes.Error;\n  }\n\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\n\n  function Log(...args: any[]) {\n    return type & LogTypes.Log && console.log(dT(), prefix, ...args);\n  }\n  \n  Log.warn = function(...args: any[]) {\n    return type & LogTypes.Warn && console.warn(dT(), prefix, ...args);\n  };\n  \n  Log.info = function(...args: any[]) {\n    return type & LogTypes.Log && console.info(dT(), prefix, ...args);\n  };\n  \n  Log.error = function(...args: any[]) {\n    return type & LogTypes.Error && console.error(dT(), prefix, ...args);\n  };\n  \n  Log.trace = function(...args: any[]) {\n    return type & LogTypes.Log && console.trace(dT(), prefix, ...args);\n  };\n\n  /* Log.debug = function(...args: any[]) {\n    return level & LogLevels.debug && console.log(dT(), prefix, ...args);\n  }; */\n\n  Log.debug = function(...args: any[]) {\n    return type & LogTypes.Debug && console.debug(dT(), prefix, ...args);\n  };\n\n  Log.setPrefix = function(_prefix: string) {\n    prefix = '[' + _prefix + ']:';\n  };\n\n  Log.setPrefix(prefix);\n\n  Log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\n  };\n  \n  return Log;\n};\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nconst ctx = self as any as ServiceWorkerGlobalScope;\nexport const CACHE_ASSETS_NAME = 'cachedAssets';\n\nfunction isCorrectResponse(response: Response) {\n  return response.ok && response.status === 200;\n}\n\nexport async function requestCache(event: FetchEvent) {\n  try {\n    const cache = await ctx.caches.open(CACHE_ASSETS_NAME);\n    const file = await cache.match(event.request, {ignoreVary: true});\n  \n    if(file && isCorrectResponse(file)) {\n      return file;\n    }\n  \n    const headers: HeadersInit = {'Vary': '*'};\n    let response = await fetch(event.request, {headers});\n    if(isCorrectResponse(response)) {\n      cache.put(event.request, response.clone());\n    } else if(response.status === 304) { // possible fix for 304 in Safari\n      const url = event.request.url.replace(/\\?.+$/, '') + '?' + (Math.random() * 100000 | 0);\n      response = await fetch(url, {headers});\n      if(isCorrectResponse(response)) {\n        cache.put(event.request, response.clone());\n      }\n    }\n  \n    return response;\n  } catch(err) {\n    return fetch(event.request);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nexport function readBlobAs(blob: Blob, method: 'readAsText'): Promise<string>;\nexport function readBlobAs(blob: Blob, method: 'readAsDataURL'): Promise<string>;\nexport function readBlobAs(blob: Blob, method: 'readAsArrayBuffer'): Promise<ArrayBuffer>;\nexport function readBlobAs(blob: Blob, method: 'readAsArrayBuffer' | 'readAsText' | 'readAsDataURL'): Promise<any> {\n  return new Promise<any>((resolve) => {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', (e) => resolve(e.target.result));\n    reader[method](blob);\n  });\n}\n\nexport function readBlobAsText(blob: Blob) {\n  return readBlobAs(blob, 'readAsText');\n}\n\nexport function readBlobAsDataURL(blob: Blob) {\n  return readBlobAs(blob, 'readAsDataURL');\n}\n\nexport function readBlobAsArrayBuffer(blob: Blob) {\n  return readBlobAs(blob, 'readAsArrayBuffer');\n}\n\nexport function readBlobAsUint8Array(blob: Blob) {\n  return readBlobAsArrayBuffer(blob).then(buffer => new Uint8Array(buffer));\n}\n\nexport function blobConstruct(blobParts: any, mimeType: string = ''): Blob {\n  let blob;\n  const safeMimeType = blobSafeMimeType(mimeType);\n  try {\n    blob = new Blob(blobParts, {type: safeMimeType});\n  } catch(e) {\n    // @ts-ignore\n    let bb = new BlobBuilder;\n    blobParts.forEach((blobPart: any) => {\n      bb.append(blobPart);\n    });\n    blob = bb.getBlob(safeMimeType);\n  }\n  return blob;\n}\n\n// https://www.iana.org/assignments/media-types/media-types.xhtml\nexport function blobSafeMimeType(mimeType: string) {\n  if([\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'image/bmp',\n    'video/mp4',\n    'video/webm',\n    'video/quicktime',\n    'audio/ogg',\n    'audio/mpeg',\n    'audio/mp4',\n    'application/json',\n    'application/pdf'\n  ].indexOf(mimeType) === -1) {\n    return 'application/octet-stream';\n  }\n\n  return mimeType;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport const isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\nexport const isServiceWorker = typeof ServiceWorkerGlobalScope !== 'undefined' && self instanceof ServiceWorkerGlobalScope;\nexport const isWorker = isWebWorker || isServiceWorker;\n\n// в SW может быть сразу две переменных TRUE, поэтому проверяю по последней\n\nexport const getWindowClients = () => {\n  return (self as any as ServiceWorkerGlobalScope)\n  .clients\n  .matchAll({ includeUncontrolled: false, type: 'window' });\n};\n\nconst notifyServiceWorker = (all: boolean, ...args: any[]) => {\n  (self as any as ServiceWorkerGlobalScope)\n  .clients\n  .matchAll({ includeUncontrolled: false, type: 'window' })\n  .then((listeners) => {\n    if(!listeners.length) {\n      //console.trace('no listeners?', self, listeners);\n      return;\n    }\n\n    listeners.slice(all ? 0 : -1).forEach(listener => {\n      // @ts-ignore\n      listener.postMessage(...args);\n    });\n  });\n};\n\nconst notifyWorker = (...args: any[]) => {\n  // @ts-ignore\n  (self as any as DedicatedWorkerGlobalScope).postMessage(...args);\n};\n\nconst noop = () => {};\n\nexport const notifySomeone = isServiceWorker ? notifyServiceWorker.bind(null, false) : (isWebWorker ? notifyWorker : noop);\nexport const notifyAll = isServiceWorker ? notifyServiceWorker.bind(null, true) : (isWebWorker ? notifyWorker : noop);\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { blobConstruct, readBlobAsUint8Array } from \"../helpers/blob\";\n\nexport class FileManager {\n  public blobSupported = true;\n  \n  constructor() {\n    try {\n      blobConstruct([], '');\n    } catch(e) {\n      this.blobSupported = false;\n    }\n  }\n  \n  public isAvailable() {\n    return this.blobSupported;\n  }\n  \n  public write(fileWriter: ReturnType<FileManager['getFakeFileWriter']>, bytes: Uint8Array | Blob | string): Promise<void> {\n    if(bytes instanceof Blob) { // is file bytes\n      return readBlobAsUint8Array(bytes).then(arr => {\n        return fileWriter.write(arr);\n      });\n    } else {\n      return fileWriter.write(bytes);\n    }\n  }\n\n  public getFakeFileWriter(mimeType: string, saveFileCallback?: (blob: Blob) => Promise<Blob>) {\n    const blobParts: Array<Uint8Array | string> = [];\n    const fakeFileWriter = {\n      write: async(part: Uint8Array | string) => {\n        if(!this.blobSupported) {\n          throw false;\n        }\n        \n        blobParts.push(part);\n      },\n      truncate: () => {\n        blobParts.length = 0;\n      },\n      finalize: (saveToStorage = true) => {\n        const blob = blobConstruct(blobParts, mimeType);\n\n        if(saveToStorage && saveFileCallback) {\n          saveFileCallback(blob);\n        }\n        \n        return blob;\n      }\n    };\n    \n    return fakeFileWriter;\n  }\n}\n\nexport default new FileManager();\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport Modes from '../config/modes';\nimport { blobConstruct } from '../helpers/blob';\nimport FileManager from './filemanager';\n//import { MOUNT_CLASS_TO } from './mtproto/mtproto_config';\n//import { logger } from './polyfill';\n\nexport type CacheStorageDbName = 'cachedFiles' | 'cachedStreamChunks' | 'cachedAssets';\n\nexport default class CacheStorageController {\n  private static STORAGES: CacheStorageController[] = [];\n  private openDbPromise: Promise<Cache>;\n\n  private useStorage = true;\n\n  //private log: ReturnType<typeof logger> = logger('CS');\n\n  constructor(private dbName: CacheStorageDbName) {\n    if(Modes.test) {\n      this.dbName += '_test';\n    }\n\n    if(CacheStorageController.STORAGES.length) {\n      this.useStorage = CacheStorageController.STORAGES[0].useStorage;\n    }\n    \n    this.openDatabase();\n    CacheStorageController.STORAGES.push(this);\n  }\n\n  private openDatabase(): Promise<Cache> {\n    return this.openDbPromise ?? (this.openDbPromise = caches.open(this.dbName));\n  }\n\n  public delete(entryName: string) {\n    return this.timeoutOperation((cache) => cache.delete('/' + entryName));\n  }\n\n  public deleteAll() {\n    return caches.delete(this.dbName);\n  }\n\n  public get(entryName: string) {\n    return this.timeoutOperation((cache) => cache.match('/' + entryName));\n  }\n\n  public save(entryName: string, response: Response) {\n    // return new Promise((resolve) => {}); // DEBUG\n    return this.timeoutOperation((cache) => cache.put('/' + entryName, response));\n  }\n\n  public getFile(fileName: string, method: 'blob' | 'json' | 'text' = 'blob'): Promise<any> {\n    /* if(method === 'blob') {\n      return Promise.reject();\n    } */\n\n    // const str = `get fileName: ${fileName}`;\n    // console.time(str);\n    return this.get(fileName).then((response) => {\n      if(!response) {\n        //console.warn('getFile:', response, fileName);\n        throw 'NO_ENTRY_FOUND';\n      }\n\n      const promise = response[method]();\n      // promise.then(() => {\n      //   console.timeEnd(str);\n      // });\n      return promise;\n    });\n  }\n\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\n    //return Promise.resolve(blobConstruct([blob]));\n    if(!(blob instanceof Blob)) {\n      blob = blobConstruct(blob) as Blob;\n    }\n\n    const response = new Response(blob, {\n      headers: {\n        'Content-Length': '' + blob.size\n      }\n    });\n    \n    return this.save(fileName, response).then(() => blob as Blob);\n  }\n\n  public timeoutOperation<T>(callback: (cache: Cache) => Promise<T>) {\n    if(!this.useStorage) {\n      return Promise.reject('STORAGE_OFFLINE');\n    }\n\n    return new Promise<T>(async(resolve, reject) => {\n      let rejected = false;\n      const timeout = setTimeout(() => {\n        reject();\n        //console.warn('CACHESTORAGE TIMEOUT');\n        rejected = true;\n      }, 15e3);\n\n      try {\n        const cache = await this.openDatabase();\n        if(!cache) {\n          this.useStorage = false;\n          this.openDbPromise = undefined;\n          throw 'no cache?';\n        }\n\n        const res = await callback(cache);\n\n        if(rejected) return;\n        resolve(res);\n      } catch(err) {\n        reject(err);\n      }\n\n      clearTimeout(timeout);\n    });\n  }\n\n  public getFileWriter(fileName: string, mimeType: string) {\n    const fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\n      return this.saveFile(fileName, blob).catch(() => blob);\n    });\n\n    return Promise.resolve(fakeWriter);\n  }\n\n  public static toggleStorage(enabled: boolean) {\n    return Promise.all(this.STORAGES.map(storage => {\n      storage.useStorage = enabled;\n      \n      if(!enabled) {\n        return storage.deleteAll();\n      }\n    }));\n  }\n}\n\n//const cacheStorage = new CacheStorageController(); \n//MOUNT_CLASS_TO.cacheStorage = cacheStorage;\n//export default cacheStorage;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { readBlobAsUint8Array } from \"../../helpers/blob\";\nimport { CancellablePromise, deferredPromise } from \"../../helpers/cancellablePromise\";\nimport { getWindowClients, notifySomeone } from \"../../helpers/context\";\nimport debounce from \"../../helpers/schedulers/debounce\";\nimport { isSafari } from \"../../helpers/userAgent\";\nimport { InputFileLocation, UploadFile } from \"../../layer\";\nimport CacheStorageController from \"../cacheStorage\";\nimport { DownloadOptions } from \"../mtproto/apiFileManager\";\nimport { RequestFilePartTask, deferredPromises, log } from \"./index.service\";\nimport timeout from \"./timeout\";\n\nconst cacheStorage = new CacheStorageController('cachedStreamChunks');\nconst CHUNK_TTL = 86400;\nconst CHUNK_CACHED_TIME_HEADER = 'Time-Cached';\n\nconst clearOldChunks = () => {\n  return cacheStorage.timeoutOperation((cache) => {\n    return cache.keys().then(requests => {\n      const filtered: Map<StreamId, Request> = new Map();\n      const timestamp = Date.now() / 1000 | 0;\n      for(const request of requests) {\n        const match = request.url.match(/\\/(\\d+?)\\?/);\n        if(match && !filtered.has(match[1])) {\n          filtered.set(match[1], request);\n        }\n      }\n\n      const promises: Promise<any>[] = [];\n      for(const [id, request] of filtered) {\n        const promise = cache.match(request).then((response) => {\n          if((+response.headers.get(CHUNK_CACHED_TIME_HEADER) + CHUNK_TTL) <= timestamp) {\n            log('will delete stream chunk:', id);\n            return cache.delete(request, {ignoreSearch: true, ignoreVary: true});\n          }\n        });\n\n        promises.push(promise);\n      }\n\n      return Promise.all(promises);\n    });\n  });\n};\n\nsetInterval(clearOldChunks, 1800e3);\nsetInterval(() => {\n  getWindowClients().then((clients) => {\n    for(const [clientId, promises] of deferredPromises) {\n      if(!clients.find(client => client.id === clientId)) {\n        for(const taskId in promises) {\n          const promise = promises[taskId];\n          promise.reject();\n        }\n\n        deferredPromises.delete(clientId);\n      }\n    }\n  });\n}, 120e3);\n\ntype StreamRange = [number, number];\ntype StreamId = string;\nconst streams: Map<StreamId, Stream> = new Map();\nclass Stream {\n  private destroyDebounced: () => void;\n  private id: StreamId;\n  private limitPart: number;\n  private loadedOffsets: Set<number> = new Set();\n\n  constructor(private info: DownloadOptions) {\n    this.id = Stream.getId(info);\n    streams.set(this.id, this);\n\n    // ! если грузить очень большое видео чанками по 512Кб в мобильном Safari, то стрим не запустится\n    this.limitPart = info.size > (75 * 1024 * 1024) ? STREAM_CHUNK_UPPER_LIMIT : STREAM_CHUNK_MIDDLE_LIMIT;\n    this.destroyDebounced = debounce(this.destroy, 150000, false, true);\n  }\n\n  private destroy = () => {\n    streams.delete(this.id);\n  };\n\n  private async requestFilePartFromWorker(alignedOffset: number, limit: number, fromPreload = false) {\n    const task: Omit<RequestFilePartTask, 'id'> = {\n      type: 'requestFilePart',\n      payload: [this.info.dcId, this.info.location, alignedOffset, limit]\n    };\n\n    const taskId = JSON.stringify(task);\n    (task as RequestFilePartTask).id = taskId;\n\n    const windowClient = await getWindowClients().then((clients) => {\n      if(!clients.length) {\n        return;\n      }\n\n      return clients.find(client => deferredPromises.has(client.id)) || clients[0];\n    });\n\n    if(!windowClient) {\n      throw new Error('no window');\n    }\n\n    let promises = deferredPromises.get(windowClient.id);\n    if(!promises) {\n      deferredPromises.set(windowClient.id, promises = {});\n    }\n    \n    let deferred = promises[taskId] as CancellablePromise<UploadFile.uploadFile>;\n    if(deferred) {\n      return deferred.then(uploadFile => uploadFile.bytes);\n    }\n    \n    windowClient.postMessage(task);\n    this.loadedOffsets.add(alignedOffset);\n    \n    deferred = promises[taskId] = deferredPromise<UploadFile.uploadFile>();\n    const bytesPromise = deferred.then(uploadFile => uploadFile.bytes);\n\n    this.saveChunkToCache(bytesPromise, alignedOffset, limit);\n    !fromPreload && this.preloadChunks(alignedOffset, alignedOffset + (this.limitPart * 15));\n\n    return bytesPromise;\n  }\n\n  private requestFilePartFromCache(alignedOffset: number, limit: number, fromPreload?: boolean) {\n    const key = this.getChunkKey(alignedOffset, limit);\n    return cacheStorage.getFile(key).then((blob: Blob) => {\n      return fromPreload ? new Uint8Array() : readBlobAsUint8Array(blob);\n    }, (error) => {\n      if(error === 'NO_ENTRY_FOUND') {\n        return;\n      }\n    });\n  }\n\n  private requestFilePart(alignedOffset: number, limit: number, fromPreload?: boolean) {\n    return this.requestFilePartFromCache(alignedOffset, limit, fromPreload).then(bytes => {\n      return bytes || this.requestFilePartFromWorker(alignedOffset, limit, fromPreload);\n    });\n  }\n\n  private saveChunkToCache(deferred: Promise<Uint8Array>, alignedOffset: number, limit: number) {\n    return deferred.then(bytes => {\n      const key = this.getChunkKey(alignedOffset, limit);\n      const response = new Response(bytes, {\n        headers: {\n          'Content-Length': '' + bytes.length,\n          'Content-Type': 'application/octet-stream',\n          [CHUNK_CACHED_TIME_HEADER]: '' + (Date.now() / 1000 | 0)\n        }\n      });\n\n      return cacheStorage.save(key, response);\n    });\n  }\n\n  private preloadChunk(offset: number) {\n    if(this.loadedOffsets.has(offset)) {\n      return;\n    }\n\n    this.loadedOffsets.add(offset);\n    this.requestFilePart(offset, this.limitPart, true);\n  }\n\n  private preloadChunks(offset: number, end: number) {\n    if(end > this.info.size) {\n      end = this.info.size;\n    }\n\n    if(!offset) { // load last chunk for bounds\n      this.preloadChunk(alignOffset(offset, this.limitPart));\n    } else { // don't preload next chunks before the start\n      for(; offset < end; offset += this.limitPart) {\n        this.preloadChunk(offset);\n      }\n    }\n  }\n\n  public requestRange(range: StreamRange) {\n    this.destroyDebounced();\n\n    const possibleResponse = responseForSafariFirstRange(range, this.info.mimeType, this.info.size);\n    if(possibleResponse) {\n      return possibleResponse;\n    }\n\n    let [offset, end] = range;\n\n    /* if(info.size > limitPart && isSafari && offset === limitPart) {\n      //end = info.size - 1;\n      //offset = info.size - 1 - limitPart;\n      offset = info.size - (info.size % limitPart);\n    } */\n\n    const limit = end && end < this.limitPart ? alignLimit(end - offset + 1) : this.limitPart;\n    const alignedOffset = alignOffset(offset, limit);\n\n    if(!end) {\n      end = Math.min(offset + limit, this.info.size - 1);\n    }\n\n    return this.requestFilePart(alignedOffset, limit).then(ab => {\n      //log.debug('[stream] requestFilePart result:', result);\n\n      // if(isSafari) {\n      if(offset !== alignedOffset || end !== (alignedOffset + limit)) {\n        ab = ab.slice(offset - alignedOffset, end - alignedOffset + 1);\n      }\n      \n      const headers: Record<string, string> = {\n        'Accept-Ranges': 'bytes',\n        'Content-Range': `bytes ${offset}-${offset + ab.byteLength - 1}/${this.info.size || '*'}`,\n        'Content-Length': `${ab.byteLength}`\n      };\n\n      if(this.info.mimeType) {\n        headers['Content-Type'] = this.info.mimeType;\n      }\n\n      // simulate slow connection\n      //setTimeout(() => {\n        return new Response(ab, {\n          status: 206,\n          statusText: 'Partial Content',\n          headers,\n        });\n      //}, 2.5e3);\n    });\n  }\n\n  private getChunkKey(alignedOffset: number, limit: number) {\n    return this.id + '?offset=' + alignedOffset + '&limit=' + limit;\n  }\n\n  public static get(info: DownloadOptions) {\n    return streams.get(this.getId(info)) ?? new Stream(info);\n  }\n\n  private static getId(info: DownloadOptions) {\n    return (info.location as InputFileLocation.inputDocumentFileLocation).id;\n  }\n}\n\nexport default function onStreamFetch(event: FetchEvent, params: string) {\n  const range = parseRange(event.request.headers.get('Range'));\n  const info: DownloadOptions = JSON.parse(decodeURIComponent(params));\n  const stream = Stream.get(info);\n\n  //log.debug('[stream]', url, offset, end);\n\n  event.respondWith(Promise.race([\n    timeout(45 * 1000),\n    stream.requestRange(range)\n  ]));\n}\n\nfunction responseForSafariFirstRange(range: StreamRange, mimeType: string, size: number): Response {\n  if(range[0] === 0 && range[1] === 1) {\n    return new Response(new Uint8Array(2).buffer, {\n      status: 206,\n      statusText: 'Partial Content',\n      headers: {\n        'Accept-Ranges': 'bytes',\n        'Content-Range': `bytes 0-1/${size || '*'}`,\n        'Content-Length': '2',\n        'Content-Type': mimeType || 'video/mp4',\n      },\n    });\n  }\n\n  return null;\n}\n\n/* const STREAM_CHUNK_UPPER_LIMIT = 256 * 1024;\nconst SMALLEST_CHUNK_LIMIT = 256 * 4; */\n/* const STREAM_CHUNK_UPPER_LIMIT = 1024 * 1024;\nconst SMALLEST_CHUNK_LIMIT = 1024 * 4; */\nconst STREAM_CHUNK_MIDDLE_LIMIT = 512 * 1024;\nconst STREAM_CHUNK_UPPER_LIMIT = 1024 * 1024;\nconst SMALLEST_CHUNK_LIMIT = 512 * 4;\n\nfunction parseRange(header: string): StreamRange {\n  if(!header) return [0, 0];\n  const [, chunks] = header.split('=');\n  const ranges = chunks.split(', ');\n  const [offset, end] = ranges[0].split('-');\n\n  return [+offset, +end || 0];\n}\n\nfunction alignOffset(offset: number, base = SMALLEST_CHUNK_LIMIT) {\n  return offset - (offset % base);\n}\n\nfunction alignLimit(limit: number) {\n  return 2 ** Math.ceil(Math.log(limit) / Math.log(2));\n}\n","// * Jolly Cobra's schedulers\n\nimport { AnyToVoidFunction } from \"../../types\";\n\nexport default function debounce<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n  shouldRunLast = true,\n) {\n  let waitingTimeout: number | null = null;\n\n  return (...args: Parameters<F>) => {\n    if(waitingTimeout) {\n      clearTimeout(waitingTimeout);\n      waitingTimeout = null;\n    } else if(shouldRunFirst) {\n      // @ts-ignore\n      fn(...args);\n    }\n\n    waitingTimeout = setTimeout(() => {\n      if(shouldRunLast) {\n        // @ts-ignore\n        fn(...args);\n      }\n\n      waitingTimeout = null;\n    }, ms) as any;\n  };\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport interface CancellablePromise<T> extends Promise<T> {\n  resolve?: (value: T) => void,\n  reject?: (...args: any[]) => void,\n  cancel?: () => void,\n\n  notify?: (...args: any[]) => void,\n  notifyAll?: (...args: any[]) => void,\n  lastNotify?: any,\n  listeners?: Array<(...args: any[]) => void>,\n  addNotifyListener?: (callback: (...args: any[]) => void) => void,\n\n  isFulfilled?: boolean,\n  isRejected?: boolean\n}\n\nexport function deferredPromise<T>() {\n  let deferredHelper: any = {\n    isFulfilled: false, \n    isRejected: false,\n\n    notify: () => {}, \n    notifyAll: (...args: any[]) => {\n      deferredHelper.lastNotify = args;\n      deferredHelper.listeners.forEach((callback: any) => callback(...args));\n    }, \n\n    lastNotify: undefined,\n    listeners: [],\n    addNotifyListener: (callback: (...args: any[]) => void) => {\n      if(deferredHelper.lastNotify) {\n        callback(...deferredHelper.lastNotify);\n      }\n\n      deferredHelper.listeners.push(callback);\n    }\n  };\n\n  let deferred: CancellablePromise<T> = new Promise<T>((resolve, reject) => {\n    deferredHelper.resolve = (value: T) => {\n      if(deferred.isFulfilled) return;\n\n      deferred.isFulfilled = true;\n      resolve(value);\n    };\n    \n    deferredHelper.reject = (...args: any[]) => {\n      if(deferred.isRejected) return;\n      \n      deferred.isRejected = true;\n      reject(...args);\n    };\n  });\n\n  // @ts-ignore\n  /* deferred.then = (resolve: (value: T) => any, reject: (...args: any[]) => any) => {\n    const n = deferredPromise<ReturnType<typeof resolve>>();\n    \n  }; */\n\n  deferred.finally(() => {\n    deferred.notify = null;\n    deferred.listeners.length = 0;\n    deferred.lastNotify = null;\n\n    if(deferred.cancel) {\n      deferred.cancel = () => {};\n    }\n  });\n\n  Object.assign(deferred, deferredHelper);\n\n  return deferred;\n}","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { Database } from '.';\n\nconst DATABASE_STATE: Database<'session' | 'stickerSets' | 'users' | 'chats' | 'messages' | 'dialogs'> = {\n  name: 'tweb',\n  version: 7,\n  stores: [{\n    name: 'session'\n  }, {\n    name: 'stickerSets'\n  }, {\n    name: 'users'\n  }, {\n    name: 'chats'\n  }, {\n    name: 'dialogs'\n  }, {\n    name: 'messages'\n  }]\n};\n\nexport default DATABASE_STATE;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport const userAgent = navigator ? navigator.userAgent : null;\nexport const isApple = navigator.userAgent.search(/OS X|iPhone|iPad|iOS/i) !== -1;\nexport const isAndroid = navigator.userAgent.toLowerCase().indexOf('android') !== -1;\nexport const isChromium = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\n\nexport const ctx = typeof(window) !== 'undefined' ? window : self;\n\n// https://stackoverflow.com/a/58065241\nexport const isAppleMobile = (/iPad|iPhone|iPod/.test(navigator.platform) ||\n  (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) &&\n  !ctx.MSStream;\n\nexport const isSafari = !!('safari' in ctx) || !!(userAgent && (/\\b(iPad|iPhone|iPod)\\b/.test(userAgent) || (!!userAgent.match('Safari') && !userAgent.match('Chrome'))))/*  || true */;\nexport const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n\nexport const isMobileSafari = isSafari && isAppleMobile;\n\nexport const isMobile = /* screen.width && screen.width < 480 ||  */navigator.maxTouchPoints > 0 && navigator.userAgent.search(/iOS|iPhone OS|Android|BlackBerry|BB10|Series ?[64]0|J2ME|MIDP|opera mini|opera mobi|mobi.+Gecko|Windows Phone/i) != -1;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { Database } from '../config/databases';\nimport Modes from '../config/modes';\nimport { blobConstruct } from '../helpers/blob';\nimport { safeAssign } from '../helpers/object';\nimport { logger } from './logger';\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\n */\nexport type IDBIndex = {\n  indexName: string,\n  keyPath: string,\n  objectParameters: IDBIndexParameters\n};\n\nexport type IDBStore = {\n  name: string, \n  indexes?: IDBIndex[]\n};\n\nexport type IDBOptions = {\n  name?: string,\n  storeName: string,\n  stores?: IDBStore[],\n  version?: number\n};\n\nconst DEBUG = false;\n\nexport default class IDBStorage<T extends Database<any>> {\n  private static STORAGES: IDBStorage<Database<any>>[] = [];\n  private openDbPromise: Promise<IDBDatabase>;\n  private db: IDBDatabase;\n  private storageIsAvailable = true;\n\n  private log: ReturnType<typeof logger>;\n  \n  private name: string;\n  private version: number;\n  private stores: IDBStore[];\n  private storeName: T['stores'][0]['name'];\n\n  constructor(db: T, storeName: typeof db['stores'][0]['name']) {\n    safeAssign(this, db);\n\n    if(Modes.test) {\n      this.name += '_test';\n    }\n\n    this.storeName = storeName;\n\n    this.log = logger('IDB-' + this.storeName);\n\n    this.openDatabase(true);\n\n    IDBStorage.STORAGES.push(this);\n  }\n\n  public static closeDatabases(preserve?: IDBStorage<Database<any>>) {\n    this.STORAGES.forEach(storage => {\n      if(preserve && preserve === storage) {\n        return;\n      }\n\n      const db = storage.db;\n      if(db) {\n        db.onclose = () => {};\n        db.close();\n      }\n    });\n  }\n\n  /**\n   * ! WARNING ! function requires at least one opened connection\n   */\n  /* public static clearObjectStores() {\n    const storage = this.STORAGES[0];\n    this.closeDatabases(storage);\n\n    const names = Array.from(storage.db.objectStoreNames);\n    const promises = names.map(name => storage.clear(name));\n    return Promise.all(promises);\n  } */\n\n  /* public static deleteDatabase() {\n    this.closeDatabases();\n\n    const storages = this.STORAGES;\n    const dbNames = Array.from(new Set(storages.map(storage => storage.name)));\n    const promises = dbNames.map(dbName => {\n      return new Promise<void>((resolve, reject) => {\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\n  \n        deleteRequest.onerror = () => {\n          reject();\n        };\n  \n        deleteRequest.onsuccess = () => {\n          resolve();\n        };\n      });\n    });\n\n    return Promise.all(promises);\n  } */\n\n  public isAvailable() {\n    return this.storageIsAvailable;\n  }\n\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\n    if(this.openDbPromise && !createNew) {\n      return this.openDbPromise;\n    }\n\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\n      const os = db.createObjectStore(store.name);\n\n      if(store.indexes?.length) {\n        for(const index of store.indexes) {\n          os.createIndex(index.indexName, index.keyPath, index.objectParameters);\n        }\n      }\n    };\n\n    try {\n      var request = indexedDB.open(this.name, this.version);\n\n      if(!request) {\n        return Promise.reject();\n      }\n    } catch(error) {\n      this.log.error('error opening db', error.message)\n      this.storageIsAvailable = false;\n      return Promise.reject(error);\n    }\n\n    let finished = false;\n    setTimeout(() => {\n      if(!finished) {\n        request.onerror({type: 'IDB_CREATE_TIMEOUT'} as Event);\n      }\n    }, 3000);\n\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\n      request.onsuccess = (event) => {\n        finished = true;\n        const db = request.result;\n        let calledNew = false;\n\n        this.log('Opened');\n  \n        db.onerror = (error) => {\n          this.storageIsAvailable = false;\n          this.log.error('Error creating/accessing IndexedDB database', error);\n          reject(error);\n        };\n\n        db.onclose = (e) => {\n          this.log.error('closed:', e);\n          !calledNew && this.openDatabase();\n        };\n\n        db.onabort = (e) => {\n          this.log.error('abort:', e);\n          const transaction = e.target as IDBTransaction;\n          \n          this.openDatabase(calledNew = true);\n\n          if(transaction.onerror) {\n            transaction.onerror(e);\n          }\n\n          db.close();\n        };\n\n        db.onversionchange = (e) => {\n          this.log.error('onversionchange, lol?');\n        };\n\n        resolve(this.db = db);\n      };\n  \n      request.onerror = (event) => {\n        finished = true;\n        this.storageIsAvailable = false;\n        this.log.error('Error creating/accessing IndexedDB database', event);\n        reject(event);\n      };\n  \n      request.onupgradeneeded = (event) => {\n        finished = true;\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\n\n        // @ts-ignore\n        var db = event.target.result as IDBDatabase;\n        this.stores.forEach((store) => {\n          /* if(db.objectStoreNames.contains(store.name)) {\n            //if(event.oldVersion === 1) {\n              db.deleteObjectStore(store.name);\n            //}\n          } */\n    \n          if(!db.objectStoreNames.contains(store.name)) {\n            createObjectStore(db, store);\n          }\n        });\n      };\n    });\n  }\n\n  public delete(entryName: string | string[]): Promise<void> {\n    //return Promise.resolve();\n    if(!Array.isArray(entryName)) {\n      entryName = [].concat(entryName);\n    }\n\n    return this.getObjectStore('readwrite', (objectStore) => {\n      return (entryName as string[]).map((entryName) => objectStore.delete(entryName));\n    }, DEBUG ? 'delete: ' + entryName.join(', ') : '');\n  }\n\n  public clear(storeName?: IDBStorage<T>['storeName']) {\n    return this.getObjectStore('readwrite', (objectStore) => objectStore.clear(), DEBUG ? 'clear' : '', storeName);\n  }\n\n  public save(entryName: string | string[], value: any | any[]) {\n    // const handleError = (error: Error) => {\n    //   this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\n    //   if((!error || error.name === 'InvalidStateError')/*  && false */) {\n    //     setTimeout(() => {\n    //       this.save(entryName, value);\n    //     }, 2e3);\n    //   } else {\n    //     //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\n    //   }\n    // };\n\n    if(!Array.isArray(entryName)) {\n      entryName = [].concat(entryName);\n      value = [].concat(value);\n    }\n    \n    return this.getObjectStore('readwrite', (objectStore) => {\n      return (entryName as string[]).map((entryName, idx) => objectStore.put(value[idx], entryName));\n    }, DEBUG ? 'save: ' + entryName.join(', ') : '');\n  }\n\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\n    //return Promise.resolve(blobConstruct([blob]));\n    if(!(blob instanceof Blob)) {\n      blob = blobConstruct([blob]) as Blob;\n    }\n\n    return this.save(fileName, blob);\n  }\n\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\n      return Promise.reject();\n    }\n\n    if(!(blob instanceof Blob)) {\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\n      return this.storagePutB64String(db, fileName, address).then(() => {\n        return blob;\n      });\n    }\n\n    try {\n      var reader = new FileReader();\n    } catch (e) {\n      this.storageIsAvailable = false;\n      return Promise.reject();\n    }\n\n    let promise = new Promise<Blob>((resolve, reject) => {\n      reader.onloadend = () => {\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\n          resolve(blob);\n        }, reject);\n      }\n  \n      reader.onerror = reject;\n    });\n    \n\n    try {\n      reader.readAsDataURL(blob);\n    } catch (e) {\n      this.storageIsAvailable = false;\n      return Promise.reject();\n    }\n\n    return promise;\n  }\n\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\n    try {\n      var objectStore = db.transaction([this.storeName], 'readwrite')\n        .objectStore(this.storeName);\n      var request = objectStore.put(b64string, fileName);\n    } catch(error) {\n      this.storageIsAvailable = false;\n      return Promise.reject(error);\n    }\n\n    return new Promise((resolve, reject) => {\n      request.onsuccess = function(event) {\n        resolve();\n      };\n  \n      request.onerror = reject;\n    });\n  }\n\n  public getBlobSize(blob: any) {\n    return blob.size || blob.byteLength || blob.length;\n  } */\n\n  public get<T>(entryName: string[]): Promise<T[]>;\n  public get<T>(entryName: string): Promise<T>;\n  public get<T>(entryName: string | string[]): Promise<T> | Promise<T[]> {\n    //return Promise.reject();\n\n    if(!Array.isArray(entryName)) {\n      entryName = [].concat(entryName);\n    }\n\n    return this.getObjectStore<T>('readonly', (objectStore) => {\n      return (entryName as string[]).map((entryName) => objectStore.get(entryName));\n    }, DEBUG ? 'get: ' + entryName.join(', ') : '');\n  }\n\n  private getObjectStore<T>(mode: IDBTransactionMode, objectStore: (objectStore: IDBObjectStore) => IDBRequest | IDBRequest[], log?: string, storeName = this.storeName) {\n    let perf: number;\n\n    if(log) {\n      perf = performance.now();\n      this.log(log + ': start');\n    }\n\n    return this.openDatabase().then((db) => {\n      return new Promise<T>((resolve, reject) => {\n        /* if(mode === 'readwrite') {\n          return;\n        } */\n\n        const transaction = db.transaction([storeName], mode);\n\n        transaction.onerror = (e) => {\n          clearTimeout(timeout);\n          reject(transaction.error);\n        };\n  \n        transaction.oncomplete = (e) => {\n          clearTimeout(timeout);\n\n          if(log) {\n            this.log(log + ': end', performance.now() - perf);\n          }\n\n          const results = r.map(r => r.result);\n          resolve(isArray ? results : results[0]);\n        };\n  \n        const timeout = setTimeout(() => {\n          this.log.error('transaction not finished', transaction);\n        }, 10000);\n  \n        /* transaction.addEventListener('abort', (e) => {\n          //handleError();\n          this.log.error('IndexedDB: transaction abort!', transaction.error);\n        }); */\n  \n        const requests = objectStore(transaction.objectStore(storeName));\n\n        const isArray = Array.isArray(requests);\n        const r: IDBRequest[] = isArray ? requests : [].concat(requests) as any;\n\n        // const length = r.length;\n        // /* let left = length;\n\n        // const onRequestFinished = (error?: Error) => {\n        //   if(!--left) {\n        //     resolve(result);\n        //     clearTimeout(timeout);\n        //   }\n        // }; */\n\n        // for(let i = 0; i < length; ++i) {\n        //   const request = r[i];\n        //   request.onsuccess = () => {\n        //     onRequestFinished();\n        //   };\n\n        //   request.onerror = (e) => {\n        //     onRequestFinished(transaction.error);\n        //   };\n        // }\n      });\n    });\n  }\n\n  public getAll<T>(): Promise<T[]> {\n    return this.getObjectStore<T[]>('readonly', (objectStore) => objectStore.getAll(), DEBUG ? 'getAll' : '');\n  }\n\n  /* public getAllKeys(): Promise<Array<string>> {\n    console.time('getAllEntries');\n    return this.openDatabase().then((db) => {\n      var objectStore = db.transaction([this.storeName], 'readonly')\n        .objectStore(this.storeName);\n      var request = objectStore.getAllKeys();\n\n      return new Promise((resolve, reject) => {\n        request.onsuccess = function(event) {\n          // @ts-ignore\n          var result = event.target.result;\n          resolve(result);\n          console.timeEnd('getAllEntries');\n        }\n  \n        request.onerror = reject;\n      });\n    });\n  } */\n\n  /* public isFileExists(fileName: string): Promise<boolean> {\n    console.time('isFileExists');\n    return this.openDatabase().then((db) => {\n      var objectStore = db.transaction([this.storeName], 'readonly')\n        .objectStore(this.storeName);\n      var request = objectStore.openCursor(fileName);\n\n      return new Promise((resolve, reject) => {\n        request.onsuccess = function(event) {\n          // @ts-ignore\n          var cursor = event.target.result;\n          resolve(!!cursor);\n          console.timeEnd('isFileExists');\n        }\n  \n        request.onerror = reject;\n      });\n    });\n  } */\n\n  /* public getFileWriter(fileName: string, mimeType: string) {\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\n      return this.saveFile(fileName, blob);\n    });\n\n    return Promise.resolve(fakeWriter);\n  } */\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nexport function copy<T>(obj: T): T {\n  //in case of premitives\n  if(obj === null || typeof(obj) !== \"object\") {\n    return obj;\n  }\n \n  //date objects should be \n  if(obj instanceof Date) {\n    return new Date(obj.getTime()) as any;\n  }\n \n  //handle Array\n  if(Array.isArray(obj)) {\n    // @ts-ignore\n    const clonedArr: T = obj.map(el => copy(el)) as any as T;\n    return clonedArr;\n  }\n \n  //lastly, handle objects\n  // @ts-ignore\n  let clonedObj = new obj.constructor();\n  for(var prop in obj){\n    if(obj.hasOwnProperty(prop)) {\n      clonedObj[prop] = copy(obj[prop]);\n    }\n  }\n  return clonedObj;\n}\n\nexport function deepEqual(x: any, y: any): boolean {\n  const ok = Object.keys, tx = typeof x, ty = typeof y;\n  return x && y && tx === 'object' && tx === ty ? (\n    ok(x).length === ok(y).length &&\n      ok(x).every(key => deepEqual(x[key], y[key]))\n  ) : (x === y);\n}\n\nexport function defineNotNumerableProperties(obj: {[key: string]: any}, names: string[]) {\n  //const perf = performance.now();\n  const props = {writable: true, configurable: true};\n  const out: {[name: string]: typeof props} = {};\n  names.forEach(name => {\n    if(obj[name] === undefined) {\n      out[name] = props;\n    }\n  });\n  Object.defineProperties(obj, out);\n  //console.log('defineNotNumerableProperties time:', performance.now() - perf);\n}\n\nexport function getObjectKeysAndSort(object: any, sort: 'asc' | 'desc' = 'asc') {\n  if(!object) return [];\n  const ids = Object.keys(object).map(i => +i);\n  if(sort === 'asc') return ids.sort((a, b) => a - b);\n  else return ids.sort((a, b) => b - a);\n}\n\nexport function safeReplaceObject(wasObject: any, newObject: any) {\n  if(!wasObject) {\n    return newObject;\n  }\n\n  for(var key in wasObject) {\n    if(!newObject.hasOwnProperty(key)) {\n      delete wasObject[key];\n    }\n  }\n\n  for(var key in newObject) {\n    //if (newObject.hasOwnProperty(key)) { // useless\n      wasObject[key] = newObject[key];\n    //}\n  }\n  \n  return wasObject;\n}\n\n/**\n * Will be used for FILE_REFERENCE_EXPIRED\n * @param key \n * @param wasObject \n * @param newObject \n */\nexport function safeReplaceArrayInObject<K>(key: K, wasObject: any, newObject: any) {\n  if('byteLength' in newObject[key]) { // Uint8Array\n    newObject[key] = [...newObject[key]];\n  }\n\n  if(wasObject && wasObject[key] !== newObject[key]) {\n    wasObject[key].length = newObject[key].length;\n    (newObject[key] as any[]).forEach((v, i) => {\n      wasObject[key][i] = v;\n    });\n\n    /* wasObject[key].set(newObject[key]); */\n    newObject[key] = wasObject[key];\n  }\n}\n\nexport function isObject(object: any) {\n  return typeof(object) === 'object' && object !== null;\n}\n\nexport function getDeepProperty(object: any, key: string) {\n  const splitted = key.split('.');\n  let o: any = object;\n  splitted.forEach(key => {\n    if(!key) {\n      return;\n    }\n    \n    // @ts-ignore\n    o = o[key];\n  });\n  \n  return o;\n}\n\nexport function setDeepProperty(object: any, key: string, value: any) {\n  const splitted = key.split('.');\n  getDeepProperty(object, splitted.slice(0, -1).join('.'))[splitted.pop()] = value;\n}\n\nexport function validateInitObject(initObject: any, currentObject: any, onReplace?: (key: string) => void, previousKey?: string) {\n  for(const key in initObject) {\n    if(typeof(currentObject[key]) !== typeof(initObject[key])) {\n      currentObject[key] = copy(initObject[key]);\n      onReplace && onReplace(previousKey || key);\n    } else if(isObject(initObject[key])) {\n      validateInitObject(initObject[key], currentObject[key], onReplace, previousKey || key);\n    }\n  }\n}\n\nexport function safeAssign(object: any, fromObject: any) {\n  if(!fromObject) return;\n  \n  for(let i in fromObject) {\n    if(fromObject[i] !== undefined) {\n      object[i] = fromObject[i];\n    }\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { Database } from \"../../config/databases\";\nimport DATABASE_STATE from \"../../config/databases/state\";\nimport { isFirefox } from \"../../helpers/userAgent\";\nimport IDBStorage from \"../idb\";\nimport { log, ServiceWorkerPingTask, ServiceWorkerPushClickTask } from \"./index.service\";\n\nconst ctx = self as any as ServiceWorkerGlobalScope;\nconst defaultBaseUrl = location.protocol + '//' + location.hostname + location.pathname.split('/').slice(0, -1).join('/') + '/';\n\nexport type PushNotificationObject = {\n  loc_key: string,\n  loc_args: string[],\n  //user_id: number, // should be number\n  custom: {\n    channel_id?: string, // should be number\n    chat_id?: string, // should be number\n    from_id?: string, // should be number\n    msg_id: string,\n    peerId?: string // should be number\n  },\n  sound?: string,\n  random_id: number,\n  badge?: string, // should be number\n  description: string,\n  mute: string, // should be number\n  title: string,\n\n  action?: 'mute1d' | 'push_settings', // will be set before postMessage to main thread\n};\n\nclass SomethingGetter<T extends Database<any>, Storage extends Record<string, any>> {\n  private cache: Partial<Storage> = {};\n  private storage: IDBStorage<T>;\n\n  constructor(\n    db: T, \n    storeName: typeof db['stores'][number]['name'], \n    private defaults: {\n      [Property in keyof Storage]: ((value: Storage[Property]) => Storage[Property]) | Storage[Property]\n    }\n  ) {\n    this.storage = new IDBStorage<T>(db, storeName);\n  }\n\n  public async get<T extends keyof Storage>(key: T) {\n    if(this.cache[key] !== undefined) {\n      return this.cache[key];\n    }\n\n    let value: Storage[T];\n    try {\n      value = await this.storage.get(key as string);\n    } catch(err) {\n\n    }\n\n    if(this.cache[key] !== undefined) {\n      return this.cache[key];\n    }\n\n    if(value === undefined) {\n      const callback = this.defaults[key];\n      value = typeof(callback) === 'function' ? callback() : callback;\n    }\n\n    return this.cache[key] = value;\n  }\n\n  public async set<T extends keyof Storage>(key: T, value: Storage[T]) {\n    this.cache[key] = value;\n\n    try {\n      this.storage.save(key as string, value);\n    } catch(err) {\n\n    }\n  }\n}\n\ntype PushStorage = {\n  push_mute_until: number,\n  push_last_alive: number,\n  push_lang: Partial<ServiceWorkerPingTask['payload']['lang']>\n  push_settings: Partial<ServiceWorkerPingTask['payload']['settings']>\n};\n\nconst getter = new SomethingGetter<typeof DATABASE_STATE, PushStorage>(DATABASE_STATE, 'session', {\n  push_mute_until: 0,\n  push_last_alive: 0,\n  push_lang: {},\n  push_settings: {}\n});\n\nctx.addEventListener('push', (event) => {\n  const obj: PushNotificationObject = event.data.json();\n  log('push', obj);\n\n  let hasActiveWindows = false;\n  const checksPromise = Promise.all([\n    getter.get('push_mute_until'), \n    getter.get('push_last_alive'), \n    ctx.clients.matchAll({type: 'window'})\n  ]).then((result) => {\n    const [muteUntil, lastAliveTime, clientList] = result;\n    \n    log('matched clients', clientList);\n    hasActiveWindows = clientList.length > 0;\n    if(hasActiveWindows) {\n      throw 'Supress notification because some instance is alive';\n    }\n    \n    const nowTime = Date.now();\n    if(userInvisibleIsSupported() &&\n        muteUntil &&\n        nowTime < muteUntil) {\n      throw `Supress notification because mute for ${Math.ceil((muteUntil - nowTime) / 60000)} min`;\n    }\n\n    if(!obj.badge) {\n      throw 'No badge?';\n    }\n  });\n\n  checksPromise.catch(reason => {\n    log(reason);\n  });\n\n  const notificationPromise = checksPromise.then(() => {\n    return Promise.all([getter.get('push_settings'), getter.get('push_lang')])\n  }).then((result) => {\n    return fireNotification(obj, result[0], result[1]);\n  });\n\n  const closePromise = notificationPromise.catch(() => {\n    log('Closing all notifications on push', hasActiveWindows);\n    if(userInvisibleIsSupported() || hasActiveWindows) {\n      return closeAllNotifications();\n    }\n\n    return ctx.registration.showNotification('Telegram', {\n      tag: 'unknown_peer'\n    }).then(() => {\n      if(hasActiveWindows) {\n        return closeAllNotifications();\n      }\n\n      setTimeout(() => closeAllNotifications(), hasActiveWindows ? 0 : 100);\n    }).catch((error) => {\n      log.error('Show notification error', error);\n    });\n  });\n\n  event.waitUntil(closePromise);\n});\n\nctx.addEventListener('notificationclick', (event) => {\n  const notification = event.notification;\n  log('On notification click: ', notification.tag);\n  notification.close();\n\n  const action = event.action as PushNotificationObject['action'];\n  if(action === 'mute1d' && userInvisibleIsSupported()) {\n    log('[SW] mute for 1d');\n    getter.set('push_mute_until', Date.now() + 86400e3);\n    return;\n  }\n\n  const data: PushNotificationObject = notification.data;\n  if(!data) {\n    return;\n  }\n\n  const promise = ctx.clients.matchAll({\n    type: 'window'\n  }).then((clientList) => {\n    data.action = action;\n    pendingNotification = {type: 'push_click', payload: data};\n    for(let i = 0; i < clientList.length; i++) {\n      const client = clientList[i];\n      if('focus' in client) {\n        client.focus();\n        client.postMessage(pendingNotification);\n        pendingNotification = undefined;\n        return;\n      }\n    }\n\n    if(ctx.clients.openWindow) {\n      return getter.get('push_settings').then((settings) => {\n        return ctx.clients.openWindow(settings.baseUrl || defaultBaseUrl);\n      });\n    }\n  }).catch((error) => {\n    log.error('Clients.matchAll error', error);\n  })\n\n  event.waitUntil(promise);\n});\n\nctx.addEventListener('notificationclose', onCloseNotification);\n\nlet notifications: Set<Notification> = new Set();\nlet pendingNotification: ServiceWorkerPushClickTask;\nfunction pushToNotifications(notification: Notification) {\n  if(!notifications.has(notification)) {\n    notifications.add(notification);\n    // @ts-ignore\n    notification.onclose = onCloseNotification;\n  }\n}\n\nfunction onCloseNotification(event: NotificationEvent) {\n  removeFromNotifications(event.notification)\n}\n\nfunction removeFromNotifications(notification: Notification) {\n  notifications.delete(notification);\n}\n\nexport function closeAllNotifications() {\n  for(const notification of notifications) {\n    try {\n      notification.close();\n    } catch(e) {}\n  }\n\n  let promise: Promise<void>;\n  if('getNotifications' in ctx.registration) {\n    promise = ctx.registration.getNotifications({}).then((notifications) => {\n      for(let i = 0, len = notifications.length; i < len; ++i) {\n        try {\n          notifications[i].close();\n        } catch(e) {}\n      }\n    }).catch((error) => {\n      log.error('Offline register SW error', error);\n    });\n  } else {\n    promise = Promise.resolve();\n  }\n\n  notifications.clear();\n\n  return promise;\n}\n\nfunction userInvisibleIsSupported() {\n  return isFirefox;\n}\n\nfunction fireNotification(obj: PushNotificationObject, settings: PushStorage['push_settings'], lang: PushStorage['push_lang']) {\n  const icon = 'assets/img/logo_filled_rounded.png';\n  let title = obj.title || 'Telegram';\n  let body = obj.description || '';\n  let peerId: number;\n\n  if(obj.custom) {\n    if(obj.custom.channel_id) {\n      peerId = -obj.custom.channel_id;\n    } else if(obj.custom.chat_id) {\n      peerId = -obj.custom.chat_id;\n    } else {\n      peerId = +obj.custom.from_id || 0;\n    }\n  }\n\n  obj.custom.peerId = '' + peerId;\n  let tag = 'peer' + peerId;\n\n  if(settings && settings.nopreview) {\n    title = 'Telegram';\n    body = lang.push_message_nopreview || 'You have a new message';\n    tag = 'unknown_peer';\n  }\n\n  log('show notify', title, body, icon, obj);\n\n  const actions: (Omit<NotificationAction, 'action'> & {action: PushNotificationObject['action']})[] = [{\n    action: 'mute1d',\n    title: lang.push_action_mute1d || 'Mute for 24H'\n  }/* , {\n    action: 'push_settings',\n    title: lang.push_action_settings || 'Settings'\n  } */];\n\n  const notificationPromise = ctx.registration.showNotification(title, {\n    body,\n    icon,\n    tag,\n    data: obj,\n    actions\n  });\n\n  return notificationPromise.then((event) => {\n    // @ts-ignore\n    if(event && event.notification) {\n      // @ts-ignore\n      pushToNotifications(event.notification);\n    }\n  }).catch((error) => {\n    log.error('Show notification promise', error);\n  });\n}\n\nexport function onPing(task: ServiceWorkerPingTask, event: ExtendableMessageEvent) {\n  const client = event.ports && event.ports[0] || event.source;\n  const payload = task.payload;\n\n  if(payload.localNotifications) {\n    getter.set('push_last_alive', Date.now());\n  }\n\n  if(pendingNotification &&\n      client &&\n      'postMessage' in client) {\n    client.postMessage(pendingNotification, []);\n    pendingNotification = undefined;\n  }\n\n  if(payload.lang) {\n    getter.set('push_lang', payload.lang);\n  }\n\n  if(payload.settings) {\n    getter.set('push_settings', payload.settings);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n                  \n                                   \n          \n//import CacheStorageController from '../cacheStorage';\nimport type { Modify, WorkerTaskTemplate, WorkerTaskVoidTemplate } from '../../types';\nimport type { InputFileLocation, UploadFile } from '../../layer';\nimport type { WebPushApiManager } from '../mtproto/webPushApiManager';\nimport type { PushNotificationObject } from './push';\nimport type { ToggleStorageTask } from '../mtproto/mtprotoworker';\nimport { logger, LogTypes } from '../logger';\nimport { CancellablePromise } from '../../helpers/cancellablePromise';\nimport { CACHE_ASSETS_NAME, requestCache } from './cache';\nimport onStreamFetch from './stream';\nimport { closeAllNotifications, onPing } from './push';\nimport CacheStorageController from '../cacheStorage';\n\nexport const log = logger('SW', LogTypes.Error | LogTypes.Debug | LogTypes.Log | LogTypes.Warn);\nconst ctx = self as any as ServiceWorkerGlobalScope;\nexport const deferredPromises: Map<WindowClient['id'], {[taskId: string]: CancellablePromise<any>}> = new Map();\n\nexport interface RequestFilePartTask extends Modify<WorkerTaskTemplate, {id: string}> {\n  type: 'requestFilePart',\n  payload: [number, InputFileLocation, number, number]\n};\n\nexport interface RequestFilePartTaskResponse extends Modify<WorkerTaskTemplate, {id: string}> {\n  type: 'requestFilePart',\n  payload?: UploadFile.uploadFile,\n  originalPayload?: RequestFilePartTask['payload']\n};\n\nexport interface ServiceWorkerPingTask extends WorkerTaskVoidTemplate {\n  type: 'ping',\n  payload: {\n    localNotifications: boolean,\n    lang: {\n      push_action_mute1d: string\n      push_action_settings: string\n      push_message_nopreview: string\n    },\n    settings: WebPushApiManager['settings']\n  }\n};\n\nexport interface ServiceWorkerNotificationsClearTask extends WorkerTaskVoidTemplate {\n  type: 'notifications_clear'\n};\n\nexport interface ServiceWorkerPushClickTask extends WorkerTaskVoidTemplate {\n  type: 'push_click',\n  payload: PushNotificationObject\n};\n\nexport type ServiceWorkerTask = RequestFilePartTaskResponse | ServiceWorkerPingTask | ServiceWorkerNotificationsClearTask | ToggleStorageTask;\n\n                   \nconst taskListeners: {\n  [type in ServiceWorkerTask['type']]: (task: any, event: ExtendableMessageEvent) => void\n} = {\n  notifications_clear: () => {\n    closeAllNotifications();\n  },\n  ping: (task: ServiceWorkerPingTask, event) => {\n    onPing(task, event);\n  },\n  requestFilePart: (task: RequestFilePartTaskResponse, e: ExtendableMessageEvent) => {\n    const windowClient = e.source as WindowClient;\n    const promises = deferredPromises.get(windowClient.id);\n    if(!promises) {\n      return;\n    }\n\n    const promise = promises[task.id];\n    if(promise) {\n      if(task.error) {\n        promise.reject(task.error);\n      } else {\n        promise.resolve(task.payload);\n      }\n  \n      delete promises[task.id];\n    }\n  },\n  toggleStorage: (task: ToggleStorageTask) => {\n    CacheStorageController.toggleStorage(task.payload);\n  }\n};\nctx.addEventListener('message', (e) => {\n  const task = e.data as ServiceWorkerTask;\n  const callback = taskListeners[task.type];\n  if(callback) {\n    callback(task, e);\n  }\n});\n          \n\n//const cacheStorage = new CacheStorageController('cachedAssets');\n/* let taskId = 0;\n\nexport function getTaskId() {\n  return taskId;\n}\n\nexport function incrementTaskId() {\n  return taskId++;\n} */\n\nconst onFetch = (event: FetchEvent): void => {\n  if(event.request.url.indexOf(location.origin + '/') === 0 && event.request.url.match(/\\.(js|css|jpe?g|json|wasm|png|mp3|svg|tgs|ico|woff2?|ttf|webmanifest?)(?:\\?.*)?$/)) {\n    return event.respondWith(requestCache(event));\n  }\n\n  try {\n    const [, url, scope, params] = /http[:s]+\\/\\/.*?(\\/(.*?)(?:$|\\/(.*)$))/.exec(event.request.url) || [];\n\n    //log.debug('[fetch]:', event);\n  \n    switch(scope) {\n      case 'stream': {\n        onStreamFetch(event, params);\n        break;\n      }\n    }\n  } catch(err) {\n    event.respondWith(new Response('', {\n      status: 500,\n      statusText: 'Internal Server Error',\n    }));\n  }\n};\n\nconst onChangeState = () => {\n  ctx.onfetch = onFetch;\n};\n\nctx.addEventListener('install', (event) => {\n  log('installing');\n  event.waitUntil(ctx.skipWaiting()); // Activate worker immediately\n});\n\nctx.addEventListener('activate', (event) => {\n  log('activating', ctx);\n  event.waitUntil(ctx.caches.delete(CACHE_ASSETS_NAME));\n  event.waitUntil(ctx.clients.claim());\n});\n\nctx.onerror = (error) => {\n  log.error('error:', error);\n};\n\nctx.onunhandledrejection = (error) => {\n  log.error('onunhandledrejection:', error);\n};\n\nctx.onoffline = ctx.ononline = onChangeState;\n\nonChangeState();\n","export default function timeout(delay: number): Promise<Response> {\n  return new Promise(((resolve) => {\n    setTimeout(() => {\n      resolve(new Response('', {\n        status: 408,\n        statusText: 'Request timed out.',\n      }));\n    }, delay);\n  }));\n}\n"],"sourceRoot":""}