{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/config/modes.ts","webpack:///./src/config/debug.ts","webpack:///./src/lib/logger.ts","webpack:///./src/lib/serviceWorker/cache.ts","webpack:///./src/helpers/context.ts","webpack:///./src/helpers/userAgent.ts","webpack:///./src/lib/serviceWorker/stream.ts","webpack:///./src/lib/serviceWorker/timeout.ts","webpack:///./src/helpers/cancellablePromise.ts","webpack:///./src/config/databases/state.ts","webpack:///./src/lib/idb.ts","webpack:///./src/helpers/object.ts","webpack:///./src/helpers/blob.ts","webpack:///./src/lib/serviceWorker/push.ts","webpack:///./src/lib/serviceWorker/index.service.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","test","location","search","indexOf","debug","http","ssl","multipleConnections","asServiceWorker","DEBUG","window","self","LogTypes","LOG_LEVELS","None","Error","Warn","Log","Debug","_logTimer","Date","now","dT","toFixed","logger","prefix","type","args","console","log","warn","info","error","trace","setPrefix","_prefix","setLevel","level","slice","reduce","acc","v","isCorrectResponse","response","ok","status","isWebWorker","WorkerGlobalScope","isServiceWorker","ServiceWorkerGlobalScope","notifyServiceWorker","all","clients","matchAll","includeUncontrolled","then","listeners","length","forEach","listener","postMessage","notifyWorker","noop","notifySomeone","userAgent","navigator","toLowerCase","vendor","isSafari","platform","maxTouchPoints","MSStream","match","isFirefox","onStreamFetch","event","params","range","header","chunks","split","ranges","offset","end","parseRange","request","headers","JSON","parse","decodeURIComponent","limitPart","size","STREAM_CHUNK_UPPER_LIMIT","STREAM_CHUNK_MIDDLE_LIMIT","delay","respondWith","Promise","race","resolve","setTimeout","Response","statusText","reject","possibleResponse","mimeType","Uint8Array","buffer","responseForSafariFirstRange","limit","Math","ceil","alignLimit","alignedOffset","base","alignOffset","task","id","incrementTaskId","payload","dcId","deferredPromises","deferredHelper","isFulfilled","isRejected","notify","notifyAll","lastNotify","callback","undefined","addNotifyListener","push","deferred","finally","cancel","assign","deferredPromise","result","ab","bytes","byteLength","catch","err","version","stores","db","storeName","storageIsAvailable","fromObject","safeAssign","this","openDatabase","STORAGES","preserve","storage","onclose","close","createNew","openDbPromise","indexedDB","open","message","finished","onerror","onsuccess","calledNew","e","onabort","transaction","target","onversionchange","onupgradeneeded","oldVersion","newVersion","store","objectStoreNames","contains","os","createObjectStore","indexes","index","createIndex","indexName","keyPath","objectParameters","entryName","Array","isArray","concat","getObjectStore","objectStore","map","delete","clear","idx","put","fileName","blob","Blob","blobParts","safeMimeType","blobSafeMimeType","bb","BlobBuilder","blobPart","append","getBlob","blobConstruct","save","perf","performance","clearTimeout","timeout","oncomplete","results","requests","getAll","defaultBaseUrl","protocol","hostname","pathname","join","defaults","cache","push_mute_until","push_last_alive","push_lang","push_settings","addEventListener","obj","data","json","hasActiveWindows","checksPromise","muteUntil","lastAliveTime","clientList","nowTime","userInvisibleIsSupported","badge","reason","closePromise","settings","lang","icon","peerId","title","body","description","custom","channel_id","chat_id","from_id","tag","nopreview","push_message_nopreview","actions","action","push_action_mute1d","registration","showNotification","notification","notifications","has","add","onCloseNotification","fireNotification","closeAllNotifications","waitUntil","set","promise","pendingNotification","client","focus","openWindow","baseUrl","Set","getNotifications","len","taskListeners","notifications_clear","ping","ports","source","localNotifications","onPing","requestFilePart","taskId","getTaskId","onFetch","url","origin","caches","file","ignoreVary","fetch","clone","replace","random","requestCache","scope","exec","onChangeState","onfetch","skipWaiting","claim","onunhandledrejection","onoffline","ononline"],"mappings":"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","file":"sw.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nconst Modes = {\r\n  test: location.search.indexOf('test=1') > 0/*  || true */,\r\n  debug: location.search.indexOf('debug=1') > 0,\r\n  http: false, //location.search.indexOf('http=1') > 0,\r\n  ssl: true, // location.search.indexOf('ssl=1') > 0 || location.protocol === 'https:' && location.search.indexOf('ssl=0') === -1,\r\n  multipleConnections: true,\r\n  asServiceWorker: false\r\n};\r\n\r\n                  \r\n                             \r\n          \r\n\r\nexport default Modes;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from \"./modes\";\r\n\r\nexport const DEBUG = process.env.NODE_ENV !== 'production' || Modes.debug;\r\nconst ctx: any = typeof(window) !== 'undefined' ? window : self;\r\nexport const MOUNT_CLASS_TO: any = DEBUG || true/*  && false */ ? ctx : {};\r\nexport default DEBUG;\r\n\r\n//let m = DEBUG;\r\n/* if(!DEBUG) {\r\n  ctx.sandpitTurtle = () => {\r\n    //if(!m) {\r\n      for(let i in MOUNT_CLASS_TO) {\r\n        ctx[i] = MOUNT_CLASS_TO[i];\r\n      }\r\n      //m = true;\r\n    //}\r\n  \r\n    //DEBUG = !DEBUG;\r\n  };\r\n} */\r\n\r\n/* export const superDebug = (object: any, key: string) => {\r\n  var d = object[key];\r\n  var beforeStr = '', afterStr = '';\r\n  for(var r of d) {\r\n    beforeStr += r.before.hex + '\\n';\r\n    afterStr += r.after.hex + '\\n';\r\n  }\r\n\r\n  beforeStr = beforeStr.trim();\r\n  afterStr = afterStr.trim();\r\n  //var beforeStr = d.map(r => r.before.hex).join('\\n');\r\n  //var afterStr = d.map(r => r.after.hex).join('\\n');\r\n\r\n  var dada = (name: string, str: string) => {\r\n    var a = document.createElement('a');\r\n    a.target = '_blank';\r\n    a.download = name + '.txt';\r\n    a.href = URL.createObjectURL(new Blob([str], {\r\n      type: 'text/plain'\r\n    }));\r\n    document.body.append(a);\r\n    a.click();\r\n  };\r\n\r\n  dada(key + '_' + 'before', beforeStr);\r\n  dada(key + '_' + 'after', afterStr);\r\n}\r\n\r\nMOUNT_CLASS_TO.superDebug = superDebug; */\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport DEBUG from \"../config/debug\";\r\n\r\nexport enum LogTypes {\r\n  None = 0,\r\n  Error = 1,\r\n  Warn = 2,\r\n  Log = 4,\r\n  Debug = 8\r\n};\r\n\r\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\r\n\r\nconst _logTimer = Date.now();\r\nfunction dT() {\r\n  return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';\r\n}\r\n\r\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error) {\r\n  if(!DEBUG/*  || true */) {\r\n    type = LogTypes.Error;\r\n  }\r\n\r\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\r\n\r\n  function Log(...args: any[]) {\r\n    return type & LogTypes.Log && console.log(dT(), prefix, ...args);\r\n  }\r\n  \r\n  Log.warn = function(...args: any[]) {\r\n    return type & LogTypes.Warn && console.warn(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.info = function(...args: any[]) {\r\n    return type & LogTypes.Log && console.info(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.error = function(...args: any[]) {\r\n    return type & LogTypes.Error && console.error(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.trace = function(...args: any[]) {\r\n    return type & LogTypes.Log && console.trace(dT(), prefix, ...args);\r\n  };\r\n\r\n  /* Log.debug = function(...args: any[]) {\r\n    return level & LogLevels.debug && console.log(dT(), prefix, ...args);\r\n  }; */\r\n\r\n  Log.debug = function(...args: any[]) {\r\n    return type & LogTypes.Debug && console.debug(dT(), prefix, ...args);\r\n  };\r\n\r\n  Log.setPrefix = function(_prefix: string) {\r\n    prefix = '[' + _prefix + ']:';\r\n  };\r\n\r\n  Log.setPrefix(prefix);\r\n\r\n  Log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\r\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\r\n  };\r\n  \r\n  return Log;\r\n};\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nconst ctx = self as any as ServiceWorkerGlobalScope;\r\nexport const CACHE_ASSETS_NAME = 'cachedAssets';\r\n\r\nfunction isCorrectResponse(response: Response) {\r\n  return response.ok && response.status === 200;\r\n}\r\n\r\nexport async function requestCache(event: FetchEvent) {\r\n  try {\r\n    const cache = await ctx.caches.open(CACHE_ASSETS_NAME);\r\n    const file = await cache.match(event.request, {ignoreVary: true});\r\n  \r\n    if(file && isCorrectResponse(file)) {\r\n      return file;\r\n    }\r\n  \r\n    const headers: HeadersInit = {'Vary': '*'};\r\n    let response = await fetch(event.request, {headers});\r\n    if(isCorrectResponse(response)) {\r\n      cache.put(event.request, response.clone());\r\n    } else if(response.status === 304) { // possible fix for 304 in Safari\r\n      const url = event.request.url.replace(/\\?.+$/, '') + '?' + (Math.random() * 100000 | 0);\r\n      response = await fetch(url, {headers});\r\n      if(isCorrectResponse(response)) {\r\n        cache.put(event.request, response.clone());\r\n      }\r\n    }\r\n  \r\n    return response;\r\n  } catch(err) {\r\n    return fetch(event.request);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport const isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\r\nexport const isServiceWorker = typeof ServiceWorkerGlobalScope !== 'undefined' && self instanceof ServiceWorkerGlobalScope;\r\nexport const isWorker = isWebWorker || isServiceWorker;\r\n\r\n// в SW может быть сразу две переменных TRUE, поэтому проверяю по последней\r\n\r\nconst notifyServiceWorker = (all: boolean, ...args: any[]) => {\r\n  (self as any as ServiceWorkerGlobalScope)\r\n  .clients\r\n  .matchAll({ includeUncontrolled: false, type: 'window' })\r\n  .then((listeners) => {\r\n    if(!listeners.length) {\r\n      //console.trace('no listeners?', self, listeners);\r\n      return;\r\n    }\r\n\r\n    listeners.slice(all ? 0 : -1).forEach(listener => {\r\n      // @ts-ignore\r\n      listener.postMessage(...args);\r\n    });\r\n  });\r\n};\r\n\r\nconst notifyWorker = (...args: any[]) => {\r\n  // @ts-ignore\r\n  (self as any as DedicatedWorkerGlobalScope).postMessage(...args);\r\n};\r\n\r\nconst noop = () => {};\r\n\r\nexport const notifySomeone = isServiceWorker ? notifyServiceWorker.bind(null, false) : (isWebWorker ? notifyWorker : noop);\r\nexport const notifyAll = isServiceWorker ? notifyServiceWorker.bind(null, true) : (isWebWorker ? notifyWorker : noop);\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport const userAgent = navigator ? navigator.userAgent : null;\r\nexport const isApple = navigator.userAgent.search(/OS X|iPhone|iPad|iOS/i) !== -1;\r\nexport const isAndroid = navigator.userAgent.toLowerCase().indexOf('android') !== -1;\r\nexport const isChromium = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\r\n\r\n/**\r\n * Returns true when run in WebKit derived browsers.\r\n * This is used as a workaround for a memory leak in Safari caused by using Transferable objects to\r\n * transfer data between WebWorkers and the main thread.\r\n * https://github.com/mapbox/mapbox-gl-js/issues/8771\r\n *\r\n * This should be removed once the underlying Safari issue is fixed.\r\n */\r\nexport const ctx = typeof(window) !== 'undefined' ? window : self;\r\n\r\n// https://stackoverflow.com/a/58065241\r\nexport const isAppleMobile = (/iPad|iPhone|iPod/.test(navigator.platform) ||\r\n  (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) &&\r\n  !ctx.MSStream;\r\n\r\nexport const isSafari = !!('safari' in ctx) || !!(userAgent && (/\\b(iPad|iPhone|iPod)\\b/.test(userAgent) || (!!userAgent.match('Safari') && !userAgent.match('Chrome'))))/*  || true */;\r\nexport const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\r\n\r\nexport const isMobileSafari = isSafari && isAppleMobile;\r\n\r\nexport const isMobile = /* screen.width && screen.width < 480 ||  */navigator.userAgent.search(/iOS|iPhone OS|Android|BlackBerry|BB10|Series ?[64]0|J2ME|MIDP|opera mini|opera mobi|mobi.+Gecko|Windows Phone/i) != -1;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { deferredPromise } from \"../../helpers/cancellablePromise\";\r\nimport { notifySomeone } from \"../../helpers/context\";\r\nimport { isSafari } from \"../../helpers/userAgent\";\r\nimport { UploadFile } from \"../../layer\";\r\nimport { DownloadOptions } from \"../mtproto/apiFileManager\";\r\nimport { RequestFilePartTask, deferredPromises, incrementTaskId } from \"./index.service\";\r\nimport timeout from \"./timeout\";\r\n\r\nexport default function onStreamFetch(event: FetchEvent, params: string) {\r\n  const range = parseRange(event.request.headers.get('Range'));\r\n  let [offset, end] = range;\r\n\r\n  const info: DownloadOptions = JSON.parse(decodeURIComponent(params));\r\n  //const fileName = getFileNameByLocation(info.location);\r\n\r\n  // ! если грузить очень большое видео чанками по 512Кб в мобильном Safari, то стрим не запустится\r\n  const limitPart = info.size > (75 * 1024 * 1024) ? STREAM_CHUNK_UPPER_LIMIT : STREAM_CHUNK_MIDDLE_LIMIT;\r\n\r\n  /* if(info.size > limitPart && isSafari && offset === limitPart) {\r\n    //end = info.size - 1;\r\n    //offset = info.size - 1 - limitPart;\r\n    offset = info.size - (info.size % limitPart);\r\n  } */\r\n\r\n  //log.debug('[stream]', url, offset, end);\r\n\r\n  event.respondWith(Promise.race([\r\n    timeout(45 * 1000),\r\n\r\n    new Promise<Response>((resolve, reject) => {\r\n      // safari workaround\r\n      const possibleResponse = responseForSafariFirstRange(range, info.mimeType, info.size);\r\n      if(possibleResponse) {\r\n        return resolve(possibleResponse);\r\n      }\r\n\r\n      const limit = end && end < limitPart ? alignLimit(end - offset + 1) : limitPart;\r\n      const alignedOffset = alignOffset(offset, limit);\r\n\r\n      //log.debug('[stream] requestFilePart:', /* info.dcId, info.location, */ alignedOffset, limit);\r\n\r\n      const task: RequestFilePartTask = {\r\n        type: 'requestFilePart',\r\n        id: incrementTaskId(),\r\n        payload: [info.dcId, info.location, alignedOffset, limit]\r\n      };\r\n\r\n      \r\n      const deferred = deferredPromises[task.id] = deferredPromise<UploadFile.uploadFile>();\r\n      deferred.then(result => {\r\n        let ab = result.bytes as Uint8Array;\r\n        \r\n        //log.debug('[stream] requestFilePart result:', result);\r\n\r\n        const headers: Record<string, string> = {\r\n          'Accept-Ranges': 'bytes',\r\n          'Content-Range': `bytes ${alignedOffset}-${alignedOffset + ab.byteLength - 1}/${info.size || '*'}`,\r\n          'Content-Length': `${ab.byteLength}`,\r\n        };\r\n\r\n        if(info.mimeType) headers['Content-Type'] = info.mimeType;\r\n\r\n        if(isSafari) {\r\n          ab = ab.slice(offset - alignedOffset, end - alignedOffset + 1);\r\n          headers['Content-Range'] = `bytes ${offset}-${offset + ab.byteLength - 1}/${info.size || '*'}`;\r\n          headers['Content-Length'] = `${ab.byteLength}`;\r\n        }\r\n\r\n        // simulate slow connection\r\n        //setTimeout(() => {\r\n          resolve(new Response(ab, {\r\n            status: 206,\r\n            statusText: 'Partial Content',\r\n            headers,\r\n          }));\r\n        //}, 2.5e3);\r\n      }).catch(err => {});\r\n\r\n      notifySomeone(task);\r\n    })\r\n  ]));\r\n}\r\n\r\nfunction responseForSafariFirstRange(range: [number, number], mimeType: string, size: number): Response {\r\n  if(range[0] === 0 && range[1] === 1) {\r\n    return new Response(new Uint8Array(2).buffer, {\r\n      status: 206,\r\n      statusText: 'Partial Content',\r\n      headers: {\r\n        'Accept-Ranges': 'bytes',\r\n        'Content-Range': `bytes 0-1/${size || '*'}`,\r\n        'Content-Length': '2',\r\n        'Content-Type': mimeType || 'video/mp4',\r\n      },\r\n    });\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/* const STREAM_CHUNK_UPPER_LIMIT = 256 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 256 * 4; */\r\n/* const STREAM_CHUNK_UPPER_LIMIT = 1024 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 1024 * 4; */\r\nconst STREAM_CHUNK_MIDDLE_LIMIT = 512 * 1024;\r\nconst STREAM_CHUNK_UPPER_LIMIT = 1024 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 512 * 4;\r\n\r\nfunction parseRange(header: string): [number, number] {\r\n  if(!header) return [0, 0];\r\n  const [, chunks] = header.split('=');\r\n  const ranges = chunks.split(', ');\r\n  const [offset, end] = ranges[0].split('-');\r\n\r\n  return [+offset, +end || 0];\r\n}\r\n\r\nfunction alignOffset(offset: number, base = SMALLEST_CHUNK_LIMIT) {\r\n  return offset - (offset % base);\r\n}\r\n\r\nfunction alignLimit(limit: number) {\r\n  return 2 ** Math.ceil(Math.log(limit) / Math.log(2));\r\n}\r\n","export default function timeout(delay: number): Promise<Response> {\r\n  return new Promise(((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(new Response('', {\r\n        status: 408,\r\n        statusText: 'Request timed out.',\r\n      }));\r\n    }, delay);\r\n  }));\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport interface CancellablePromise<T> extends Promise<T> {\r\n  resolve?: (...args: any[]) => void,\r\n  reject?: (...args: any[]) => void,\r\n  cancel?: () => void,\r\n\r\n  notify?: (...args: any[]) => void,\r\n  notifyAll?: (...args: any[]) => void,\r\n  lastNotify?: any,\r\n  listeners?: Array<(...args: any[]) => void>,\r\n  addNotifyListener?: (callback: (...args: any[]) => void) => void,\r\n\r\n  isFulfilled?: boolean,\r\n  isRejected?: boolean\r\n}\r\n\r\nexport function deferredPromise<T>() {\r\n  let deferredHelper: any = {\r\n    isFulfilled: false, \r\n    isRejected: false,\r\n\r\n    notify: () => {}, \r\n    notifyAll: (...args: any[]) => {\r\n      deferredHelper.lastNotify = args;\r\n      deferredHelper.listeners.forEach((callback: any) => callback(...args));\r\n    }, \r\n\r\n    lastNotify: undefined,\r\n    listeners: [],\r\n    addNotifyListener: (callback: (...args: any[]) => void) => {\r\n      if(deferredHelper.lastNotify) {\r\n        callback(...deferredHelper.lastNotify);\r\n      }\r\n\r\n      deferredHelper.listeners.push(callback);\r\n    }\r\n  };\r\n\r\n  let deferred: CancellablePromise<T> = new Promise<T>((resolve, reject) => {\r\n    deferredHelper.resolve = (value: T) => {\r\n      if(deferred.isFulfilled) return;\r\n\r\n      deferred.isFulfilled = true;\r\n      resolve(value);\r\n    };\r\n    \r\n    deferredHelper.reject = (...args: any[]) => {\r\n      if(deferred.isRejected) return;\r\n      \r\n      deferred.isRejected = true;\r\n      reject(...args);\r\n    };\r\n  });\r\n\r\n  // @ts-ignore\r\n  /* deferred.then = (resolve: (value: T) => any, reject: (...args: any[]) => any) => {\r\n    const n = deferredPromise<ReturnType<typeof resolve>>();\r\n    \r\n  }; */\r\n\r\n  deferred.finally(() => {\r\n    deferred.notify = null;\r\n    deferred.listeners.length = 0;\r\n    deferred.lastNotify = null;\r\n\r\n    if(deferred.cancel) {\r\n      deferred.cancel = () => {};\r\n    }\r\n  });\r\n\r\n  Object.assign(deferred, deferredHelper);\r\n\r\n  return deferred;\r\n}","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from '.';\r\n\r\nconst DATABASE_STATE: Database<'session' | 'stickerSets' | 'users' | 'chats' | 'messages' | 'dialogs'> = {\r\n  name: 'tweb',\r\n  version: 7,\r\n  stores: [{\r\n    name: 'session'\r\n  }, {\r\n    name: 'stickerSets'\r\n  }, {\r\n    name: 'users'\r\n  }, {\r\n    name: 'chats'\r\n  }, {\r\n    name: 'dialogs'\r\n  }, {\r\n    name: 'messages'\r\n  }]\r\n};\r\n\r\nexport default DATABASE_STATE;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from '../config/databases';\r\nimport Modes from '../config/modes';\r\nimport { blobConstruct } from '../helpers/blob';\r\nimport { safeAssign } from '../helpers/object';\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\r\n */\r\nexport type IDBIndex = {\r\n  indexName: string,\r\n  keyPath: string,\r\n  objectParameters: IDBIndexParameters\r\n};\r\n\r\nexport type IDBStore = {\r\n  name: string, \r\n  indexes?: IDBIndex[]\r\n};\r\n\r\nexport type IDBOptions = {\r\n  name?: string,\r\n  storeName: string,\r\n  stores?: IDBStore[],\r\n  version?: number\r\n};\r\n\r\nconst DEBUG = false;\r\n\r\nexport default class IDBStorage<T extends Database<any>> {\r\n  private static STORAGES: IDBStorage<Database<any>>[] = [];\r\n  private openDbPromise: Promise<IDBDatabase>;\r\n  private db: IDBDatabase;\r\n  private storageIsAvailable = true;\r\n\r\n  private log: ReturnType<typeof logger>;\r\n  \r\n  private name: string;\r\n  private version: number;\r\n  private stores: IDBStore[];\r\n  private storeName: T['stores'][0]['name'];\r\n\r\n  constructor(db: T, storeName: typeof db['stores'][0]['name']) {\r\n    safeAssign(this, db);\r\n\r\n    if(Modes.test) {\r\n      this.name += '_test';\r\n    }\r\n\r\n    this.storeName = storeName;\r\n\r\n    this.log = logger('IDB-' + this.storeName);\r\n\r\n    this.openDatabase(true);\r\n\r\n    IDBStorage.STORAGES.push(this);\r\n  }\r\n\r\n  public static closeDatabases(preserve?: IDBStorage<Database<any>>) {\r\n    this.STORAGES.forEach(storage => {\r\n      if(preserve && preserve === storage) {\r\n        return;\r\n      }\r\n\r\n      const db = storage.db;\r\n      if(db) {\r\n        db.onclose = () => {};\r\n        db.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ! WARNING ! function requires at least one opened connection\r\n   */\r\n  /* public static clearObjectStores() {\r\n    const storage = this.STORAGES[0];\r\n    this.closeDatabases(storage);\r\n\r\n    const names = Array.from(storage.db.objectStoreNames);\r\n    const promises = names.map(name => storage.clear(name));\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  /* public static deleteDatabase() {\r\n    this.closeDatabases();\r\n\r\n    const storages = this.STORAGES;\r\n    const dbNames = Array.from(new Set(storages.map(storage => storage.name)));\r\n    const promises = dbNames.map(dbName => {\r\n      return new Promise<void>((resolve, reject) => {\r\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\r\n  \r\n        deleteRequest.onerror = () => {\r\n          reject();\r\n        };\r\n  \r\n        deleteRequest.onsuccess = () => {\r\n          resolve();\r\n        };\r\n      });\r\n    });\r\n\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  public isAvailable() {\r\n    return this.storageIsAvailable;\r\n  }\r\n\r\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\r\n    if(this.openDbPromise && !createNew) {\r\n      return this.openDbPromise;\r\n    }\r\n\r\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\r\n      const os = db.createObjectStore(store.name);\r\n\r\n      if(store.indexes?.length) {\r\n        for(const index of store.indexes) {\r\n          os.createIndex(index.indexName, index.keyPath, index.objectParameters);\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      var request = indexedDB.open(this.name, this.version);\r\n\r\n      if(!request) {\r\n        return Promise.reject();\r\n      }\r\n    } catch(error) {\r\n      this.log.error('error opening db', error.message)\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    let finished = false;\r\n    setTimeout(() => {\r\n      if(!finished) {\r\n        request.onerror({type: 'IDB_CREATE_TIMEOUT'} as Event);\r\n      }\r\n    }, 3000);\r\n\r\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\r\n      request.onsuccess = (event) => {\r\n        finished = true;\r\n        const db = request.result;\r\n        let calledNew = false;\r\n\r\n        this.log('Opened');\r\n  \r\n        db.onerror = (error) => {\r\n          this.storageIsAvailable = false;\r\n          this.log.error('Error creating/accessing IndexedDB database', error);\r\n          reject(error);\r\n        };\r\n\r\n        db.onclose = (e) => {\r\n          this.log.error('closed:', e);\r\n          !calledNew && this.openDatabase();\r\n        };\r\n\r\n        db.onabort = (e) => {\r\n          this.log.error('abort:', e);\r\n          const transaction = e.target as IDBTransaction;\r\n          \r\n          this.openDatabase(calledNew = true);\r\n\r\n          if(transaction.onerror) {\r\n            transaction.onerror(e);\r\n          }\r\n\r\n          db.close();\r\n        };\r\n\r\n        db.onversionchange = (e) => {\r\n          this.log.error('onversionchange, lol?');\r\n        };\r\n\r\n        resolve(this.db = db);\r\n      };\r\n  \r\n      request.onerror = (event) => {\r\n        finished = true;\r\n        this.storageIsAvailable = false;\r\n        this.log.error('Error creating/accessing IndexedDB database', event);\r\n        reject(event);\r\n      };\r\n  \r\n      request.onupgradeneeded = (event) => {\r\n        finished = true;\r\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\r\n\r\n        // @ts-ignore\r\n        var db = event.target.result as IDBDatabase;\r\n        this.stores.forEach((store) => {\r\n          /* if(db.objectStoreNames.contains(store.name)) {\r\n            //if(event.oldVersion === 1) {\r\n              db.deleteObjectStore(store.name);\r\n            //}\r\n          } */\r\n    \r\n          if(!db.objectStoreNames.contains(store.name)) {\r\n            createObjectStore(db, store);\r\n          }\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  public delete(entryName: string | string[]): Promise<void> {\r\n    //return Promise.resolve();\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.delete(entryName));\r\n    }, DEBUG ? 'delete: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public clear(storeName?: IDBStorage<T>['storeName']) {\r\n    return this.getObjectStore('readwrite', (objectStore) => objectStore.clear(), DEBUG ? 'clear' : '', storeName);\r\n  }\r\n\r\n  public save(entryName: string | string[], value: any | any[]) {\r\n    // const handleError = (error: Error) => {\r\n    //   this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\r\n    //   if((!error || error.name === 'InvalidStateError')/*  && false */) {\r\n    //     setTimeout(() => {\r\n    //       this.save(entryName, value);\r\n    //     }, 2e3);\r\n    //   } else {\r\n    //     //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\r\n    //   }\r\n    // };\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n      value = [].concat(value);\r\n    }\r\n    \r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName, idx) => objectStore.put(value[idx], entryName));\r\n    }, DEBUG ? 'save: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct([blob]) as Blob;\r\n    }\r\n\r\n    return this.save(fileName, blob);\r\n  }\r\n\r\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\r\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    if(!(blob instanceof Blob)) {\r\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\r\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\r\n      return this.storagePutB64String(db, fileName, address).then(() => {\r\n        return blob;\r\n      });\r\n    }\r\n\r\n    try {\r\n      var reader = new FileReader();\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    let promise = new Promise<Blob>((resolve, reject) => {\r\n      reader.onloadend = () => {\r\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\r\n          resolve(blob);\r\n        }, reject);\r\n      }\r\n  \r\n      reader.onerror = reject;\r\n    });\r\n    \r\n\r\n    try {\r\n      reader.readAsDataURL(blob);\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\r\n    try {\r\n      var objectStore = db.transaction([this.storeName], 'readwrite')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.put(b64string, fileName);\r\n    } catch(error) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = function(event) {\r\n        resolve();\r\n      };\r\n  \r\n      request.onerror = reject;\r\n    });\r\n  }\r\n\r\n  public getBlobSize(blob: any) {\r\n    return blob.size || blob.byteLength || blob.length;\r\n  } */\r\n\r\n  public get<T>(entryName: string[]): Promise<T[]>;\r\n  public get<T>(entryName: string): Promise<T>;\r\n  public get<T>(entryName: string | string[]): Promise<T> | Promise<T[]> {\r\n    //return Promise.reject();\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore<T>('readonly', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.get(entryName));\r\n    }, DEBUG ? 'get: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  private getObjectStore<T>(mode: IDBTransactionMode, objectStore: (objectStore: IDBObjectStore) => IDBRequest | IDBRequest[], log?: string, storeName = this.storeName) {\r\n    let perf: number;\r\n\r\n    if(log) {\r\n      perf = performance.now();\r\n      this.log(log + ': start');\r\n    }\r\n\r\n    return this.openDatabase().then((db) => {\r\n      return new Promise<T>((resolve, reject) => {\r\n        const transaction = db.transaction([storeName], mode);\r\n\r\n        transaction.onerror = (e) => {\r\n          clearTimeout(timeout);\r\n          reject(transaction.error);\r\n        };\r\n  \r\n        transaction.oncomplete = (e) => {\r\n          clearTimeout(timeout);\r\n\r\n          if(log) {\r\n            this.log(log + ': end', performance.now() - perf);\r\n          }\r\n\r\n          const results = r.map(r => r.result);\r\n          resolve(isArray ? results : results[0]);\r\n        };\r\n  \r\n        const timeout = setTimeout(() => {\r\n          this.log.error('transaction not finished', transaction);\r\n        }, 10000);\r\n  \r\n        /* transaction.addEventListener('abort', (e) => {\r\n          //handleError();\r\n          this.log.error('IndexedDB: transaction abort!', transaction.error);\r\n        }); */\r\n  \r\n        const requests = objectStore(transaction.objectStore(storeName));\r\n\r\n        const isArray = Array.isArray(requests);\r\n        const r: IDBRequest[] = isArray ? requests : [].concat(requests) as any;\r\n\r\n        // const length = r.length;\r\n        // /* let left = length;\r\n\r\n        // const onRequestFinished = (error?: Error) => {\r\n        //   if(!--left) {\r\n        //     resolve(result);\r\n        //     clearTimeout(timeout);\r\n        //   }\r\n        // }; */\r\n\r\n        // for(let i = 0; i < length; ++i) {\r\n        //   const request = r[i];\r\n        //   request.onsuccess = () => {\r\n        //     onRequestFinished();\r\n        //   };\r\n\r\n        //   request.onerror = (e) => {\r\n        //     onRequestFinished(transaction.error);\r\n        //   };\r\n        // }\r\n      });\r\n    });\r\n  }\r\n\r\n  public getAll<T>(): Promise<T[]> {\r\n    return this.getObjectStore<T[]>('readonly', (objectStore) => objectStore.getAll(), DEBUG ? 'getAll' : '');\r\n  }\r\n\r\n  /* public getAllKeys(): Promise<Array<string>> {\r\n    console.time('getAllEntries');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.getAllKeys();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var result = event.target.result;\r\n          resolve(result);\r\n          console.timeEnd('getAllEntries');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public isFileExists(fileName: string): Promise<boolean> {\r\n    console.time('isFileExists');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.openCursor(fileName);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var cursor = event.target.result;\r\n          resolve(!!cursor);\r\n          console.timeEnd('isFileExists');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public getFileWriter(fileName: string, mimeType: string) {\r\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  } */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport function copy<T>(obj: T): T {\r\n  //in case of premitives\r\n  if(obj === null || typeof(obj) !== \"object\") {\r\n    return obj;\r\n  }\r\n \r\n  //date objects should be \r\n  if(obj instanceof Date) {\r\n    return new Date(obj.getTime()) as any;\r\n  }\r\n \r\n  //handle Array\r\n  if(Array.isArray(obj)) {\r\n    // @ts-ignore\r\n    const clonedArr: T = obj.map(el => copy(el)) as any as T;\r\n    return clonedArr;\r\n  }\r\n \r\n  //lastly, handle objects\r\n  // @ts-ignore\r\n  let clonedObj = new obj.constructor();\r\n  for(var prop in obj){\r\n    if(obj.hasOwnProperty(prop)) {\r\n      clonedObj[prop] = copy(obj[prop]);\r\n    }\r\n  }\r\n  return clonedObj;\r\n}\r\n\r\nexport function deepEqual(x: any, y: any): boolean {\r\n  const ok = Object.keys, tx = typeof x, ty = typeof y;\r\n  return x && y && tx === 'object' && tx === ty ? (\r\n    ok(x).length === ok(y).length &&\r\n      ok(x).every(key => deepEqual(x[key], y[key]))\r\n  ) : (x === y);\r\n}\r\n\r\nexport function defineNotNumerableProperties(obj: {[key: string]: any}, names: string[]) {\r\n  //const perf = performance.now();\r\n  const props = {writable: true, configurable: true};\r\n  const out: {[name: string]: typeof props} = {};\r\n  names.forEach(name => {\r\n    if(obj[name] === undefined) {\r\n      out[name] = props;\r\n    }\r\n  });\r\n  Object.defineProperties(obj, out);\r\n  //console.log('defineNotNumerableProperties time:', performance.now() - perf);\r\n}\r\n\r\nexport function getObjectKeysAndSort(object: any, sort: 'asc' | 'desc' = 'asc') {\r\n  if(!object) return [];\r\n  const ids = Object.keys(object).map(i => +i);\r\n  if(sort === 'asc') return ids.sort((a, b) => a - b);\r\n  else return ids.sort((a, b) => b - a);\r\n}\r\n\r\nexport function safeReplaceObject(wasObject: any, newObject: any) {\r\n  if(!wasObject) {\r\n    return newObject;\r\n  }\r\n\r\n  for(var key in wasObject) {\r\n    if(!newObject.hasOwnProperty(key)) {\r\n      delete wasObject[key];\r\n    }\r\n  }\r\n\r\n  for(var key in newObject) {\r\n    //if (newObject.hasOwnProperty(key)) { // useless\r\n      wasObject[key] = newObject[key];\r\n    //}\r\n  }\r\n  \r\n  return wasObject;\r\n}\r\n\r\n/**\r\n * Will be used for FILE_REFERENCE_EXPIRED\r\n * @param key \r\n * @param wasObject \r\n * @param newObject \r\n */\r\nexport function safeReplaceArrayInObject<K>(key: K, wasObject: any, newObject: any) {\r\n  if('byteLength' in newObject[key]) { // Uint8Array\r\n    newObject[key] = [...newObject[key]];\r\n  }\r\n\r\n  if(wasObject && wasObject[key] !== newObject[key]) {\r\n    wasObject[key].length = newObject[key].length;\r\n    (newObject[key] as any[]).forEach((v, i) => {\r\n      wasObject[key][i] = v;\r\n    });\r\n\r\n    /* wasObject[key].set(newObject[key]); */\r\n    newObject[key] = wasObject[key];\r\n  }\r\n}\r\n\r\nexport function isObject(object: any) {\r\n  return typeof(object) === 'object' && object !== null;\r\n}\r\n\r\nexport function getDeepProperty(object: any, key: string) {\r\n  const splitted = key.split('.');\r\n  let o: any = object;\r\n  splitted.forEach(key => {\r\n    if(!key) {\r\n      return;\r\n    }\r\n    \r\n    // @ts-ignore\r\n    o = o[key];\r\n  });\r\n  \r\n  return o;\r\n}\r\n\r\nexport function setDeepProperty(object: any, key: string, value: any) {\r\n  const splitted = key.split('.');\r\n  getDeepProperty(object, splitted.slice(0, -1).join('.'))[splitted.pop()] = value;\r\n}\r\n\r\nexport function validateInitObject(initObject: any, currentObject: any, onReplace?: (key: string) => void, previousKey?: string) {\r\n  for(const key in initObject) {\r\n    if(typeof(currentObject[key]) !== typeof(initObject[key])) {\r\n      currentObject[key] = copy(initObject[key]);\r\n      onReplace && onReplace(previousKey || key);\r\n    } else if(isObject(initObject[key])) {\r\n      validateInitObject(initObject[key], currentObject[key], onReplace, previousKey || key);\r\n    }\r\n  }\r\n}\r\n\r\nexport function safeAssign(object: any, fromObject: any) {\r\n  if(!fromObject) return;\r\n  \r\n  for(let i in fromObject) {\r\n    if(fromObject[i] !== undefined) {\r\n      object[i] = fromObject[i];\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport const readBlobAsText = (blob: Blob) => {\r\n  return new Promise<string>(resolve => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('loadend', (e) => {\r\n      // @ts-ignore\r\n      resolve(e.srcElement.result);\r\n    });\r\n    reader.readAsText(blob);\r\n  });\r\n};\r\n\r\nexport function blobConstruct(blobParts: any, mimeType: string = ''): Blob {\r\n  let blob;\r\n  const safeMimeType = blobSafeMimeType(mimeType);\r\n  try {\r\n    blob = new Blob(blobParts, {type: safeMimeType});\r\n  } catch(e) {\r\n    // @ts-ignore\r\n    let bb = new BlobBuilder;\r\n    blobParts.forEach((blobPart: any) => {\r\n      bb.append(blobPart);\r\n    });\r\n    blob = bb.getBlob(safeMimeType);\r\n  }\r\n  return blob;\r\n}\r\n\r\n// https://www.iana.org/assignments/media-types/media-types.xhtml\r\nexport function blobSafeMimeType(mimeType: string) {\r\n  if([\r\n    'image/jpeg',\r\n    'image/png',\r\n    'image/gif',\r\n    'image/webp',\r\n    'image/bmp',\r\n    'video/mp4',\r\n    'video/webm',\r\n    'video/quicktime',\r\n    'audio/ogg',\r\n    'audio/mpeg',\r\n    'audio/mp4',\r\n    'application/json',\r\n    'application/pdf'\r\n  ].indexOf(mimeType) === -1) {\r\n    return 'application/octet-stream';\r\n  }\r\n\r\n  return mimeType;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from \"../../config/databases\";\r\nimport DATABASE_STATE from \"../../config/databases/state\";\r\nimport { isFirefox } from \"../../helpers/userAgent\";\r\nimport IDBStorage from \"../idb\";\r\nimport { log, ServiceWorkerPingTask, ServiceWorkerPushClickTask } from \"./index.service\";\r\n\r\nconst ctx = self as any as ServiceWorkerGlobalScope;\r\nconst defaultBaseUrl = location.protocol + '//' + location.hostname + location.pathname.split('/').slice(0, -1).join('/') + '/';\r\n\r\nexport type PushNotificationObject = {\r\n  loc_key: string,\r\n  loc_args: string[],\r\n  //user_id: number, // should be number\r\n  custom: {\r\n    channel_id?: string, // should be number\r\n    chat_id?: string, // should be number\r\n    from_id?: string, // should be number\r\n    msg_id: string,\r\n    peerId?: string // should be number\r\n  },\r\n  sound?: string,\r\n  random_id: number,\r\n  badge?: string, // should be number\r\n  description: string,\r\n  mute: string, // should be number\r\n  title: string,\r\n\r\n  action?: 'mute1d' | 'push_settings', // will be set before postMessage to main thread\r\n};\r\n\r\nclass SomethingGetter<T extends Database<any>, Storage extends Record<string, any>> {\r\n  private cache: Partial<Storage> = {};\r\n  private storage: IDBStorage<T>;\r\n\r\n  constructor(\r\n    db: T, \r\n    storeName: typeof db['stores'][number]['name'], \r\n    private defaults: {\r\n      [Property in keyof Storage]: ((value: Storage[Property]) => Storage[Property]) | Storage[Property]\r\n    }\r\n  ) {\r\n    this.storage = new IDBStorage<T>(db, storeName);\r\n  }\r\n\r\n  public async get<T extends keyof Storage>(key: T) {\r\n    if(this.cache[key] !== undefined) {\r\n      return this.cache[key];\r\n    }\r\n\r\n    let value: Storage[T];\r\n    try {\r\n      value = await this.storage.get(key as string);\r\n    } catch(err) {\r\n\r\n    }\r\n\r\n    if(this.cache[key] !== undefined) {\r\n      return this.cache[key];\r\n    }\r\n\r\n    if(value === undefined) {\r\n      const callback = this.defaults[key];\r\n      value = typeof(callback) === 'function' ? callback() : callback;\r\n    }\r\n\r\n    return this.cache[key] = value;\r\n  }\r\n\r\n  public async set<T extends keyof Storage>(key: T, value: Storage[T]) {\r\n    this.cache[key] = value;\r\n\r\n    try {\r\n      this.storage.save(key as string, value);\r\n    } catch(err) {\r\n\r\n    }\r\n  }\r\n}\r\n\r\ntype PushStorage = {\r\n  push_mute_until: number,\r\n  push_last_alive: number,\r\n  push_lang: Partial<ServiceWorkerPingTask['payload']['lang']>\r\n  push_settings: Partial<ServiceWorkerPingTask['payload']['settings']>\r\n};\r\n\r\nconst getter = new SomethingGetter<typeof DATABASE_STATE, PushStorage>(DATABASE_STATE, 'session', {\r\n  push_mute_until: 0,\r\n  push_last_alive: 0,\r\n  push_lang: {},\r\n  push_settings: {}\r\n});\r\n\r\nctx.addEventListener('push', (event) => {\r\n  const obj: PushNotificationObject = event.data.json();\r\n  log('push', obj);\r\n\r\n  let hasActiveWindows = false;\r\n  const checksPromise = Promise.all([\r\n    getter.get('push_mute_until'), \r\n    getter.get('push_last_alive'), \r\n    ctx.clients.matchAll({type: 'window'})\r\n  ]).then((result) => {\r\n    const [muteUntil, lastAliveTime, clientList] = result;\r\n    \r\n    log('matched clients', clientList);\r\n    hasActiveWindows = clientList.length > 0;\r\n    if(hasActiveWindows) {\r\n      throw 'Supress notification because some instance is alive';\r\n    }\r\n    \r\n    const nowTime = Date.now();\r\n    if(userInvisibleIsSupported() &&\r\n        muteUntil &&\r\n        nowTime < muteUntil) {\r\n      throw `Supress notification because mute for ${Math.ceil((muteUntil - nowTime) / 60000)} min`;\r\n    }\r\n\r\n    if(!obj.badge) {\r\n      throw 'No badge?';\r\n    }\r\n  });\r\n\r\n  checksPromise.catch(reason => {\r\n    log(reason);\r\n  });\r\n\r\n  const notificationPromise = checksPromise.then(() => {\r\n    return Promise.all([getter.get('push_settings'), getter.get('push_lang')])\r\n  }).then((result) => {\r\n    return fireNotification(obj, result[0], result[1]);\r\n  });\r\n\r\n  const closePromise = notificationPromise.catch(() => {\r\n    log('Closing all notifications on push', hasActiveWindows);\r\n    if(userInvisibleIsSupported() || hasActiveWindows) {\r\n      return closeAllNotifications();\r\n    }\r\n\r\n    return ctx.registration.showNotification('Telegram', {\r\n      tag: 'unknown_peer'\r\n    }).then(() => {\r\n      if(hasActiveWindows) {\r\n        return closeAllNotifications();\r\n      }\r\n\r\n      setTimeout(() => closeAllNotifications(), hasActiveWindows ? 0 : 100);\r\n    }).catch((error) => {\r\n      log.error('Show notification error', error);\r\n    });\r\n  });\r\n\r\n  event.waitUntil(closePromise);\r\n});\r\n\r\nctx.addEventListener('notificationclick', (event) => {\r\n  const notification = event.notification;\r\n  log('On notification click: ', notification.tag);\r\n  notification.close();\r\n\r\n  const action = event.action as PushNotificationObject['action'];\r\n  if(action === 'mute1d' && userInvisibleIsSupported()) {\r\n    log('[SW] mute for 1d');\r\n    getter.set('push_mute_until', Date.now() + 86400e3);\r\n    return;\r\n  }\r\n\r\n  const data: PushNotificationObject = notification.data;\r\n  if(!data) {\r\n    return;\r\n  }\r\n\r\n  const promise = ctx.clients.matchAll({\r\n    type: 'window'\r\n  }).then((clientList) => {\r\n    data.action = action;\r\n    pendingNotification = {type: 'push_click', payload: data};\r\n    for(let i = 0; i < clientList.length; i++) {\r\n      const client = clientList[i];\r\n      if('focus' in client) {\r\n        client.focus();\r\n        client.postMessage(pendingNotification);\r\n        pendingNotification = undefined;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if(ctx.clients.openWindow) {\r\n      return getter.get('push_settings').then((settings) => {\r\n        return ctx.clients.openWindow(settings.baseUrl || defaultBaseUrl);\r\n      });\r\n    }\r\n  }).catch((error) => {\r\n    log.error('Clients.matchAll error', error);\r\n  })\r\n\r\n  event.waitUntil(promise);\r\n});\r\n\r\nctx.addEventListener('notificationclose', onCloseNotification);\r\n\r\nlet notifications: Set<Notification> = new Set();\r\nlet pendingNotification: ServiceWorkerPushClickTask;\r\nfunction pushToNotifications(notification: Notification) {\r\n  if(!notifications.has(notification)) {\r\n    notifications.add(notification);\r\n    // @ts-ignore\r\n    notification.onclose = onCloseNotification;\r\n  }\r\n}\r\n\r\nfunction onCloseNotification(event: NotificationEvent) {\r\n  removeFromNotifications(event.notification)\r\n}\r\n\r\nfunction removeFromNotifications(notification: Notification) {\r\n  notifications.delete(notification);\r\n}\r\n\r\nexport function closeAllNotifications() {\r\n  for(const notification of notifications) {\r\n    try {\r\n      notification.close();\r\n    } catch(e) {}\r\n  }\r\n\r\n  let promise: Promise<void>;\r\n  if('getNotifications' in ctx.registration) {\r\n    promise = ctx.registration.getNotifications({}).then((notifications) => {\r\n      for(let i = 0, len = notifications.length; i < len; ++i) {\r\n        try {\r\n          notifications[i].close();\r\n        } catch(e) {}\r\n      }\r\n    }).catch((error) => {\r\n      log.error('Offline register SW error', error);\r\n    });\r\n  } else {\r\n    promise = Promise.resolve();\r\n  }\r\n\r\n  notifications.clear();\r\n\r\n  return promise;\r\n}\r\n\r\nfunction userInvisibleIsSupported() {\r\n  return isFirefox;\r\n}\r\n\r\nfunction fireNotification(obj: PushNotificationObject, settings: PushStorage['push_settings'], lang: PushStorage['push_lang']) {\r\n  const icon = 'assets/img/logo_filled_rounded.png';\r\n  let title = obj.title || 'Telegram';\r\n  let body = obj.description || '';\r\n  let peerId: number;\r\n\r\n  if(obj.custom) {\r\n    if(obj.custom.channel_id) {\r\n      peerId = -obj.custom.channel_id;\r\n    } else if(obj.custom.chat_id) {\r\n      peerId = -obj.custom.chat_id;\r\n    } else {\r\n      peerId = +obj.custom.from_id || 0;\r\n    }\r\n  }\r\n\r\n  obj.custom.peerId = '' + peerId;\r\n  let tag = 'peer' + peerId;\r\n\r\n  if(settings && settings.nopreview) {\r\n    title = 'Telegram';\r\n    body = lang.push_message_nopreview || 'You have a new message';\r\n    tag = 'unknown_peer';\r\n  }\r\n\r\n  log('show notify', title, body, icon, obj);\r\n\r\n  const actions: (Omit<NotificationAction, 'action'> & {action: PushNotificationObject['action']})[] = [{\r\n    action: 'mute1d',\r\n    title: lang.push_action_mute1d || 'Mute for 24H'\r\n  }/* , {\r\n    action: 'push_settings',\r\n    title: lang.push_action_settings || 'Settings'\r\n  } */];\r\n\r\n  const notificationPromise = ctx.registration.showNotification(title, {\r\n    body,\r\n    icon,\r\n    tag,\r\n    data: obj,\r\n    actions\r\n  });\r\n\r\n  return notificationPromise.then((event) => {\r\n    // @ts-ignore\r\n    if(event && event.notification) {\r\n      // @ts-ignore\r\n      pushToNotifications(event.notification);\r\n    }\r\n  }).catch((error) => {\r\n    log.error('Show notification promise', error);\r\n  });\r\n}\r\n\r\nexport function onPing(task: ServiceWorkerPingTask, event: ExtendableMessageEvent) {\r\n  const client = event.ports && event.ports[0] || event.source;\r\n  const payload = task.payload;\r\n\r\n  if(payload.localNotifications) {\r\n    getter.set('push_last_alive', Date.now());\r\n  }\r\n\r\n  if(pendingNotification &&\r\n      client &&\r\n      'postMessage' in client) {\r\n    client.postMessage(pendingNotification, []);\r\n    pendingNotification = undefined;\r\n  }\r\n\r\n  if(payload.lang) {\r\n    getter.set('push_lang', payload.lang);\r\n  }\r\n\r\n  if(payload.settings) {\r\n    getter.set('push_settings', payload.settings);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n                  \r\n                                   \r\n          \r\n//import CacheStorageController from '../cacheStorage';\r\nimport type { WorkerTaskTemplate, WorkerTaskVoidTemplate } from '../../types';\r\nimport type { InputFileLocation, UploadFile } from '../../layer';\r\nimport type { WebPushApiManager } from '../mtproto/webPushApiManager';\r\nimport type { PushNotificationObject } from './push';\r\nimport { logger, LogTypes } from '../logger';\r\nimport { CancellablePromise } from '../../helpers/cancellablePromise';\r\nimport { CACHE_ASSETS_NAME, requestCache } from './cache';\r\nimport onStreamFetch from './stream';\r\nimport { closeAllNotifications, onPing } from './push';\r\n\r\nexport const log = logger('SW', LogTypes.Error | LogTypes.Debug | LogTypes.Log | LogTypes.Warn);\r\nconst ctx = self as any as ServiceWorkerGlobalScope;\r\nexport const deferredPromises: {[taskId: number]: CancellablePromise<any>} = {};\r\n\r\nexport interface RequestFilePartTask extends WorkerTaskTemplate {\r\n  type: 'requestFilePart',\r\n  payload: [number, InputFileLocation, number, number]\r\n};\r\n\r\nexport interface RequestFilePartTaskResponse extends WorkerTaskTemplate {\r\n  type: 'requestFilePart',\r\n  payload?: UploadFile.uploadFile,\r\n  originalPayload?: RequestFilePartTask['payload']\r\n};\r\n\r\nexport interface ServiceWorkerPingTask extends WorkerTaskVoidTemplate {\r\n  type: 'ping',\r\n  payload: {\r\n    localNotifications: boolean,\r\n    lang: {\r\n      push_action_mute1d: string\r\n      push_action_settings: string\r\n      push_message_nopreview: string\r\n    },\r\n    settings: WebPushApiManager['settings']\r\n  }\r\n};\r\n\r\nexport interface ServiceWorkerNotificationsClearTask extends WorkerTaskVoidTemplate {\r\n  type: 'notifications_clear'\r\n};\r\n\r\nexport interface ServiceWorkerPushClickTask extends WorkerTaskVoidTemplate {\r\n  type: 'push_click',\r\n  payload: PushNotificationObject\r\n};\r\n\r\nexport type ServiceWorkerTask = RequestFilePartTaskResponse | ServiceWorkerPingTask | ServiceWorkerNotificationsClearTask;\r\n\r\n                   \r\nconst taskListeners: {\r\n  [type in ServiceWorkerTask['type']]: (task: any, event: ExtendableMessageEvent) => void\r\n} = {\r\n  notifications_clear: () => {\r\n    closeAllNotifications();\r\n  },\r\n  ping: (task: ServiceWorkerPingTask, event) => {\r\n    onPing(task, event);\r\n  },\r\n  requestFilePart: (task: RequestFilePartTaskResponse) => {\r\n    const promise = deferredPromises[task.id];\r\n\r\n    if(task.error) {\r\n      promise.reject(task.error);\r\n    } else {\r\n      promise.resolve(task.payload);\r\n    }\r\n\r\n    delete deferredPromises[task.id];\r\n  }\r\n};\r\nctx.addEventListener('message', (e) => {\r\n  const task = e.data as ServiceWorkerTask;\r\n  const callback = taskListeners[task.type];\r\n  if(callback) {\r\n    callback(task, e);\r\n  }\r\n});\r\n          \r\n\r\n//const cacheStorage = new CacheStorageController('cachedAssets');\r\nlet taskId = 0;\r\n\r\nexport function getTaskId() {\r\n  return taskId;\r\n}\r\n\r\nexport function incrementTaskId() {\r\n  return taskId++;\r\n}\r\n\r\nconst onFetch = (event: FetchEvent): void => {\r\n  if(event.request.url.indexOf(location.origin + '/') === 0 && event.request.url.match(/\\.(js|css|jpe?g|json|wasm|png|mp3|svg|tgs|ico|woff2?|ttf|webmanifest?)(?:\\?.*)?$/)) {\r\n    return event.respondWith(requestCache(event));\r\n  }\r\n\r\n  try {\r\n    const [, url, scope, params] = /http[:s]+\\/\\/.*?(\\/(.*?)(?:$|\\/(.*)$))/.exec(event.request.url) || [];\r\n\r\n    //log.debug('[fetch]:', event);\r\n  \r\n    switch(scope) {\r\n      case 'stream': {\r\n        onStreamFetch(event, params);\r\n        break;\r\n      }\r\n    }\r\n  } catch(err) {\r\n    event.respondWith(new Response('', {\r\n      status: 500,\r\n      statusText: 'Internal Server Error',\r\n    }));\r\n  }\r\n};\r\n\r\nconst onChangeState = () => {\r\n  ctx.onfetch = onFetch;\r\n};\r\n\r\nctx.addEventListener('install', (event) => {\r\n  log('installing');\r\n  event.waitUntil(ctx.skipWaiting()); // Activate worker immediately\r\n});\r\n\r\nctx.addEventListener('activate', (event) => {\r\n  log('activating', ctx);\r\n  event.waitUntil(ctx.caches.delete(CACHE_ASSETS_NAME));\r\n  event.waitUntil(ctx.clients.claim());\r\n});\r\n\r\nctx.onerror = (error) => {\r\n  log.error('error:', error);\r\n};\r\n\r\nctx.onunhandledrejection = (error) => {\r\n  log.error('onunhandledrejection:', error);\r\n};\r\n\r\nctx.onoffline = ctx.ononline = onChangeState;\r\n\r\nonChangeState();\r\n"],"sourceRoot":""}