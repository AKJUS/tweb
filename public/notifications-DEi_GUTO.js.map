{"version":3,"file":"notifications-DEi_GUTO.js","sources":["../src/components/rangeSelectorTsx.tsx","../src/components/rangeSettingSelector.tsx","../src/components/sidebarLeft/tabs/notifications.tsx"],"sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport {createSignal, onMount, onCleanup, createEffect} from 'solid-js';\nimport attachGrabListeners, {GrabEvent} from '../helpers/dom/attachGrabListeners';\nimport clamp from '../helpers/number/clamp';\nimport I18n from '../lib/langPack';\n\nexport interface RangeSelectorProps {\n  step: number;\n  min?: number;\n  max?: number;\n  withTransition?: boolean;\n  useTransform?: boolean;\n  vertical?: boolean;\n  useProperty?: boolean;\n  offsetAxisValue?: number;\n  value?: number;\n  onMouseDown?: (event: GrabEvent) => void;\n  onMouseUp?: (event: GrabEvent) => void;\n  onScrub?: (value: number) => void;\n}\n\nexport default function RangeSelector(props: RangeSelectorProps) {\n  const [mousedown, setMousedown] = createSignal(false);\n  const [rect, setRect] = createSignal<DOMRect>();\n  const [value, setValue] = createSignal(props.value || 0);\n  let containerRef: HTMLDivElement;\n  let filledRef: HTMLDivElement;\n  let seekRef: HTMLInputElement;\n  let removeListeners: (() => void) | null = null;\n\n  const min = props.min ?? 0;\n  const max = props.max ?? 0;\n  const step = props.step;\n  const withTransition = props.withTransition || false;\n  const useTransform = props.useTransform || false;\n  const useProperty = props.useProperty || false;\n  const vertical = props.vertical || false;\n  const offsetAxisValue = props.offsetAxisValue || 0;\n\n  const stepStr = '' + step;\n  const index = stepStr.indexOf('.');\n  const decimals = index === -1 ? 0 : stepStr.length - index - 1;\n\n  const setFilled = (val: number) => {\n    let percents = (val - min) / (max - min);\n    percents = clamp(percents, 0, 1);\n\n    // using scaleX and width even with vertical because it will be rotated\n    if(useTransform) {\n      filledRef.style.transform = `scaleX(${percents})`;\n    } else if(useProperty) {\n      containerRef.style.setProperty('--progress', '' + percents);\n    } else {\n      filledRef.style.width = (percents * 100) + '%';\n    }\n  };\n\n  const setProgress = (val: number) => {\n    seekRef.value = '' + val;\n    setFilled(+seekRef.value); // clamp\n    setValue(+seekRef.value);\n  };\n\n  const onInput = () => {\n    const val = +seekRef.value;\n    setFilled(val);\n    setValue(val);\n    props.onScrub?.(val);\n  };\n\n  const onMouseMove = (event: GrabEvent) => {\n    scrub(event);\n  };\n\n  const onMouseDown = (event: GrabEvent) => {\n    setRect(containerRef.getBoundingClientRect());\n    setMousedown(true);\n    scrub(event);\n    containerRef.classList.add('is-focused');\n    props.onMouseDown?.(event);\n  };\n\n  const onMouseUp = (event: GrabEvent) => {\n    setMousedown(false);\n    containerRef.classList.remove('is-focused');\n    props.onMouseUp?.(event);\n  };\n\n  const scrub = (event: GrabEvent, snapValue?: (value: number) => number) => {\n    const currentRect = rect();\n    if(!currentRect) return 0;\n\n    let rectMax = vertical ? currentRect.height : currentRect.width;\n\n    if(offsetAxisValue) {\n      rectMax -= offsetAxisValue;\n    }\n\n    let offsetAxisValue_ = clamp(\n      vertical ?\n        -(event.y - currentRect.bottom) :\n        event.x - currentRect.left - offsetAxisValue / 2,\n      0,\n      rectMax\n    );\n\n    if(!vertical && I18n.isRTL) {\n      offsetAxisValue_ = rectMax - offsetAxisValue_;\n    }\n\n    let val = min + (offsetAxisValue_ / rectMax * (max - min));\n\n    if((val - min) < ((max - min) / 2)) {\n      val -= step / 10;\n    }\n\n    val = +val.toFixed(decimals);\n    val = clamp(val, min, max);\n    if(snapValue) val = snapValue(val);\n\n    setProgress(val);\n    props.onScrub?.(val);\n\n    return val;\n  };\n\n  onMount(() => {\n    // Set initial value\n    if(props.value) {\n      setProgress(props.value);\n    }\n\n    removeListeners = attachGrabListeners(containerRef, onMouseDown, onMouseMove, onMouseUp);\n  });\n\n  onCleanup(() => {\n    removeListeners?.();\n  });\n\n  // Update value when props change\n  createEffect(() => {\n    if(props.value !== undefined) {\n      setProgress(props.value);\n    }\n  });\n\n  return (\n    <div\n      ref={containerRef!}\n      class={`progress-line ${useTransform ? 'use-transform' : ''} ${withTransition ? 'with-transition' : ''}`}\n    >\n      <div ref={filledRef!} class=\"progress-line__filled\" />\n      <input\n        ref={seekRef!}\n        class=\"progress-line__seek\"\n        type=\"range\"\n        step={step}\n        min={min}\n        max={max}\n        value={value()}\n        onInput={onInput}\n      />\n    </div>\n  );\n}\n","import {createEffect, createSignal, JSX} from 'solid-js';\nimport RangeSelector from './rangeSelectorTsx';\n\nexport default function RangeSettingSelector(props: {\n  textLeft: JSX.Element,\n  textRight: (value: number) => JSX.Element,\n  step: number\n  value: number\n  minValue: number\n  maxValue: number\n  onChange?: (value: number) => void,\n  onMouseUp?: () => void\n}) {\n  const [value, setValue] = createSignal(props.value);\n\n  createEffect(() => {\n    setValue(props.value);\n  });\n\n  return (\n    <div class=\"range-setting-selector\">\n      <div class=\"range-setting-selector-details\">\n        <div class=\"range-setting-selector-name\">{props.textLeft}</div>\n        <div class=\"range-setting-selector-value\">{props.textRight(value())}</div>\n      </div>\n      <RangeSelector\n        step={props.step}\n        min={props.minValue}\n        max={props.maxValue}\n        value={props.value}\n        onScrub={(value) => {\n          props.onChange?.(value);\n          setValue(value);\n        }}\n        onMouseUp={props.onMouseUp}\n      />\n    </div>\n  );\n}\n","import {SETTINGS_INIT} from '../../../config/state';\nimport copy from '../../../helpers/object/copy';\nimport {subscribeOn} from '../../../helpers/solid/subscribeOn';\nimport convertKeyToInputKey from '../../../helpers/string/convertKeyToInputKey';\nimport {InputNotifyPeer, InputPeerNotifySettings, PeerNotifySettings, Update} from '../../../layer';\nimport {i18n, LangPackKey} from '../../../lib/langPack';\nimport {MUTE_UNTIL} from '../../../lib/mtproto/mtproto_config';\nimport rootScope from '../../../lib/rootScope';\nimport {useAppSettings} from '../../../stores/appSettings';\nimport CheckboxFieldTsx from '../../checkboxFieldTsx';\nimport RangeSettingSelector from '../../rangeSettingSelector';\nimport Row from '../../rowTsx';\nimport Section from '../../section';\nimport {createEffect, createMemo, createSignal, getOwner, onCleanup, runWithOwner} from 'solid-js';\nimport {toastNew} from '../../toast';\nimport Button from '../../buttonTsx';\nimport cancelEvent from '../../../helpers/dom/cancelEvent';\nimport {useHotReloadGuard} from '../../../lib/solidjs/hotReloadGuard';\n\ntype InputNotifyKey = Exclude<InputNotifyPeer['_'], 'inputNotifyPeer' | 'inputNotifyForumTopic'>;\n\nconst NotifySection = (props: {\n  name: LangPackKey,\n  typeText: LangPackKey,\n  inputKey: InputNotifyKey,\n}) => {\n  const [enabled, setEnabled] = createSignal(true);\n  const [showPreviews, setShowPreviews] = createSignal(true);\n  const [notifySettings, setNotifySettings] = createSignal<PeerNotifySettings>();\n  const inputNotifyPeer = {_: props.inputKey};\n\n  createEffect(async() => {\n    const _notifySettings = notifySettings();\n    if(!_notifySettings) {\n      return;\n    }\n\n    const muted = await rootScope.managers.appNotificationsManager.isMuted(_notifySettings);\n    setEnabled(!muted);\n    setShowPreviews(!!_notifySettings.show_previews);\n\n    return muted;\n  });\n\n  onCleanup(async() => {\n    const mute = !enabled();\n    const _showPreviews = showPreviews();\n    const _notifySettings = notifySettings();\n    const isMuted = await rootScope.managers.appNotificationsManager.isMuted(_notifySettings);\n    if(\n      mute === isMuted &&\n      _showPreviews === _notifySettings.show_previews\n    ) {\n      return;\n    }\n\n    const inputSettings: InputPeerNotifySettings = copy(_notifySettings) as any;\n    inputSettings._ = 'inputPeerNotifySettings';\n    inputSettings.mute_until = mute ? MUTE_UNTIL : 0;\n    inputSettings.show_previews = _showPreviews;\n    rootScope.managers.appNotificationsManager.updateNotifySettings(\n      inputNotifyPeer,\n      inputSettings\n    );\n  });\n\n  subscribeOn(rootScope)('notify_settings', (update: Update.updateNotifySettings) => {\n    const inputKey = convertKeyToInputKey(update.peer._) as any;\n    if(props.inputKey === inputKey) {\n      setNotifySettings(update.notify_settings);\n    }\n  });\n\n  const ret = rootScope.managers.appNotificationsManager.getNotifySettings(inputNotifyPeer);\n  (ret instanceof Promise ? ret : Promise.resolve(ret)).then((_notifySettings) => {\n    if(!notifySettings()) {\n      setNotifySettings(_notifySettings);\n    }\n  });\n\n  return (\n    <Section name={props.name}>\n      <Row>\n        <Row.Title>{i18n(props.typeText)}</Row.Title>\n        <Row.CheckboxFieldToggle>\n          <CheckboxFieldTsx checked={enabled()} onChange={setEnabled} toggle />\n        </Row.CheckboxFieldToggle>\n      </Row>\n      <Row>\n        <Row.Title>{i18n('MessagePreview')}</Row.Title>\n        <Row.CheckboxFieldToggle>\n          <CheckboxFieldTsx checked={showPreviews()} onChange={setShowPreviews} toggle />\n        </Row.CheckboxFieldToggle>\n      </Row>\n    </Section>\n  );\n};\n\nconst OtherSection = () => {\n  const [contactJoined, setContactJoined] = createSignal(true);\n  const owner = getOwner();\n  rootScope.managers.appNotificationsManager.getContactSignUpNotification().then((enabled) => {\n    setContactJoined(enabled);\n\n    runWithOwner(owner, () => onCleanup(() => {\n      const _enabled = contactJoined();\n      if(_enabled !== enabled) {\n        rootScope.managers.appNotificationsManager.setContactSignUpNotification(!_enabled);\n      }\n    }));\n  });\n\n  return (\n    <Section name=\"NotificationsOther\">\n      <Row>\n        <Row.Title>{i18n('ContactJoined')}</Row.Title>\n        <Row.CheckboxFieldToggle>\n          <CheckboxFieldTsx\n            checked={contactJoined()}\n            onChange={setContactJoined}\n            toggle\n          />\n        </Row.CheckboxFieldToggle>\n      </Row>\n    </Section>\n  );\n};\n\nconst NotificationsSection = () => {\n  const {uiNotificationsManager} = useHotReloadGuard();\n  const [appSettings, setAppSettings] = useAppSettings();\n  const [permission, setPermission] = createSignal<NotificationPermission>(Notification.permission);\n  const isGranted = createMemo(() => permission() === 'granted');\n\n  const onClick = (e: MouseEvent) => {\n    cancelEvent(e);\n    // const now = Date.now();\n    Notification.requestPermission().then((permission) => {\n      setPermission(permission);\n      if(permission === 'granted') {\n        uiNotificationsManager.onPushConditionsChange();\n      } else {\n        throw 1;\n      }\n    }, () => {\n      // if((Date.now() - now) < 100) {\n      toastNew({langPackKey: 'Notifications.Restricted'});\n      // }\n    });\n  };\n\n  const NotificationRow = (props: Parameters<typeof Row>[0]) => {\n    return (\n      <Row\n        {...props}\n        fakeDisabled={!isGranted()}\n        clickable={!isGranted() && onClick}\n      />\n    );\n  };\n\n  const NotificationCheckbox = (props: Parameters<typeof CheckboxFieldTsx>[0]) => {\n    return (\n      <CheckboxFieldTsx\n        {...props}\n        checked={isGranted() && props.checked}\n      />\n    );\n  };\n\n  return (\n    <Section\n      name=\"Notifications.Web\"\n      caption={isGranted() ? 'MultiAccount.ShowNotificationsFromCaption' : 'Notifications.Default'}\n    >\n      <NotificationRow>\n        <Row.Title>{i18n('Notifications.Show')}</Row.Title>\n        <Row.CheckboxFieldToggle>\n          <NotificationCheckbox\n            checked={appSettings.notifications.desktop}\n            onChange={(value) => setAppSettings('notifications', 'desktop', value)}\n            toggle\n          />\n        </Row.CheckboxFieldToggle>\n      </NotificationRow>\n      <NotificationRow>\n        <Row.Title>{i18n('Notifications.Offline')}</Row.Title>\n        <Row.CheckboxFieldToggle>\n          <NotificationCheckbox\n            checked={appSettings.notifications.push}\n            onChange={(value) => setAppSettings('notifications', 'push', value)}\n            toggle\n          />\n        </Row.CheckboxFieldToggle>\n      </NotificationRow>\n      <NotificationRow>\n        <Row.Title>{i18n('MultiAccount.AllAccounts')}</Row.Title>\n        <Row.CheckboxFieldToggle>\n          <NotificationCheckbox\n            checked={appSettings.notifyAllAccounts}\n            onChange={(value) => setAppSettings('notifyAllAccounts', value)}\n            toggle\n          />\n        </Row.CheckboxFieldToggle>\n      </NotificationRow>\n      {!isGranted() && (\n        <Button\n          text=\"Notifications.Enable\"\n          class=\"btn-primary primary btn-transparent\"\n          icon=\"unmute\"\n          disabled={isGranted()}\n          onClick={onClick}\n        />\n      )}\n    </Section>\n  );\n};\n\nconst SoundSection = () => {\n  const {uiNotificationsManager} = useHotReloadGuard();\n  const [appSettings, setAppSettings] = useAppSettings();\n\n  return (\n    <Section\n      name=\"Notifications.Sound.Section\"\n      caption=\"Notifications.Sound.Caption\"\n    >\n      <Row>\n        <Row.Title>{i18n('Notifications.Sound')}</Row.Title>\n        <Row.CheckboxFieldToggle>\n          <CheckboxFieldTsx\n            checked={appSettings.notifications.sound}\n            onChange={(value) => {\n              if(value && !appSettings.notifications.volume) {\n                setAppSettings('notifications', 'volume', SETTINGS_INIT.notifications.volume);\n              }\n\n              setAppSettings('notifications', 'sound', value);\n            }}\n            toggle\n          />\n        </Row.CheckboxFieldToggle>\n      </Row>\n      <RangeSettingSelector\n        textLeft={i18n('Notifications.Sound.Volume')}\n        textRight={(value) => '' + Math.floor(value * 100) + '%'}\n        step={0.01}\n        value={appSettings.notifications.volume}\n        minValue={0}\n        maxValue={1}\n        onChange={(value) => {\n          value = +value.toFixed(2);\n          if(!value) {\n            setAppSettings('notifications', 'sound', false);\n          }\n\n          setAppSettings('notifications', 'volume', value);\n        }}\n        onMouseUp={() => {\n          uiNotificationsManager.testSound(appSettings.notifications.volume);\n        }}\n      />\n    </Section>\n  );\n};\n\nconst SoundEffectsSection = () => {\n  const [appSettings, setAppSettings] = useAppSettings();\n\n  return (\n    <Section name=\"Notifications.Sound.Effects\">\n      <Row>\n        <Row.Title>{i18n('Notifications.Sound.Sent')}</Row.Title>\n        <Row.CheckboxFieldToggle>\n          <CheckboxFieldTsx\n            checked={appSettings.notifications.sentMessageSound}\n            onChange={(value) => setAppSettings('notifications', 'sentMessageSound', value)}\n            toggle\n          />\n        </Row.CheckboxFieldToggle>\n      </Row>\n    </Section>\n  );\n};\n\nconst Notifications = () => {\n  return (\n    <>\n      <NotificationsSection />\n      <SoundSection />\n      <SoundEffectsSection />\n      <NotifySection\n        name=\"NotificationsPrivateChats\"\n        typeText=\"NotificationsForPrivateChats\"\n        inputKey=\"inputNotifyUsers\"\n      />\n      <NotifySection\n        name=\"NotificationsGroups\"\n        typeText=\"NotificationsForGroups\"\n        inputKey=\"inputNotifyChats\"\n      />\n      <NotifySection\n        name=\"NotificationsChannels\"\n        typeText=\"NotificationsForChannels\"\n        inputKey=\"inputNotifyBroadcasts\"\n      />\n      <OtherSection />\n    </>\n  );\n}\n\nexport default Notifications;\n"],"names":["RangeSelector","props","mousedown","setMousedown","createSignal","rect","setRect","value","setValue","containerRef","filledRef","seekRef","removeListeners","min","max","step","withTransition","useTransform","useProperty","vertical","offsetAxisValue","stepStr","index","indexOf","decimals","length","setFilled","val","percents","clamp","style","transform","setProperty","width","setProgress","onInput","onScrub","onMouseMove","event","scrub","onMouseDown","getBoundingClientRect","classList","add","onMouseUp","remove","snapValue","currentRect","rectMax","height","offsetAxisValue_","y","bottom","x","left","I18n","isRTL","toFixed","onMount","attachGrabListeners","onCleanup","createEffect","undefined","_el$","_tmpl$","_el$2","firstChild","_el$3","nextSibling","_ref$","_$use","_$className","_ref$2","$$input","_ref$3","_$setAttribute","_$effect","_$delegateEvents","RangeSettingSelector","_el$4","_$insert","textLeft","textRight","_$createComponent","minValue","maxValue","onChange","NotifySection","enabled","setEnabled","showPreviews","setShowPreviews","notifySettings","setNotifySettings","inputNotifyPeer","_","inputKey","_notifySettings","muted","rootScope","managers","appNotificationsManager","isMuted","show_previews","mute","_showPreviews","inputSettings","copy","mute_until","MUTE_UNTIL","updateNotifySettings","subscribeOn","update","convertKeyToInputKey","peer","notify_settings","ret","getNotifySettings","Promise","resolve","then","Section","name","children","Row","Title","i18n","typeText","CheckboxFieldToggle","CheckboxFieldTsx","checked","toggle","OtherSection","contactJoined","setContactJoined","owner","getOwner","getContactSignUpNotification","runWithOwner","_enabled","setContactSignUpNotification","NotificationsSection","uiNotificationsManager","useHotReloadGuard","appSettings","setAppSettings","useAppSettings","permission","setPermission","Notification","isGranted","createMemo","onClick","e","cancelEvent","requestPermission","onPushConditionsChange","toastNew","langPackKey","NotificationRow","_$mergeProps","fakeDisabled","clickable","NotificationCheckbox","caption","notifications","desktop","push","notifyAllAccounts","_$memo","Button","text","icon","disabled","SoundSection","sound","volume","SETTINGS_INIT","Math","floor","testSound","SoundEffectsSection","sentMessageSound","Notifications"],"mappings":"k2BA0Be,SAASA,GAAcC,EAA2B,CAC/D,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAa,EAAK,EAC9C,CAACC,EAAMC,CAAO,EAAIF,EAAY,EAC9B,CAACG,EAAOC,CAAQ,EAAIJ,EAAaH,EAAMM,OAAS,CAAC,EACvD,IAAIE,EACAC,EACAC,EACAC,EAAuC,KAE3C,MAAMC,EAAMZ,EAAMY,KAAO,EACnBC,EAAMb,EAAMa,KAAO,EACnBC,EAAOd,EAAMc,KACbC,EAAiBf,EAAMe,gBAAkB,GACzCC,EAAehB,EAAMgB,cAAgB,GACrCC,EAAcjB,EAAMiB,aAAe,GACnCC,EAAWlB,EAAMkB,UAAY,GAC7BC,EAAkBnB,EAAMmB,iBAAmB,EAE3CC,EAAU,GAAKN,EACfO,EAAQD,EAAQE,QAAQ,GAAG,EAC3BC,EAAWF,IAAU,GAAK,EAAID,EAAQI,OAASH,EAAQ,EAEvDI,EAAaC,GAAgB,CACjC,IAAIC,GAAYD,EAAMd,IAAQC,EAAMD,GACpCe,EAAWC,EAAMD,EAAU,EAAG,CAAC,EAG5BX,EACDP,EAAUoB,MAAMC,UAAa,UAASH,CAAS,IACvCV,EACRT,EAAaqB,MAAME,YAAY,aAAc,GAAKJ,CAAQ,EAE1DlB,EAAUoB,MAAMG,MAASL,EAAW,IAAO,KAIzCM,EAAeP,GAAgB,CACnChB,EAAQJ,MAAQ,GAAKoB,EACrBD,EAAU,CAACf,EAAQJ,KAAK,EACxBC,EAAS,CAACG,EAAQJ,KAAK,GAGnB4B,EAAUA,IAAM,CACpB,MAAMR,EAAM,CAAChB,EAAQJ,MACrBmB,EAAUC,CAAG,EACbnB,EAASmB,CAAG,EACZ1B,EAAMmC,UAAUT,CAAG,GAGfU,EAAeC,GAAqB,CACxCC,EAAMD,CAAK,GAGPE,EAAeF,GAAqB,CACxChC,EAAQG,EAAagC,sBAAqB,CAAE,EAC5CtC,EAAa,EAAI,EACjBoC,EAAMD,CAAK,EACX7B,EAAaiC,UAAUC,IAAI,YAAY,EACvC1C,EAAMuC,cAAcF,CAAK,GAGrBM,EAAaN,GAAqB,CACtCnC,EAAa,EAAK,EAClBM,EAAaiC,UAAUG,OAAO,YAAY,EAC1C5C,EAAM2C,YAAYN,CAAK,GAGnBC,EAAQA,CAACD,EAAkBQ,IAA0C,CACzE,MAAMC,EAAc1C,IACpB,GAAG,CAAC0C,EAAa,MAAO,GAExB,IAAIC,EAAU7B,EAAW4B,EAAYE,OAASF,EAAYd,MAEvDb,IACD4B,GAAW5B,GAGb,IAAI8B,EAAmBrB,EACrBV,EACE,EAAEmB,EAAMa,EAAIJ,EAAYK,QACxBd,EAAMe,EAAIN,EAAYO,KAAOlC,EAAkB,EACjD,EACA4B,CACF,EAEG,CAAC7B,GAAYoC,GAAKC,QACnBN,EAAmBF,EAAUE,GAG/B,IAAIvB,EAAMd,EAAOqC,EAAmBF,GAAWlC,EAAMD,GAErD,OAAIc,EAAMd,GAASC,EAAMD,GAAO,IAC9Bc,GAAOZ,EAAO,IAGhBY,EAAM,CAACA,EAAI8B,QAAQjC,CAAQ,EAC3BG,EAAME,EAAMF,EAAKd,EAAKC,CAAG,EAGzBoB,EAAYP,CAAG,EACf1B,EAAMmC,UAAUT,CAAG,EAEZA,GAGT+B,OAAAA,GAAQ,IAAM,CAETzD,EAAMM,OACP2B,EAAYjC,EAAMM,KAAK,EAGzBK,EAAkB+C,GAAoBlD,EAAc+B,EAAaH,EAAaO,CAAS,CACzF,CAAC,EAEDgB,EAAU,IAAM,CACdhD,KACF,CAAC,EAGDiD,EAAa,IAAM,CACd5D,EAAMM,QAAUuD,QACjB5B,EAAYjC,EAAMM,KAAK,CAE3B,CAAC,GAED,IAAA,CAAA,MAAAwD,EAAAC,GAAA,EAAAC,EAAAF,EAAAG,WAAAC,EAAAF,EAAAG,YAAAC,EAES5D,EAAY,OAAA4D,GAAAC,WAAAA,EAAAD,EAAAN,CAAA,EAAZtD,EAAYsD,EAAAQ,GAAAR,EACT,iBAAgB9C,EAAe,gBAAkB,EAAG,IAAGD,EAAiB,kBAAoB,EAAG,EAAC,EAAA,MAAAwD,EAE9F9D,EAAS,OAAA8D,GAAAF,WAAAA,EAAAE,EAAAP,CAAA,EAATvD,EAASuD,EAAAE,EAAAM,QASRtC,EAAO,MAAAuC,EAPX/D,EAAO,cAAA+D,GAAAJ,WAAAA,EAAAI,EAAAP,CAAA,EAAPxD,EAAOwD,EAAAQ,EAAAR,EAAA,OAGNpD,CAAI,EAAA4D,EAAAR,EAAA,MACLtD,CAAG,EAAA8D,EAAAR,EAAA,MACHrD,CAAG,EAAA8D,OAAAT,EAAA5D,MACDA,EAAO,CAAA,EAAAwD,CAAA,IAKtB,CAACc,GAAA,CAAA,OAAA,CAAA,kLCtKc,SAASC,GAAqB7E,EAS1C,CACD,KAAM,CAACM,EAAOC,CAAQ,EAAIJ,EAAaH,EAAMM,KAAK,EAElDsD,OAAAA,EAAa,IAAM,CACjBrD,EAASP,EAAMM,KAAK,CACtB,CAAC,GAED,IAAA,CAAA,MAAAwD,EAAAC,GAAA,EAAAC,EAAAF,EAAAG,WAAAC,EAAAF,EAAAC,WAAAa,EAAAZ,EAAAC,YAAAY,OAAAA,EAAAb,EAGgDlE,IAAAA,EAAMgF,QAAQ,EAAAD,EAAAD,EAAA,IACb9E,EAAMiF,UAAU3E,EAAO,CAAA,CAAC,EAAAyE,EAAAjB,EAAAoB,EAEpEnF,GAAa,CAAA,IACZe,MAAI,CAAA,OAAEd,EAAMc,IAAI,EAAA,IAChBF,KAAG,CAAA,OAAEZ,EAAMmF,QAAQ,EAAA,IACnBtE,KAAG,CAAA,OAAEb,EAAMoF,QAAQ,EAAA,IACnB9E,OAAK,CAAA,OAAEN,EAAMM,KAAK,EAClB6B,QAAU7B,GAAU,CAClBN,EAAMqF,WAAW/E,CAAK,EACtBC,EAASD,CAAK,CACf,EAAA,IACDqC,WAAS,CAAA,OAAE3C,EAAM2C,SAAS,CAAA,CAAA,EAAA,IAAA,EAAAmB,CAAA,IAIlC,CCjBA,MAAMwB,EAAiBtF,GAIjB,CACJ,KAAM,CAACuF,EAASC,CAAU,EAAIrF,EAAa,EAAI,EACzC,CAACsF,EAAcC,CAAe,EAAIvF,EAAa,EAAI,EACnD,CAACwF,EAAgBC,CAAiB,EAAIzF,EAAY,EAClD0F,EAAkB,CAACC,EAAG9F,EAAM+F,UAElCnC,EAAa,SAAW,CACtB,MAAMoC,EAAkBL,IACxB,GAAG,CAACK,EACF,OAGF,MAAMC,EAAQ,MAAMC,EAAUC,SAASC,wBAAwBC,QAAQL,CAAe,EACtFR,OAAAA,EAAW,CAACS,CAAK,EACjBP,EAAgB,CAAC,CAACM,EAAgBM,aAAa,EAExCL,CACT,CAAC,EAEDtC,EAAU,SAAW,CACnB,MAAM4C,EAAO,CAAChB,IACRiB,EAAgBf,IAChBO,EAAkBL,IAClBU,EAAU,MAAMH,EAAUC,SAASC,wBAAwBC,QAAQL,CAAe,EACxF,GACEO,IAASF,GACTG,IAAkBR,EAAgBM,cAElC,OAGF,MAAMG,EAAyCC,GAAKV,CAAe,EACnES,EAAcX,EAAI,0BAClBW,EAAcE,WAAaJ,EAAOK,GAAa,EAC/CH,EAAcH,cAAgBE,EAC9BN,EAAUC,SAASC,wBAAwBS,qBACzChB,EACAY,CACF,CACF,CAAC,EAEDK,GAAYZ,CAAS,EAAE,kBAAoBa,GAAwC,CACjF,MAAMhB,EAAWiB,GAAqBD,EAAOE,KAAKnB,CAAC,EAChD9F,EAAM+F,WAAaA,GACpBH,EAAkBmB,EAAOG,eAAe,CAE5C,CAAC,EAED,MAAMC,EAAMjB,EAAUC,SAASC,wBAAwBgB,kBAAkBvB,CAAe,EACxF,OAACsB,aAAeE,QAAUF,EAAME,QAAQC,QAAQH,CAAG,GAAGI,KAAMvB,GAAoB,CAC1EL,EAAc,GAChBC,EAAkBI,CAAe,CAErC,CAAC,EAEDd,EACGsC,EAAO,CAAA,IAACC,MAAI,CAAA,OAAEzH,EAAMyH,IAAI,EAAA,IAAAC,UAAA,CAAA,MAAAxC,CAAAA,EACtByC,EAAG,CAAA,IAAAD,UAAA,CAAA,MAAA,CAAAxC,EACDyC,EAAIC,MAAK,CAAA,IAAAF,UAAA,CAAA,OAAEG,EAAK7H,EAAM8H,QAAQ,CAAC,CAAA,CAAA,EAAA5C,EAC/ByC,EAAII,oBAAmB,CAAA,IAAAL,UAAA,CAAA,OAAAxC,EACrB8C,EAAgB,CAAA,IAACC,SAAO,CAAA,OAAE1C,EAAO,CAAE,EAAEF,SAAUG,EAAY0C,OAAM,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAhD,EAAAA,EAGrEyC,EAAG,CAAA,IAAAD,UAAA,CAAA,MAAA,CAAAxC,EACDyC,EAAIC,MAAK,CAAA,IAAAF,UAAA,CAAA,OAAEG,EAAK,gBAAgB,CAAC,CAAA,CAAA,EAAA3C,EACjCyC,EAAII,oBAAmB,CAAA,IAAAL,UAAA,CAAA,OAAAxC,EACrB8C,EAAgB,CAAA,IAACC,SAAO,CAAA,OAAExC,EAAY,CAAE,EAAEJ,SAAUK,EAAiBwC,OAAM,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAKtF,EAEMC,GAAeA,IAAM,CACzB,KAAM,CAACC,EAAeC,CAAgB,EAAIlI,EAAa,EAAI,EACrDmI,EAAQC,KACdrC,OAAAA,EAAUC,SAASC,wBAAwBoC,6BAA4B,EAAGjB,KAAMhC,GAAY,CAC1F8C,EAAiB9C,CAAO,EAExBkD,GAAaH,EAAO,IAAM3E,EAAU,IAAM,CACxC,MAAM+E,EAAWN,IACdM,IAAanD,GACdW,EAAUC,SAASC,wBAAwBuC,6BAA6B,CAACD,CAAQ,CAEpF,CAAA,CAAC,CACJ,CAAC,EAEDxD,EACGsC,EAAO,CAACC,KAAI,qBAAA,IAAAC,UAAA,CAAA,OAAAxC,EACVyC,EAAG,CAAA,IAAAD,UAAA,CAAA,MAAA,CAAAxC,EACDyC,EAAIC,MAAK,CAAA,IAAAF,UAAA,CAAA,OAAEG,EAAK,eAAe,CAAC,CAAA,CAAA,EAAA3C,EAChCyC,EAAII,oBAAmB,CAAA,IAAAL,UAAA,CAAA,OAAAxC,EACrB8C,EAAgB,CAAA,IACfC,SAAO,CAAA,OAAEG,EAAa,CAAE,EACxB/C,SAAUgD,EACVH,OAAM,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAMlB,EAEMU,GAAuBA,IAAM,CACjC,KAAM,CAACC,uBAAAA,CAAuB,EAAGC,EAAiB,EAC5C,CAACC,EAAaC,CAAc,EAAIC,EAAc,EAC9C,CAACC,EAAYC,CAAa,EAAIhJ,EAAqCiJ,aAAaF,UAAU,EAC1FG,EAAYC,GAAW,IAAMJ,EAAY,IAAK,SAAS,EAEvDK,EAAWC,GAAkB,CACjCC,GAAYD,CAAC,EAEbJ,aAAaM,kBAAiB,EAAGnC,KAAM2B,GAAe,CAEpD,GADAC,EAAcD,CAAU,EACrBA,IAAe,UAChBL,EAAuBc,uBAAsB,MAE7C,MAAM,EAEV,EAAG,IAAM,CAEPC,GAAS,CAACC,YAAa,0BAA0B,CAAC,CAEpD,CAAC,GAGGC,EAAmB9J,GACvBkF,EACGyC,EAAGoC,EACE/J,EAAK,CAAA,IACTgK,cAAY,CAAA,MAAE,CAACX,EAAS,CAAE,EAAA,IAC1BY,WAAS,CAAA,MAAE,CAACZ,EAAW,GAAIE,CAAO,CAAA,CAAA,CAAA,EAKlCW,EAAwBlK,GAC5BkF,EACG8C,EAAgB+B,EACX/J,EAAK,CAAA,IACTiI,SAAO,CAAA,OAAEoB,EAAS,GAAMrJ,EAAMiI,OAAO,CAAA,CAAA,CAAA,EAK3C,OAAA/C,EACGsC,EAAO,CACNC,KAAI,oBAAA,IACJ0C,SAAO,CAAA,OAAEd,EAAS,EAAK,4CAA8C,uBAAuB,EAAA,IAAA3B,UAAA,CAAA,MAAAxC,CAAAA,EAE3F4E,EAAe,CAAA,IAAApC,UAAA,CAAA,MAAA,CAAAxC,EACbyC,EAAIC,MAAK,CAAA,IAAAF,UAAA,CAAA,OAAEG,EAAK,oBAAoB,CAAC,CAAA,CAAA,EAAA3C,EACrCyC,EAAII,oBAAmB,CAAA,IAAAL,UAAA,CAAA,OAAAxC,EACrBgF,EAAoB,CAAA,IACnBjC,SAAO,CAAA,OAAEc,EAAYqB,cAAcC,OAAO,EAC1ChF,SAAW/E,GAAU0I,EAAe,gBAAiB,UAAW1I,CAAK,EACrE4H,OAAM,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAhD,EAAAA,EAIX4E,EAAe,CAAA,IAAApC,UAAA,CAAA,MAAA,CAAAxC,EACbyC,EAAIC,MAAK,CAAA,IAAAF,UAAA,CAAA,OAAEG,EAAK,uBAAuB,CAAC,CAAA,CAAA,EAAA3C,EACxCyC,EAAII,oBAAmB,CAAA,IAAAL,UAAA,CAAA,OAAAxC,EACrBgF,EAAoB,CAAA,IACnBjC,SAAO,CAAA,OAAEc,EAAYqB,cAAcE,IAAI,EACvCjF,SAAW/E,GAAU0I,EAAe,gBAAiB,OAAQ1I,CAAK,EAClE4H,OAAM,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAhD,EAAAA,EAIX4E,EAAe,CAAA,IAAApC,UAAA,CAAA,MAAA,CAAAxC,EACbyC,EAAIC,MAAK,CAAA,IAAAF,UAAA,CAAA,OAAEG,EAAK,0BAA0B,CAAC,CAAA,CAAA,EAAA3C,EAC3CyC,EAAII,oBAAmB,CAAA,IAAAL,UAAA,CAAA,OAAAxC,EACrBgF,EAAoB,CAAA,IACnBjC,SAAO,CAAA,OAAEc,EAAYwB,iBAAiB,EACtClF,SAAW/E,GAAU0I,EAAe,oBAAqB1I,CAAK,EAC9D4H,OAAM,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAsC,EAAAA,EAIXA,IAAAA,EAACnB,IAAAA,CAAAA,GAAW,EAAA,GAAAnE,EACVuF,GAAM,CACLC,KAAI,uBAAA,MAAA,sCAEJC,KAAI,SAAA,IACJC,UAAQ,CAAA,OAAEvB,EAAS,CAAE,EACrBE,QAASA,CAEZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGP,EAEMsB,GAAeA,IAAM,CACzB,KAAM,CAAChC,uBAAAA,CAAuB,EAAGC,EAAiB,EAC5C,CAACC,EAAaC,CAAc,EAAIC,EAAc,EAEpD,OAAA/D,EACGsC,EAAO,CACNC,KAAI,8BACJ0C,QAAO,8BAAA,IAAAzC,UAAA,CAAA,MAAAxC,CAAAA,EAENyC,EAAG,CAAA,IAAAD,UAAA,CAAA,MAAA,CAAAxC,EACDyC,EAAIC,MAAK,CAAA,IAAAF,UAAA,CAAA,OAAEG,EAAK,qBAAqB,CAAC,CAAA,CAAA,EAAA3C,EACtCyC,EAAII,oBAAmB,CAAA,IAAAL,UAAA,CAAA,OAAAxC,EACrB8C,EAAgB,CAAA,IACfC,SAAO,CAAA,OAAEc,EAAYqB,cAAcU,KAAK,EACxCzF,SAAW/E,GAAU,CAChBA,GAAS,CAACyI,EAAYqB,cAAcW,QACrC/B,EAAe,gBAAiB,SAAUgC,GAAcZ,cAAcW,MAAM,EAG9E/B,EAAe,gBAAiB,QAAS1I,CAAK,CAC/C,EACD4H,OAAM,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAhD,EAAAA,EAIXL,GAAoB,CAAA,IACnBG,UAAQ,CAAA,OAAE6C,EAAK,4BAA4B,CAAC,EAC5C5C,UAAY3E,GAAU,GAAK2K,KAAKC,MAAM5K,EAAQ,GAAG,EAAI,IACrDQ,KAAM,IAAI,IACVR,OAAK,CAAA,OAAEyI,EAAYqB,cAAcW,MAAM,EACvC5F,SAAU,EACVC,SAAU,EACVC,SAAW/E,GAAU,CACnBA,EAAQ,CAACA,EAAMkD,QAAQ,CAAC,EACpBlD,GACF0I,EAAe,gBAAiB,QAAS,EAAK,EAGhDA,EAAe,gBAAiB,SAAU1I,CAAK,CAChD,EACDqC,UAAWA,IAAM,CACfkG,EAAuBsC,UAAUpC,EAAYqB,cAAcW,MAAM,CACnE,CAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAIT,EAEMK,GAAsBA,IAAM,CAChC,KAAM,CAACrC,EAAaC,CAAc,EAAIC,EAAc,EAEpD,OAAA/D,EACGsC,EAAO,CAACC,KAAI,8BAAA,IAAAC,UAAA,CAAA,OAAAxC,EACVyC,EAAG,CAAA,IAAAD,UAAA,CAAA,MAAA,CAAAxC,EACDyC,EAAIC,MAAK,CAAA,IAAAF,UAAA,CAAA,OAAEG,EAAK,0BAA0B,CAAC,CAAA,CAAA,EAAA3C,EAC3CyC,EAAII,oBAAmB,CAAA,IAAAL,UAAA,CAAA,OAAAxC,EACrB8C,EAAgB,CAAA,IACfC,SAAO,CAAA,OAAEc,EAAYqB,cAAciB,gBAAgB,EACnDhG,SAAW/E,GAAU0I,EAAe,gBAAiB,mBAAoB1I,CAAK,EAC9E4H,OAAM,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAMlB,EAEMoD,GAAgBA,IACpB,CAAApG,EAEK0D,GAAoB,CAAA,CAAA,EAAA1D,EACpB2F,GAAY3F,EAAAA,EAAAA,EACZkG,GAAmBlG,CAAAA,CAAAA,EAAAA,EACnBI,EAAa,CACZmC,KAAI,4BACJK,SAAQ,+BACR/B,SAAQ,mBAAAb,EAAAA,EAETI,EAAa,CACZmC,KAAI,sBACJK,SAAQ,yBACR/B,SAAQ,mBAAAb,EAAAA,EAETI,EAAa,CACZmC,KAAI,wBACJK,SAAQ,2BACR/B,SAAQ,uBAAAb,CAAAA,EAAAA,EAETiD,GAAY,CAAA,CAAA,CAAA"}