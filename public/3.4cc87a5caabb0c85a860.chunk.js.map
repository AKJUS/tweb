{"version":3,"sources":["webpack:///./src/lib/mtproto/mtproto_config.ts","webpack:///./src/helpers/dom/htmlToSpan.ts","webpack:///./src/helpers/cleanSearchText.ts","webpack:///./src/helpers/cleanUsername.ts","webpack:///./src/lib/appManagers/appUsersManager.ts","webpack:///./src/lib/appManagers/appPeersManager.ts","webpack:///./src/lib/appManagers/appChatsManager.ts","webpack:///./src/lib/appManagers/apiUpdatesManager.ts","webpack:///./src/lib/searchIndex.ts"],"names":["REPLIES_PEER_ID","htmlToSpan","html","span","document","createElement","innerHTML","badCharsRe","trimRe","cleanSearchText","text","latinize","hasTag","charAt","replace","ch","latinizeCh","LatinizeMap","undefined","toLowerCase","cleanUsername","username","appUsersManager","storage","appStateManager","storages","users","updateUsersStatuses","timestampNow","i","this","user","status","_","expires","was_online","rootScope","dispatchEvent","id","setUserToStateIfNeeded","clear","setInterval","addEventListener","addMultipleEventsListeners","updateUserStatus","update","userId","user_id","serverTimeManager","serverTimeOffset","updateUserPhoto","forceUserOnline","photo","console","warn","updateUserName","saveApiUser","Object","assign","first_name","last_name","e","getSelf","contactsIndex","indexObject","getUserSearchText","getState","then","state","storagesResults","length","contactsList","Array","isArray","forEach","pushContact","contactsFillPromise","Promise","resolve","peerId","getFromCache","set","getUser","delete","init","usernames","_userId","isPeerNeeded","findAndSplice","Set","updatedContactsList","pushToState","promise","invokeApi","result","saveApiUsers","contacts","contact","onContactsModified","slice","resolvedPeer","appChatsManager","saveApiChats","chats","appPeersManager","getPeer","getPeerId","peer","add","requestPeer","phone","pFlags","self","format","filter","Boolean","join","query","includeSaved","fillContacts","_contactsList","results","search","has","sort","userId1","userId2","sortName1","sortName","sortName2","localeCompare","testSelfSearch","p","myId","unshift","block","getInputPeerById","value","apiUpdatesManager","processLocalUpdate","peer_id","getOutputPeer","blocked","index","apiUsers","override","oldUser","min","fullName","searchUsername","deleted","initials","getAbbreviation","changedPhoto","changedTitle","photo_id","formatted","access_hash","key","args","isBot","support","date","now","Date","d","getDate","getMonth","getHours","getMinutes","bot","isRegularUser","isContact","allowMin","eventTimestamp","timestamp","updatesState","syncLoading","getTopPeersPromise","topPeers","correspondents","offset","limit","hash","peerIds","categories","peers","map","topPeer","contactsBlocked","count","u","concat","c","q","my_results","offline","showPhone","getUserInput","add_phone_privacy_exception","updates","processUpdateMessage","onContactUpdated","userIds","DialogColorsFg","DialogColors","DialogColorsMap","updatePeerBlocked","hasRights","getUserPhoto","getChatPhoto","chat","getChat","migrated_to","deactivated","plainText","onlyFirstName","title","trim","split","wrapEmojiText","chatId","isChannel","channel_id","chat_id","getUserString","getChatString","isUser","peerParams","substr","isMegagroup","isBroadcast","ignorePeerId","getChannelInputPeer","getChatInputPeer","pic","getDialogType","onChatUpdated","updateChannelParticipant","clearCache","params","channel","updateChatDefaultBannedRights","default_banned_rights","_chatId","apiChats","saveApiChat","oldChat","participants_count","rights","defaultRights","action","isThread","kicked","left","megagroup","creator","admin_rights","banned_rights","myFlags","post_messages","delete_messages","broadcast","until_date","bind","good","about","channelId","input","getChannelInput","usersInputs","fwdLimit","fwd_limit","deleteChatUser","leaveChannel","leaveChat","deleteChannel","deleteChat","find","bool","inputFile","inputChatPhoto","file","participant","getParticipantPeerId","actor_id","qts","prev_participant","new_participant","keys","kicked_by","editBanned","view_messages","pendingPtsUpdates","pendingSeqUpdates","syncPending","channelStates","attached","log","Error","Warn","Log","debug","updateMessage","options","processOpts","seq","seqStart","seq_start","forceGetDifference","processUpdate","isOut","out","fromId","from_id","toId","message","fwd_from","reply_to","entities","pts","pts_count","Proxy","target","saveUpdatesState","us","nextSeq","pendingUpdatesData","saveUpdate","popPendingSeqUpdate","seqAwaiting","ptsAwaiting","clearTimeout","timeout","curState","getChannelState","a","b","curPts","goodPts","goodIndex","splice","getDifference","first","wasSyncing","pts_total_limit","differenceResult","other_updates","new_messages","apiMessage","nextState","intermediate_state","justAName","channelState","getChannelDifference","addChannelState","lastPtsUpdateTime","toPeerId","fwdHeader","reason","hasUser","post","hasChat","popPts","popSeq","push","window","setTimeout","popPendingPtsUpdate","_state","noErrorBox","stateResult","setUpdatesProcessor","setProxy","SearchIndex","cleanText","minChars","fullTexts","Map","searchText","newFoundObjs","queryWords","queryWordsLength","fullText","what","found","foundChars","word","idx","indexOf","fullTextLength","o"],"mappings":"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","file":"3.4cc87a5caabb0c85a860.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n/**\r\n * Legacy Webogram's format, don't change dcID to camelCase. date is timestamp\r\n */\r\nexport type UserAuth = {dcID: number | string, date: number, id: number};\r\n\r\nexport const REPLIES_PEER_ID = 1271266957;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function htmlToSpan(html: string) {\r\n  const span = document.createElement('span');\r\n  span.innerHTML = html;\r\n  return span;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport Config from \"../lib/config\";\r\n\r\nconst badCharsRe = /[`~!@#$%^&*()\\-_=+\\[\\]\\\\|{}'\";:\\/?.>,<]+/g;\r\nconst trimRe = /^\\s+|\\s$/g;\r\n\r\nexport default function cleanSearchText(text: string, latinize = true) {\r\n  const hasTag = text.charAt(0) === '%';\r\n  text = text.replace(badCharsRe, '').replace(trimRe, '');\r\n  if(latinize) {\r\n    text = text.replace(/[^A-Za-z0-9]/g, (ch) => {\r\n      const latinizeCh = Config.LatinizeMap[ch];\r\n      return latinizeCh !== undefined ? latinizeCh : ch;\r\n    });\r\n  }\r\n  \r\n  text = text.toLowerCase();\r\n  if(hasTag) {\r\n    text = '%' + text;\r\n  }\r\n\r\n  return text;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport default function cleanUsername(username: string) {\r\n  return username && username.toLowerCase() || '';\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { formatPhoneNumber } from \"../../components/misc\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport cleanSearchText from \"../../helpers/cleanSearchText\";\r\nimport cleanUsername from \"../../helpers/cleanUsername\";\r\nimport { tsNow } from \"../../helpers/date\";\r\nimport { safeReplaceObject, isObject } from \"../../helpers/object\";\r\nimport { InputUser, Update, User as MTUser, UserProfilePhoto, UserStatus } from \"../../layer\";\r\nimport I18n, { i18n, LangPackKey } from \"../langPack\";\r\n//import apiManager from '../mtproto/apiManager';\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport { REPLIES_PEER_ID } from \"../mtproto/mtproto_config\";\r\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport SearchIndex from \"../searchIndex\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from \"./appStateManager\";\r\n\r\n// TODO: updateUserBlocked\r\n\r\nexport type User = MTUser.user;\r\n\r\nexport class AppUsersManager {\r\n  private storage = appStateManager.storages.users;\r\n  \r\n  private users: {[userId: number]: User};\r\n  private usernames: {[username: string]: number};\r\n  private contactsIndex: SearchIndex<number>;\r\n  private contactsFillPromise: Promise<Set<number>>;\r\n  private contactsList: Set<number>;\r\n  private updatedContactsList: boolean;\r\n  \r\n  private getTopPeersPromise: Promise<number[]>;\r\n\r\n  constructor() {\r\n    this.clear(true);\r\n\r\n    setInterval(this.updateUsersStatuses, 60000);\r\n\r\n    rootScope.addEventListener('state_synchronized', this.updateUsersStatuses);\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      updateUserStatus: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          user.status = update.status;\r\n          if(user.status) {\r\n            if('expires' in user.status) {\r\n              user.status.expires -= serverTimeManager.serverTimeOffset;\r\n            }\r\n\r\n            if('was_online' in user.status) {\r\n              user.status.was_online -= serverTimeManager.serverTimeOffset;\r\n            }\r\n          }\r\n\r\n          //user.sortStatus = this.getUserStatusForSort(user.status);\r\n          rootScope.dispatchEvent('user_update', userId);\r\n          this.setUserToStateIfNeeded(user);\r\n        } //////else console.warn('No user by id:', userId);\r\n      },\r\n\r\n      updateUserPhoto: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          this.forceUserOnline(userId);\r\n\r\n          if(update.photo._ === 'userProfilePhotoEmpty') {\r\n            delete user.photo;\r\n          } else {\r\n            user.photo = safeReplaceObject(user.photo, update.photo);\r\n          }\r\n\r\n          this.setUserToStateIfNeeded(user);\r\n\r\n          rootScope.dispatchEvent('user_update', userId);\r\n          rootScope.dispatchEvent('avatar_update', userId);\r\n        } else console.warn('No user by id:', userId);\r\n      },\r\n\r\n      updateUserName: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          this.forceUserOnline(userId);\r\n          \r\n          this.saveApiUser(Object.assign({}, user, {\r\n            first_name: update.first_name,\r\n            last_name: update.last_name,\r\n            username: update.username\r\n          }), true);\r\n        }\r\n      }\r\n    });\r\n\r\n    /* case 'updateContactLink':\r\n    this.onContactUpdated(update.user_id, update.my_link._ === 'contactLinkContact');\r\n    break; */\r\n\r\n    rootScope.addEventListener('language_change', (e) => {\r\n      const userId = this.getSelf().id;\r\n      this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\r\n    });\r\n\r\n    appStateManager.getState().then((state) => {\r\n      const users = appStateManager.storagesResults.users;\r\n      if(users.length) {\r\n        for(let i = 0, length = users.length; i < length; ++i) {\r\n          const user = users[i];\r\n          if(user) {\r\n            this.users[user.id] = user;\r\n          }\r\n        }\r\n      }\r\n\r\n      const contactsList = state.contactsList;\r\n      if(contactsList && Array.isArray(contactsList)) {\r\n        contactsList.forEach(userId => {\r\n          this.pushContact(userId);\r\n        });\r\n\r\n        if(contactsList.length) {\r\n          this.contactsFillPromise = Promise.resolve(this.contactsList);\r\n        }\r\n      }\r\n\r\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\r\n        if(peerId < 0 || this.storage.getFromCache(peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.set({\r\n          [peerId]: this.getUser(peerId)\r\n        });\r\n      });\r\n\r\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\r\n        if(peerId < 0 || !this.storage.getFromCache(peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.delete(peerId);\r\n      });\r\n    });\r\n  }\r\n\r\n  public clear(init = false) {\r\n    if(!init) {\r\n      const users = appStateManager.storagesResults.users;\r\n      for(const _userId in this.users) {\r\n        const userId = +_userId;\r\n        if(!userId) continue;\r\n        if(!appStateManager.isPeerNeeded(userId)) {\r\n          const user = this.users[userId];\r\n          if(user.username) {\r\n            delete this.usernames[cleanUsername(user.username)];\r\n          }\r\n\r\n          users.findAndSplice((user) => user.id === userId);\r\n          this.storage.delete(userId);\r\n          delete this.users[userId];\r\n        }\r\n      }\r\n    } else {\r\n      this.users = {};\r\n      this.usernames = {};\r\n    }\r\n    \r\n    this.contactsIndex = new SearchIndex();\r\n    this.contactsFillPromise = undefined;\r\n    this.contactsList = new Set();\r\n    this.updatedContactsList = false;\r\n  }\r\n\r\n  private onContactsModified() {\r\n    const contactsList = [...this.contactsList];\r\n    appStateManager.pushToState('contactsList', contactsList);\r\n  }\r\n\r\n  public fillContacts() {\r\n    if(this.contactsFillPromise && this.updatedContactsList) {\r\n      return this.contactsFillPromise;\r\n    }\r\n\r\n    this.updatedContactsList = true;\r\n\r\n    const promise = apiManager.invokeApi('contacts.getContacts').then((result) => {\r\n      if(result._ === 'contacts.contacts') {\r\n        this.saveApiUsers(result.users);\r\n\r\n        result.contacts.forEach((contact) => {\r\n          this.pushContact(contact.user_id);\r\n        });\r\n\r\n        this.onContactsModified();\r\n      }\r\n\r\n      this.contactsFillPromise = promise;\r\n\r\n      return this.contactsList;\r\n    });\r\n\r\n    return this.contactsFillPromise || (this.contactsFillPromise = promise);\r\n  }\r\n\r\n  public resolveUsername(username: string) {\r\n    if(username[0] === '@') {\r\n      username = username.slice(1);\r\n    }\r\n\r\n    username = username.toLowerCase();\r\n    if(this.usernames[username]) {\r\n      return Promise.resolve(this.users[this.usernames[username]]);\r\n    }\r\n\r\n    return apiManager.invokeApi('contacts.resolveUsername', {username}).then(resolvedPeer => {\r\n      this.saveApiUsers(resolvedPeer.users);\r\n      appChatsManager.saveApiChats(resolvedPeer.chats);\r\n\r\n      return appPeersManager.getPeer(appPeersManager.getPeerId(resolvedPeer.peer));\r\n    });\r\n  }\r\n\r\n  public pushContact(userId: number) {\r\n    this.contactsList.add(userId);\r\n    this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\r\n    appStateManager.requestPeer(userId, 'contacts');\r\n  }\r\n\r\n  public getUserSearchText(id: number) {\r\n    const user = this.users[id];\r\n    if(!user) {\r\n      return '';\r\n    }\r\n\r\n    const arr: string[] = [\r\n      user.first_name,\r\n      user.last_name,\r\n      user.phone,\r\n      user.username,\r\n      user.pFlags.self ? I18n.format('SavedMessages', true) : '',\r\n      user.pFlags.self ? 'Saved Messages' : ''\r\n    ];\r\n\r\n    return arr.filter(Boolean).join(' ');\r\n  }\r\n\r\n  public getContacts(query?: string, includeSaved = false) {\r\n    return this.fillContacts().then(_contactsList => {\r\n      let contactsList = [..._contactsList];\r\n      if(query) {\r\n        const results = this.contactsIndex.search(query);\r\n        const filteredContactsList = [...contactsList].filter(id => results.has(id));\r\n\r\n        contactsList = filteredContactsList;\r\n      }\r\n\r\n      contactsList.sort((userId1: number, userId2: number) => {\r\n        const sortName1 = (this.users[userId1] || {}).sortName || '';\r\n        const sortName2 = (this.users[userId2] || {}).sortName || '';\r\n\r\n        return sortName1.localeCompare(sortName2);\r\n      });\r\n\r\n      if(includeSaved) {\r\n        if(this.testSelfSearch(query)) {\r\n          contactsList.findAndSplice(p => p === rootScope.myId);\r\n          contactsList.unshift(rootScope.myId);\r\n        }\r\n      }\r\n\r\n      /* contactsList.sort((userId1: number, userId2: number) => {\r\n        const sortName1 = (this.users[userId1] || {}).sortName || '';\r\n        const sortName2 = (this.users[userId2] || {}).sortName || '';\r\n        if(sortName1 === sortName2) {\r\n          return 0;\r\n        } \r\n        \r\n        return sortName1 > sortName2 ? 1 : -1;\r\n      }); */\r\n\r\n      return contactsList;\r\n    });\r\n  }\r\n\r\n  public toggleBlock(peerId: number, block: boolean) {\r\n    return apiManager.invokeApi(block ? 'contacts.block' : 'contacts.unblock', {\r\n      id: appPeersManager.getInputPeerById(peerId)\r\n    }).then(value => {\r\n      if(value) {\r\n        apiUpdatesManager.processLocalUpdate({\r\n          _: 'updatePeerBlocked',\r\n          peer_id: appPeersManager.getOutputPeer(peerId),\r\n          blocked: block\r\n        });\r\n      }\r\n\r\n      return value;\r\n    });\r\n  }\r\n\r\n  public testSelfSearch(query: string) {\r\n    const user = this.getSelf();\r\n    const index = new SearchIndex();\r\n    index.indexObject(user.id, this.getUserSearchText(user.id));\r\n    return index.search(query).has(user.id);\r\n  }\r\n\r\n  public saveApiUsers(apiUsers: any[], override?: boolean) {\r\n    apiUsers.forEach((user) => this.saveApiUser(user, override));\r\n  }\r\n\r\n  public saveApiUser(user: MTUser, override?: boolean) {\r\n    if(user._ === 'userEmpty') return;\r\n\r\n    const userId = user.id;\r\n    const oldUser = this.users[userId];\r\n\r\n    // ! commented block can affect performance !\r\n    // if(oldUser && !override) {\r\n    //   console.log('saveApiUser same');\r\n    //   return;\r\n    // }\r\n\r\n    if(user.pFlags === undefined) {\r\n      user.pFlags = {};\r\n    }\r\n\r\n    if(user.pFlags.min && oldUser !== undefined) {\r\n      return;\r\n    }\r\n\r\n    // * exclude from state\r\n    // defineNotNumerableProperties(user, ['initials', 'num', 'rFirstName', 'rFullName', 'rPhone', 'sortName', 'sortStatus']);\r\n\r\n    const fullName = user.first_name + ' ' + (user.last_name || '');\r\n    if(user.username) {\r\n      const searchUsername = cleanUsername(user.username);\r\n      this.usernames[searchUsername] = userId;\r\n    }\r\n\r\n    user.sortName = user.pFlags.deleted ? '' : cleanSearchText(fullName, false);\r\n\r\n    user.initials = RichTextProcessor.getAbbreviation(fullName);\r\n\r\n    if(user.status) {\r\n      if((user.status as UserStatus.userStatusOnline).expires) {\r\n        (user.status as UserStatus.userStatusOnline).expires -= serverTimeManager.serverTimeOffset;\r\n      }\r\n\r\n      if((user.status as UserStatus.userStatusOffline).was_online) {\r\n        (user.status as UserStatus.userStatusOffline).was_online -= serverTimeManager.serverTimeOffset;\r\n      }\r\n    }\r\n\r\n    //user.sortStatus = user.pFlags.bot ? -1 : this.getUserStatusForSort(user.status);\r\n\r\n    let changedPhoto = false, changedTitle = false;\r\n    if(oldUser === undefined) {\r\n      this.users[userId] = user;\r\n    } else {\r\n      if(user.first_name !== oldUser.first_name \r\n        || user.last_name !== oldUser.last_name \r\n        || user.username !== oldUser.username) {\r\n        changedTitle = true;\r\n      }\r\n\r\n      const oldPhotoId = (oldUser.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\r\n      const newPhotoId = (user.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\r\n      if(oldPhotoId !== newPhotoId) {\r\n        changedPhoto = true;\r\n      }\r\n\r\n      /* if(user.pFlags.bot && user.bot_info_version !== oldUser.bot_info_version) {\r\n        \r\n      } */\r\n\r\n      safeReplaceObject(oldUser, user);\r\n      rootScope.dispatchEvent('user_update', userId);\r\n    }\r\n\r\n    if(changedPhoto) {\r\n      rootScope.dispatchEvent('avatar_update', user.id);\r\n    }\r\n\r\n    if(changedTitle) {\r\n      rootScope.dispatchEvent('peer_title_edit', user.id);\r\n    }\r\n\r\n    this.setUserToStateIfNeeded(user);\r\n  }\r\n\r\n  public setUserToStateIfNeeded(user: User) {\r\n    if(appStateManager.isPeerNeeded(user.id)) {\r\n      this.storage.set({\r\n        [user.id]: user\r\n      });\r\n    }\r\n  }\r\n\r\n  public formatUserPhone(phone: string) {\r\n    return '+' + formatPhoneNumber(phone).formatted;\r\n  }\r\n\r\n  public getUserStatusForSort(status: User['status'] | number) {\r\n    if(typeof(status) === 'number') {\r\n      status = this.getUser(status).status;\r\n    }\r\n\r\n    if(status) {\r\n      const expires = status._ === 'userStatusOnline' ? status.expires : (status._ === 'userStatusOffline' ? status.was_online : 0);\r\n      if(expires) {\r\n        return expires;\r\n      }\r\n\r\n      /* const timeNow = tsNow(true);\r\n      switch(status._) {\r\n        case 'userStatusRecently':\r\n          return timeNow - 86400 * 3;\r\n        case 'userStatusLastWeek':\r\n          return timeNow - 86400 * 7;\r\n        case 'userStatusLastMonth':\r\n          return timeNow - 86400 * 30;\r\n      } */\r\n      switch(status._) {\r\n        case 'userStatusRecently':\r\n          return 3;\r\n        case 'userStatusLastWeek':\r\n          return 2;\r\n        case 'userStatusLastMonth':\r\n          return 1;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  public getUser(id: any): User {\r\n    if(isObject(id)) {\r\n      return id;\r\n    }\r\n\r\n    return this.users[id] || {id: id, pFlags: {deleted: true}, access_hash: ''} as User;\r\n  }\r\n\r\n  public getSelf() {\r\n    return this.getUser(rootScope.myId);\r\n  }\r\n\r\n  public getUserStatusString(userId: number): HTMLElement {\r\n    let key: LangPackKey;\r\n    let args: any[];\r\n\r\n    switch(userId) {\r\n      case REPLIES_PEER_ID:\r\n        key = 'Peer.RepliesNotifications';\r\n        break;\r\n      case 777000:\r\n        key = 'Peer.ServiceNotifications';\r\n        break;\r\n      default: {\r\n        if(this.isBot(userId)) {\r\n          key = 'Bot';\r\n          break;\r\n        }\r\n\r\n        const user = this.getUser(userId);\r\n        if(!user) {\r\n          key = '' as any;\r\n          break;\r\n        }\r\n\r\n        if(user.pFlags.support) {\r\n          key = 'SupportStatus';\r\n          break;\r\n        }\r\n\r\n        switch(user.status?._) {\r\n          case 'userStatusRecently': {\r\n            key = 'Lately';\r\n            break;\r\n          }\r\n    \r\n          case 'userStatusLastWeek': {\r\n            key = 'WithinAWeek';\r\n            break;\r\n          }\r\n    \r\n          case 'userStatusLastMonth': {\r\n            key = 'WithinAMonth';\r\n            break;\r\n          }\r\n          \r\n          case 'userStatusOffline': {\r\n            const date = user.status.was_online;\r\n            const now = Date.now() / 1000;\r\n            \r\n            if((now - date) < 60) {\r\n              key = 'Peer.Status.justNow';\r\n            } else if((now - date) < 3600) {\r\n              key = 'Peer.Status.minAgo';\r\n              const c = (now - date) / 60 | 0;\r\n              args = [c];\r\n            } else if(now - date < 86400) {\r\n              key = 'LastSeen.HoursAgo';\r\n              const c = (now - date) / 3600 | 0;\r\n              args = [c];\r\n            } else {\r\n              key = 'Peer.Status.LastSeenAt';\r\n              const d = new Date(date * 1000);\r\n              args = [('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2), \r\n                ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2)];\r\n            }\r\n            \r\n            break;\r\n          }\r\n    \r\n          case 'userStatusOnline': {\r\n            key = 'Online';\r\n            break;\r\n          }\r\n    \r\n          default: {\r\n            key = 'ALongTimeAgo';\r\n            break;\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n    \r\n    return i18n(key, args);\r\n  }\r\n\r\n  public isBot(id: number) {\r\n    return this.users[id] && this.users[id].pFlags.bot;\r\n  }\r\n\r\n  public isContact(id: number) {\r\n    return this.contactsList.has(id);\r\n  }\r\n  \r\n  public isRegularUser(id: number) {\r\n    const user = this.users[id];\r\n    return user && !this.isBot(id) && !user.pFlags.deleted && !user.pFlags.support;\r\n  }\r\n\r\n  public isNonContactUser(id: number) {\r\n    return this.isRegularUser(id) && !this.isContact(id) && id !== rootScope.myId;\r\n  }\r\n\r\n  public hasUser(id: number, allowMin?: boolean) {\r\n    var user = this.users[id];\r\n    return isObject(user) && (allowMin || !user.pFlags.min);\r\n  }\r\n\r\n  public canSendToUser(id: number) {\r\n    const user = this.getUser(id);\r\n    return !user.pFlags.deleted && user.username !== 'replies';\r\n  }\r\n\r\n  public getUserPhoto(id: number) {\r\n    const user = this.getUser(id);\r\n\r\n    return user && user.photo || {\r\n      _: 'userProfilePhotoEmpty'\r\n    };\r\n  }\r\n\r\n  public getUserString(id: number) {\r\n    const user = this.getUser(id);\r\n    return 'u' + id + (user.access_hash ? '_' + user.access_hash : '');\r\n  }\r\n\r\n  public getUserInput(id: number): InputUser {\r\n    const user = this.getUser(id);\r\n    if(user.pFlags && user.pFlags.self) {\r\n      return {_: 'inputUserSelf'};\r\n    }\r\n\r\n    return {\r\n      _: 'inputUser',\r\n      user_id: id,\r\n      access_hash: user.access_hash\r\n    };\r\n  }\r\n\r\n  public updateUsersStatuses = () => {\r\n    const timestampNow = tsNow(true);\r\n    for(const i in this.users) {\r\n      const user = this.users[i];\r\n\r\n      if(user.status &&\r\n        user.status._ === 'userStatusOnline' &&\r\n        user.status.expires < timestampNow) {\r\n\r\n        user.status = {_: 'userStatusOffline', was_online: user.status.expires};\r\n        rootScope.dispatchEvent('user_update', user.id);\r\n\r\n        this.setUserToStateIfNeeded(user);\r\n      }\r\n    }\r\n  };\r\n\r\n  public forceUserOnline(id: number, eventTimestamp?: number) {\r\n    if(this.isBot(id)) {\r\n      return;\r\n    }\r\n\r\n    const timestamp = tsNow(true);\r\n    const onlineTimeFor = 60;\r\n    if(eventTimestamp) {\r\n      if((timestamp - eventTimestamp) >= onlineTimeFor) {\r\n        return;\r\n      }\r\n    } else if(apiUpdatesManager.updatesState.syncLoading) {\r\n      return;\r\n    }\r\n\r\n    const user = this.getUser(id);\r\n    if(user &&\r\n      user.status &&\r\n      user.status._ !== 'userStatusOnline' &&\r\n      user.status._ !== 'userStatusEmpty' &&\r\n      !user.pFlags.support &&\r\n      !user.pFlags.deleted) {\r\n\r\n      user.status = {\r\n        _: 'userStatusOnline',\r\n        expires: timestamp + onlineTimeFor\r\n      };\r\n      \r\n      //user.sortStatus = this.getUserStatusForSort(user.status);\r\n      rootScope.dispatchEvent('user_update', id);\r\n\r\n      this.setUserToStateIfNeeded(user);\r\n    }\r\n  }\r\n\r\n  /* function importContact (phone, firstName, lastName) {\r\n      return MtpApiManager.invokeApi('contacts.importContacts', {\r\n        contacts: [{\r\n          _: 'inputPhoneContact',\r\n          client_id: '1',\r\n          phone: phone,\r\n          first_name: firstName,\r\n          last_name: lastName\r\n        }],\r\n        replace: false\r\n      }).then(function (importedContactsResult) {\r\n        saveApiUsers(importedContactsResult.users)\r\n\r\n        var foundUserID = false\r\n        angular.forEach(importedContactsResult.imported, function (importedContact) {\r\n          onContactUpdated(foundUserID = importedContact.user_id, true)\r\n        })\r\n\r\n        return foundUserID || false\r\n      })\r\n  }\r\n\r\n  function importContacts (contacts) {\r\n    var inputContacts = [],\r\n      i\r\n    var j\r\n\r\n    for (i = 0; i < contacts.length; i++) {\r\n      for (j = 0; j < contacts[i].phones.length; j++) {\r\n        inputContacts.push({\r\n          _: 'inputPhoneContact',\r\n          client_id: (i << 16 | j).toString(10),\r\n          phone: contacts[i].phones[j],\r\n          first_name: contacts[i].first_name,\r\n          last_name: contacts[i].last_name\r\n        })\r\n      }\r\n    }\r\n\r\n    return MtpApiManager.invokeApi('contacts.importContacts', {\r\n      contacts: inputContacts,\r\n      replace: false\r\n    }).then(function (importedContactsResult) {\r\n      saveApiUsers(importedContactsResult.users)\r\n\r\n      var result = []\r\n      angular.forEach(importedContactsResult.imported, function (importedContact) {\r\n        onContactUpdated(importedContact.user_id, true)\r\n        result.push(importedContact.user_id)\r\n      })\r\n\r\n      return result\r\n    })\r\n  } */\r\n\r\n  /* public deleteContacts(userIds: number[]) {\r\n    var ids: any[] = [];\r\n    userIds.forEach((userId) => {\r\n      ids.push(this.getUserInput(userId));\r\n    })\r\n\r\n    return apiManager.invokeApi('contacts.deleteContacts', {\r\n      id: ids\r\n    }).then(() => {\r\n      userIds.forEach((userId) => {\r\n        this.onContactUpdated(userId, false);\r\n      });\r\n    });\r\n  } */\r\n\r\n  public getTopPeers(): Promise<number[]> {\r\n    if(this.getTopPeersPromise) return this.getTopPeersPromise;\r\n\r\n    return this.getTopPeersPromise = appStateManager.getState().then((state) => {\r\n      if(state?.topPeers?.length) {\r\n        return state.topPeers;\r\n      }\r\n\r\n      return apiManager.invokeApi('contacts.getTopPeers', {\r\n        correspondents: true,\r\n        offset: 0,\r\n        limit: 15,\r\n        hash: 0,\r\n      }).then((result) => {\r\n        let peerIds: number[] = [];\r\n        if(result._ === 'contacts.topPeers') {\r\n          //console.log(result);\r\n          this.saveApiUsers(result.users);\r\n          appChatsManager.saveApiChats(result.chats);\r\n\r\n          if(result.categories.length) {\r\n            peerIds = result.categories[0].peers.map((topPeer) => {\r\n              const peerId = appPeersManager.getPeerId(topPeer.peer);\r\n              appStateManager.requestPeer(peerId, 'topPeer');\r\n              return peerId;\r\n            });\r\n          }\r\n        }\r\n  \r\n        appStateManager.pushToState('topPeers', peerIds);\r\n  \r\n        return peerIds;\r\n      });\r\n    });\r\n  }\r\n\r\n  public getBlocked(offset = 0, limit = 0) {\r\n    return apiManager.invokeApi('contacts.getBlocked', {offset, limit}).then(contactsBlocked => {\r\n      this.saveApiUsers(contactsBlocked.users);\r\n      appChatsManager.saveApiChats(contactsBlocked.chats);\r\n      const count = contactsBlocked._ === 'contacts.blocked' ? contactsBlocked.users.length + contactsBlocked.chats.length : contactsBlocked.count;\r\n\r\n      const peerIds = contactsBlocked.users.map(u => u.id).concat(contactsBlocked.chats.map(c => -c.id));\r\n\r\n      return {count, peerIds};\r\n    });\r\n  }\r\n\r\n  /* public searchContacts(query: string, limit = 20) {\r\n    return Promise.all([\r\n      this.getContacts(query),\r\n      apiManager.invokeApi('contacts.search', {\r\n        q: query,\r\n        limit\r\n      })\r\n    ]).then(results => {\r\n      const [myContacts, peers] = results;\r\n\r\n      this.saveApiUsers(peers.users);\r\n      appChatsManager.saveApiChats(peers.chats);\r\n\r\n      // * contacts.search returns duplicates in my_results\r\n      const myResults = new Set(myContacts.concat(peers.my_results.map(p => appPeersManager.getPeerID(p))));\r\n\r\n      const out = {\r\n        my_results: [...myResults].slice(0, limit),\r\n        results: peers.results.map(p => appPeersManager.getPeerID(p))\r\n      };\r\n\r\n      return out;\r\n    });\r\n  } */\r\n  public searchContacts(query: string, limit = 20) {\r\n    return apiManager.invokeApi('contacts.search', {\r\n      q: query,\r\n      limit\r\n    }).then(peers => {\r\n      this.saveApiUsers(peers.users);\r\n      appChatsManager.saveApiChats(peers.chats);\r\n\r\n      const out = {\r\n        my_results: [...new Set(peers.my_results.map(p => appPeersManager.getPeerId(p)))], // ! contacts.search returns duplicates in my_results\r\n        results: peers.results.map(p => appPeersManager.getPeerId(p))\r\n      };\r\n\r\n      return out;\r\n    });\r\n  }\r\n\r\n  private onContactUpdated(userId: number, isContact: boolean) {\r\n    const curIsContact = this.isContact(userId);\r\n    if(isContact !== curIsContact) {\r\n      if(isContact) {\r\n        this.pushContact(userId);\r\n      } else {\r\n        this.contactsList.delete(userId);\r\n      }\r\n\r\n      this.onContactsModified();\r\n\r\n      rootScope.dispatchEvent('contacts_update', userId);\r\n    }\r\n  }\r\n\r\n  public updateUsername(username: string) {\r\n    return apiManager.invokeApi('account.updateUsername', {\r\n      username\r\n    }).then((user) => {\r\n      this.saveApiUser(user);\r\n    });\r\n  }\r\n\r\n  public setUserStatus(userId: number, offline: boolean) {\r\n    if(this.isBot(userId)) {\r\n      return;\r\n    }\r\n\r\n    const user = this.users[userId];\r\n    if(user) {\r\n      const status: any = offline ? {\r\n        _: 'userStatusOffline',\r\n        was_online: tsNow(true)\r\n      } : {\r\n        _: 'userStatusOnline',\r\n        expires: tsNow(true) + 500\r\n      };\r\n\r\n      user.status = status;\r\n      //user.sortStatus = this.getUserStatusForSort(user.status);\r\n      rootScope.dispatchEvent('user_update', userId);\r\n    }\r\n  }\r\n\r\n  public addContact(userId: number, first_name: string, last_name: string, phone: string, showPhone?: true) {\r\n    return apiManager.invokeApi('contacts.addContact', {\r\n      id: this.getUserInput(userId),\r\n      first_name,\r\n      last_name,\r\n      phone,\r\n      add_phone_privacy_exception: showPhone\r\n    }).then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\r\n\r\n      this.onContactUpdated(userId, true);\r\n    });\r\n  }\r\n\r\n  public deleteContacts(userIds: number[]) {\r\n    return apiManager.invokeApi('contacts.deleteContacts', {\r\n      id: userIds.map(userId => this.getUserInput(userId))\r\n    }).then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\r\n\r\n      userIds.forEach(userId => {\r\n        this.onContactUpdated(userId, false);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nconst appUsersManager = new AppUsersManager();\r\nMOUNT_CLASS_TO.appUsersManager = appUsersManager;\r\nexport default appUsersManager\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { ChatPhoto, DialogPeer, InputDialogPeer, InputNotifyPeer, InputPeer, Peer, Update, UserProfilePhoto } from \"../../layer\";\r\nimport type { LangPackKey } from \"../langPack\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { isObject } from \"../../helpers/object\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport I18n from '../langPack';\r\n\r\n// https://github.com/eelcohn/Telegram-API/wiki/Calculating-color-for-a-Telegram-user-on-IRC\r\n/*\r\n  HTML-color  IRC-color  Description\r\n  #c03d33     4          red\r\n  #4fad2d     3          green\r\n  #d09306     7          yellow\r\n  #168acd     10         blue\r\n  #8544d6     6          purple\r\n  #cd4073     13         pink\r\n  #2996ad     11         sea\r\n  #ce671b     5          orange\r\n  */\r\nconst DialogColorsFg = ['#fc5c51', '#0fb297', '#d09306', '#3d72ed', '#895dd5', '#cd4073', '#00c1a6', '#fa790f'];\r\nconst DialogColors = ['red', 'green', 'yellow', 'blue', 'violet', 'pink', 'cyan', 'orange'];\r\nconst DialogColorsMap = [0, 7, 4, 1, 6, 3, 5];\r\n\r\nexport type PeerType = 'channel' | 'chat' | 'megagroup' | 'group' | 'saved';\r\nexport class AppPeersManager {\r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      updatePeerBlocked: (update) => {\r\n        rootScope.dispatchEvent('peer_block', {peerId: this.getPeerId(update.peer_id), blocked: update.blocked});\r\n      }\r\n    });\r\n  }\r\n  /* public savePeerInstance(peerId: number, instance: any) {\r\n    if(peerId < 0) appChatsManager.saveApiChat(instance);\r\n    else appUsersManager.saveApiUser(instance);\r\n  } */\r\n\r\n  public canPinMessage(peerId: number) {\r\n    return peerId > 0 || appChatsManager.hasRights(-peerId, 'pin_messages');\r\n  }\r\n\r\n  public getPeerPhoto(peerId: number): UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto {\r\n    const photo = peerId > 0\r\n      ? appUsersManager.getUserPhoto(peerId)\r\n      : appChatsManager.getChatPhoto(-peerId);\r\n\r\n    return photo._ !== 'chatPhotoEmpty' && photo._ !== 'userProfilePhotoEmpty' ? photo : null;\r\n  }\r\n\r\n  public getPeerMigratedTo(peerId: number) {\r\n    if(peerId >= 0) {\r\n      return false;\r\n    }\r\n\r\n    let chat = appChatsManager.getChat(-peerId);\r\n    if(chat && chat.migrated_to && chat.pFlags.deactivated) {\r\n      return this.getPeerId(chat.migrated_to);\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  public getPeerTitle(peerId: number | any, plainText = false, onlyFirstName = false) {\r\n    if(!peerId) {\r\n      peerId = rootScope.myId;\r\n    }\r\n    \r\n    let peer: any = {}; \r\n    if(!isObject(peerId)) {\r\n      peer = this.getPeer(peerId);\r\n    } else peer = peerId;\r\n\r\n    let title = '';\r\n    if(peerId > 0) {\r\n      if(peer.first_name) title += peer.first_name;\r\n      if(peer.last_name) title += ' ' + peer.last_name;\r\n  \r\n      if(!title) title = peer.pFlags.deleted ? I18n.format('HiddenName', true) : peer.username;\r\n      else title = title.trim();\r\n    } else {\r\n      title = peer.title;\r\n    }\r\n\r\n    if(onlyFirstName) {\r\n      title = title.split(' ')[0];\r\n    }\r\n    \r\n    return plainText ? title : RichTextProcessor.wrapEmojiText(title);\r\n  }\r\n  \r\n  public getOutputPeer(peerId: number): Peer {\r\n    if(peerId > 0) {\r\n      return {_: 'peerUser', user_id: peerId};\r\n    }\r\n\r\n    let chatId = -peerId;\r\n    if(appChatsManager.isChannel(chatId)) {\r\n      return {_: 'peerChannel', channel_id: chatId};\r\n    }\r\n\r\n    return {_: 'peerChat', chat_id: chatId};\r\n  }\r\n\r\n  public getPeerString(peerId: number) {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUserString(peerId);\r\n    }\r\n    return appChatsManager.getChatString(-peerId);\r\n  }\r\n\r\n  public getPeerUsername(peerId: number): string {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUser(peerId).username || '';\r\n    }\r\n    return appChatsManager.getChat(-peerId).username || '';\r\n  }\r\n\r\n  public getPeer(peerId: number) {\r\n    return peerId > 0\r\n      ? appUsersManager.getUser(peerId)\r\n      : appChatsManager.getChat(-peerId)\r\n  }\r\n\r\n  public getPeerId(peerId: Peer | InputPeer | number | string): number {\r\n    if(typeof(peerId) === 'number') return peerId;\r\n    else if(isObject(peerId)) return (peerId as Peer.peerUser).user_id || -((peerId as Peer.peerChannel).channel_id || (peerId as Peer.peerChat).chat_id);\r\n    else if(!peerId) return 0;\r\n    \r\n    const isUser = (peerId as string).charAt(0) === 'u';\r\n    const peerParams = (peerId as string).substr(1).split('_');\r\n\r\n    return isUser ? +peerParams[0] : -peerParams[0] || 0;\r\n  }\r\n\r\n  public getDialogPeer(peerId: number): DialogPeer {\r\n    return {\r\n      _: 'dialogPeer',\r\n      peer: this.getOutputPeer(peerId)\r\n    };\r\n  }\r\n\r\n  public isChannel(peerId: number): boolean {\r\n    return (peerId < 0) && appChatsManager.isChannel(-peerId);\r\n  }\r\n\r\n  public isMegagroup(peerId: number) {\r\n    return (peerId < 0) && appChatsManager.isMegagroup(-peerId);\r\n  }\r\n\r\n  public isAnyGroup(peerId: number): boolean {\r\n    return (peerId < 0) && !appChatsManager.isBroadcast(-peerId);\r\n  }\r\n\r\n  public isBroadcast(peerId: number): boolean {\r\n    return this.isChannel(peerId) && !this.isMegagroup(peerId);\r\n  }\r\n\r\n  public isBot(peerId: number): boolean {\r\n    return (peerId > 0) && appUsersManager.isBot(peerId);\r\n  }\r\n\r\n  /* public getInputPeer(peerString: string): InputPeer {\r\n    var firstChar = peerString.charAt(0);\r\n    var peerParams = peerString.substr(1).split('_');\r\n    let id = +peerParams[0];\r\n\r\n    if(firstChar === 'u') {\r\n      //appUsersManager.saveUserAccess(id, peerParams[1]);\r\n\r\n      return {\r\n        _: 'inputPeerUser',\r\n        user_id: id,\r\n        access_hash: peerParams[1]\r\n      };\r\n    } else if(firstChar === 'c' || firstChar === 's') {\r\n      //appChatsManager.saveChannelAccess(id, peerParams[1]);\r\n      if(firstChar === 's') {\r\n        appChatsManager.saveIsMegagroup(id);\r\n      }\r\n\r\n      return {\r\n        _: 'inputPeerChannel',\r\n        channel_id: id,\r\n        access_hash: peerParams[1] || '0'\r\n      };\r\n    } else {\r\n      return {\r\n        _: 'inputPeerChat',\r\n        chat_id: id\r\n      };\r\n    }\r\n  } */\r\n\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId: true): Exclude<InputNotifyPeer, InputNotifyPeer.inputNotifyPeer>;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: false): InputNotifyPeer.inputNotifyPeer;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: boolean): InputNotifyPeer {\r\n    if(ignorePeerId) {\r\n      if(peerId > 0) {\r\n        return {_: 'inputNotifyUsers'};\r\n      } else {\r\n        if(appPeersManager.isBroadcast(peerId)) {\r\n          return {_: 'inputNotifyBroadcasts'};\r\n        } else {\r\n          return {_: 'inputNotifyChats'};\r\n        }\r\n      }\r\n    } else {\r\n      return {\r\n        _: 'inputNotifyPeer', \r\n        peer: this.getInputPeerById(peerId)\r\n      };\r\n    }\r\n  }\r\n\r\n  public getInputPeerById(peerId: number): InputPeer {\r\n    if(!peerId) {\r\n      return {_: 'inputPeerEmpty'};\r\n    }\r\n\r\n    if(peerId < 0) {\r\n      const chatId = -peerId;\r\n      if(!appChatsManager.isChannel(chatId)) {\r\n        return appChatsManager.getChatInputPeer(chatId);\r\n      } else {\r\n        return appChatsManager.getChannelInputPeer(chatId);\r\n      }\r\n    }\r\n\r\n    return {\r\n      _: 'inputPeerUser',\r\n      user_id: peerId,\r\n      access_hash: appUsersManager.getUser(peerId).access_hash\r\n    };\r\n  }\r\n\r\n  public getInputDialogPeerById(peerId: number): InputDialogPeer {\r\n    return {\r\n      _: 'inputDialogPeer',\r\n      peer: this.getInputPeerById(peerId)\r\n    }\r\n  }\r\n\r\n  public getPeerColorById(peerId: number, pic = true) {\r\n    if(!peerId) return '';\r\n\r\n    const idx = DialogColorsMap[(peerId < 0 ? -peerId : peerId) % 7];\r\n    const color = (pic ? DialogColors : DialogColorsFg)[idx];\r\n    return color;\r\n  }\r\n\r\n  public getPeerSearchText(peerId: number) {\r\n    let text;\r\n    if(peerId > 0) {\r\n      text = '%pu ' + appUsersManager.getUserSearchText(peerId);\r\n    } else if(peerId < 0) {\r\n      const chat = appChatsManager.getChat(-peerId);\r\n      text = '%pg ' + (chat.title || '');\r\n    }\r\n    return text;\r\n  }\r\n\r\n  public getDialogType(peerId: number): PeerType {\r\n    if(appPeersManager.isMegagroup(peerId)) {\r\n      return 'megagroup';\r\n    } else if(appPeersManager.isChannel(peerId)) {\r\n      return 'channel';\r\n    } else if(peerId < 0) {\r\n      return 'group';\r\n    } else {\r\n      return peerId === rootScope.myId ? 'saved' : 'chat';\r\n    }\r\n  }\r\n\r\n  public getDeleteButtonText(peerId: number): LangPackKey {\r\n    switch(this.getDialogType(peerId)) {\r\n      case 'channel':\r\n        return 'ChatList.Context.LeaveChannel';\r\n\r\n      case 'megagroup':\r\n        return 'ChatList.Context.LeaveGroup';\r\n\r\n      case 'group':\r\n        return 'ChatList.Context.DeleteAndExit';\r\n      \r\n      default:\r\n        return 'ChatList.Context.DeleteChat';\r\n    }\r\n  }\r\n}\r\n\r\nconst appPeersManager = new AppPeersManager();\r\nMOUNT_CLASS_TO.appPeersManager = appPeersManager;\r\nexport default appPeersManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { isObject, safeReplaceObject, copy, deepEqual } from \"../../helpers/object\";\r\nimport { ChannelParticipant, Chat, ChatAdminRights, ChatBannedRights, ChatParticipant, ChatPhoto, InputChannel, InputChatPhoto, InputFile, InputPeer, Update, Updates } from \"../../layer\";\r\nimport apiManagerProxy from \"../mtproto/mtprotoworker\";\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from \"./appStateManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\n\r\nexport type Channel = Chat.channel;\r\n\r\nexport type ChatRights = keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags'] | 'change_type' | 'change_permissions' | 'delete_chat' | 'view_participants';\r\n\r\nexport class AppChatsManager {\r\n  private storage = appStateManager.storages.chats;\r\n  \r\n  private chats: {[id: number]: Chat.channel | Chat.chat | any};\r\n  //private usernames: any;\r\n  //private channelAccess: any;\r\n  //private megagroups: {[id: number]: true};\r\n\r\n  constructor() {\r\n    this.clear(true);\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      /* updateChannel: (update) => {\r\n        const channelId = update.channel_id;\r\n        //console.log('updateChannel:', update);\r\n        rootScope.broadcast('channel_settings', {channelId});\r\n      }, */\r\n\r\n      updateChannelParticipant: (update) => {\r\n        apiManagerProxy.clearCache('channels.getParticipants', (params) => {\r\n          return (params.channel as InputChannel.inputChannel).channel_id === update.channel_id;\r\n        });\r\n      },\r\n\r\n      updateChatDefaultBannedRights: (update) => {\r\n        const chatId = -appPeersManager.getPeerId(update.peer);\r\n        const chat: Chat.chat = this.chats[chatId];\r\n        if(chat) {\r\n          chat.default_banned_rights = update.default_banned_rights;\r\n          rootScope.dispatchEvent('chat_update', chatId);\r\n        }\r\n      }\r\n    });\r\n\r\n    appStateManager.getState().then((state) => {\r\n      const chats = appStateManager.storagesResults.chats;\r\n      if(chats.length) {\r\n        for(let i = 0, length = chats.length; i < length; ++i) {\r\n          const chat = chats[i];\r\n          if(chat) {\r\n            this.chats[chat.id] = chat;\r\n          }\r\n        }\r\n      }\r\n\r\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\r\n        if(peerId > 0 || this.storage.getFromCache(-peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.set({\r\n          [-peerId]: this.getChat(-peerId)\r\n        });\r\n      });\r\n\r\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\r\n        if(peerId > 0 || !this.storage.getFromCache(-peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.delete(-peerId);\r\n      });\r\n    });\r\n  }\r\n\r\n  public clear(init = false) {\r\n    if(!init) {\r\n      const chats = appStateManager.storagesResults.chats;\r\n      for(const _chatId in this.chats) {\r\n        const chatId = +_chatId;\r\n        if(!chatId) continue;\r\n        if(!appStateManager.isPeerNeeded(-chatId)) {\r\n          /* const chat = this.chats[chatId];\r\n          if(chat.username) {\r\n            delete this.usernames[cleanUsername(chat.username)];\r\n          } */\r\n          \r\n          chats.findAndSplice((chat) => chat.id === chatId);\r\n          this.storage.delete(chatId);\r\n          delete this.chats[chatId];\r\n        }\r\n      }\r\n    } else {\r\n      this.chats = {};\r\n    }\r\n  }\r\n\r\n  public saveApiChats(apiChats: any[], override?: boolean) {\r\n    apiChats.forEach(chat => this.saveApiChat(chat, override));\r\n  }\r\n\r\n  public saveApiChat(chat: Chat, override?: boolean) {\r\n    if(chat._ === 'chatEmpty') return;\r\n    /* if(chat._ !== 'chat' && chat._ !== 'channel') {\r\n      return;\r\n    } */\r\n    \r\n    // * exclude from state\r\n    // defineNotNumerableProperties(chat, ['rTitle', 'initials']);\r\n\r\n    const oldChat: Exclude<Chat, Chat.chatEmpty> = this.chats[chat.id];\r\n\r\n    /* if(oldChat && !override) {\r\n      return;\r\n    } */\r\n\r\n    if((chat as Chat.chat).pFlags === undefined) {\r\n      (chat as Chat.chat).pFlags = {};\r\n    }\r\n\r\n    if((chat as Chat.channel).pFlags.min && oldChat !== undefined) {\r\n      return;\r\n    }\r\n\r\n    chat.initials = RichTextProcessor.getAbbreviation(chat.title);\r\n\r\n    if(chat._ === 'channel' &&\r\n        chat.participants_count === undefined &&\r\n        oldChat !== undefined &&\r\n        (oldChat as Chat.channel).participants_count) {\r\n      chat.participants_count = (oldChat as Chat.channel).participants_count;\r\n    }\r\n\r\n    /* if(chat.username) {\r\n      let searchUsername = searchIndexManager.cleanUsername(chat.username);\r\n      this.usernames[searchUsername] = chat.id;\r\n    } */\r\n\r\n    let changedPhoto = false, changedTitle = false;\r\n    if(oldChat === undefined) {\r\n      this.chats[chat.id] = chat;\r\n    } else {\r\n      const oldPhotoId = ((oldChat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\r\n      const newPhotoId = ((chat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\r\n      if(oldPhotoId !== newPhotoId) {\r\n        changedPhoto = true;\r\n      }\r\n\r\n      if(oldChat.title !== chat.title) {\r\n        changedTitle = true;\r\n      }\r\n\r\n      safeReplaceObject(oldChat, chat);\r\n      rootScope.dispatchEvent('chat_update', chat.id);\r\n    }\r\n\r\n    if(changedPhoto) {\r\n      rootScope.dispatchEvent('avatar_update', -chat.id);\r\n    }\r\n\r\n    if(changedTitle) {\r\n      rootScope.dispatchEvent('peer_title_edit', -chat.id);\r\n    }\r\n\r\n    if(appStateManager.isPeerNeeded(-chat.id)) {\r\n      this.storage.set({\r\n        [chat.id]: chat\r\n      });\r\n    }\r\n  }\r\n\r\n  public getChat(id: number) {\r\n    if(id < 0) id = -id;\r\n    return this.chats[id] || {_: 'chatEmpty', id, deleted: true, access_hash: '', pFlags: {}/* this.channelAccess[id] */};\r\n  }\r\n\r\n  public combineParticipantBannedRights(id: number, rights: ChatBannedRights) {\r\n    const chat: Chat.channel = this.getChat(id);\r\n\r\n    if(chat.default_banned_rights) {\r\n      rights = copy(rights);\r\n      const defaultRights = chat.default_banned_rights.pFlags;\r\n      for(let i in defaultRights) {\r\n        // @ts-ignore\r\n        rights.pFlags[i] = defaultRights[i];\r\n      }\r\n    }\r\n\r\n    return rights;\r\n  }\r\n\r\n  public hasRights(id: number, action: ChatRights, rights?: ChatAdminRights | ChatBannedRights, isThread?: boolean) {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'chatEmpty') return false;\r\n\r\n    if(chat._ === 'chatForbidden' ||\r\n        chat._ === 'channelForbidden' ||\r\n        (chat as Chat.chat).pFlags.kicked ||\r\n        (chat.pFlags.left && !(chat as Chat.channel).pFlags.megagroup)) {\r\n      return false;\r\n    }\r\n\r\n    if(chat.pFlags.creator && rights === undefined) {\r\n      return true;\r\n    }\r\n\r\n    if(!rights) {\r\n      rights = chat.admin_rights || (chat as Chat.channel).banned_rights || chat.default_banned_rights;\r\n\r\n      if(!rights) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    let myFlags: Partial<{[flag in keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags']]: true}> = {};\r\n    if(rights) {\r\n      myFlags = rights.pFlags as any;\r\n    }\r\n\r\n    switch(action) {\r\n      case 'embed_links':\r\n      case 'send_games':\r\n      case 'send_gifs':\r\n      case 'send_inline':\r\n      case 'send_media':\r\n      case 'send_messages':\r\n      case 'send_polls':\r\n      case 'send_stickers': {\r\n        if(!isThread && chat.pFlags.left) {\r\n          return false;\r\n        }\r\n\r\n        if(rights._ === 'chatBannedRights' && myFlags[action]) {\r\n          return false;\r\n        }\r\n\r\n        if(chat._ === 'channel') {\r\n          if(!chat.pFlags.megagroup && !myFlags.post_messages) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      // * revoke foreign messages\r\n      case 'delete_messages': {\r\n        return !!myFlags.delete_messages;\r\n      }\r\n\r\n      case 'pin_messages': {\r\n        return rights._ === 'chatAdminRights' ? myFlags[action] || !!myFlags.post_messages : !myFlags[action];\r\n      }\r\n\r\n      case 'invite_users':\r\n      case 'change_info': {\r\n        return rights._ === 'chatAdminRights' ? myFlags[action] : !myFlags[action];\r\n      }\r\n\r\n      // * only creator can do that\r\n      case 'change_type':\r\n      case 'delete_chat': {\r\n        return false;\r\n      }\r\n\r\n      case 'change_permissions': {\r\n        return rights._ === 'chatAdminRights' && myFlags['ban_users'];\r\n      }\r\n\r\n      case 'view_participants': {\r\n        return !!(chat._ === 'chat' || !chat.pFlags.broadcast || chat.pFlags.creator || chat.admin_rights);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public editChatDefaultBannedRights(id: number, banned_rights: ChatBannedRights) {\r\n    const chat: Chat.chat = this.getChat(id);\r\n    if(chat.default_banned_rights) {\r\n      if(chat.default_banned_rights.until_date === banned_rights.until_date && deepEqual(chat.default_banned_rights.pFlags, banned_rights.pFlags)) {\r\n        return Promise.resolve();\r\n      }\r\n    }\r\n    \r\n    return apiManager.invokeApi('messages.editChatDefaultBannedRights', {\r\n      peer: appPeersManager.getInputPeerById(-id),\r\n      banned_rights\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  /* public resolveUsername(username: string) {\r\n    return this.usernames[username] || 0;\r\n  } */\r\n\r\n  /* public saveChannelAccess(id: number, accessHash: string) {\r\n    this.channelAccess[id] = accessHash;\r\n  } */\r\n\r\n  /* public saveIsMegagroup(id: number) {\r\n    this.megagroups[id] = true;\r\n  } */\r\n\r\n  public isChannel(id: number) {\r\n    const chat = this.chats[id];\r\n    return chat && (chat._ === 'channel' || chat._ === 'channelForbidden')/*  || this.channelAccess[id] */;\r\n  }\r\n\r\n  public isMegagroup(id: number) {\r\n    /* if(this.megagroups[id]) {\r\n      return true;\r\n    } */\r\n\r\n    const chat = this.chats[id];\r\n    return chat && chat._ === 'channel' && chat.pFlags.megagroup;\r\n  }\r\n\r\n  public isBroadcast(id: number) {\r\n    return this.isChannel(id) && !this.isMegagroup(id);\r\n  }\r\n\r\n  public isInChat(id: number) {\r\n    let good = true;\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'channelForbidden' \r\n      || chat._ === 'chatForbidden' \r\n      || chat._ === 'chatEmpty' \r\n      || (chat as Chat.chat).pFlags.left \r\n      || (chat as Chat.chat).pFlags.kicked \r\n      || (chat as Chat.chat).pFlags.deactivated) {\r\n      good = false;\r\n    }\r\n\r\n    return good;\r\n  }\r\n\r\n  public getChannelInput(id: number): InputChannel {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'chatEmpty' || !(chat as Chat.channel).access_hash) {\r\n      return {\r\n        _: 'inputChannelEmpty'\r\n      };\r\n    } else {\r\n      return {\r\n        _: 'inputChannel',\r\n        channel_id: id,\r\n        access_hash: (chat as Chat.channel).access_hash/*  || this.channelAccess[id] */ || '0'\r\n      };\r\n    }\r\n  }\r\n\r\n  public getChatInputPeer(id: number): InputPeer.inputPeerChat {\r\n    return {\r\n      _: 'inputPeerChat',\r\n      chat_id: id\r\n    };\r\n  }\r\n\r\n  public getChannelInputPeer(id: number): InputPeer.inputPeerChannel {\r\n    return {\r\n      _: 'inputPeerChannel',\r\n      channel_id: id,\r\n      access_hash: this.getChat(id).access_hash/*  || this.channelAccess[id] */ || 0\r\n    };\r\n  }\r\n\r\n  public hasChat(id: number, allowMin?: true) {\r\n    const chat = this.chats[id]\r\n    return isObject(chat) && (allowMin || !chat.pFlags.min);\r\n  }\r\n\r\n  public getChatPhoto(id: number) {\r\n    const chat: Chat.chat = this.getChat(id);\r\n\r\n    return chat && chat.photo || {\r\n      _: 'chatPhotoEmpty'\r\n    };\r\n  }\r\n\r\n  public getChatString(id: number) {\r\n    const chat = this.getChat(id);\r\n    if(this.isChannel(id)) {\r\n      return (this.isMegagroup(id) ? 's' : 'c') + id + '_' + chat.access_hash;\r\n    }\r\n    return 'g' + id;\r\n  }\r\n\r\n  /* public wrapForFull(id: number, fullChat: any) {\r\n    const chatFull = copy(fullChat);\r\n    const chat = this.getChat(id);\r\n\r\n    if(!chatFull.participants_count) {\r\n      chatFull.participants_count = chat.participants_count;\r\n    }\r\n\r\n    if(chatFull.participants &&\r\n        chatFull.participants._ === 'chatParticipants') {\r\n      chatFull.participants.participants = this.wrapParticipants(id, chatFull.participants.participants);\r\n    }\r\n\r\n    if(chatFull.about) {\r\n      chatFull.rAbout = RichTextProcessor.wrapRichText(chatFull.about, {noLinebreaks: true});\r\n    }\r\n\r\n    //chatFull.peerString = this.getChatString(id);\r\n    chatFull.chat = chat;\r\n\r\n    return chatFull;\r\n  }\r\n\r\n  public wrapParticipants(id: number, participants: any[]) {\r\n    const chat = this.getChat(id);\r\n    const myId = appUsersManager.getSelf().id;\r\n    if(this.isChannel(id)) {\r\n      const isAdmin = chat.pFlags.creator;\r\n      participants.forEach((participant) => {\r\n        participant.canLeave = myId === participant.user_id;\r\n        participant.canKick = isAdmin && participant._ === 'channelParticipant';\r\n\r\n        // just for order by last seen\r\n        participant.user = appUsersManager.getUser(participant.user_id);\r\n      });\r\n    } else {\r\n      const isAdmin = chat.pFlags.creator || chat.pFlags.admins_enabled && chat.pFlags.admin;\r\n      participants.forEach((participant) => {\r\n        participant.canLeave = myId === participant.user_id;\r\n        participant.canKick = !participant.canLeave && (\r\n          chat.pFlags.creator ||\r\n          participant._ === 'chatParticipant' && (isAdmin || myId === participant.inviter_id)\r\n        );\r\n\r\n        // just for order by last seen\r\n        participant.user = appUsersManager.getUser(participant.user_id);\r\n      });\r\n    }\r\n\r\n    return participants;\r\n  } */\r\n\r\n  public createChannel(title: string, about: string): Promise<number> {\r\n    return apiManager.invokeApi('channels.createChannel', {\r\n      broadcast: true,\r\n      title,\r\n      about\r\n    }).then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n\r\n      const channelId = (updates as any).chats[0].id;\r\n      rootScope.dispatchEvent('history_focus', {peerId: -channelId});\r\n\r\n      return channelId;\r\n    });\r\n  }\r\n\r\n  public inviteToChannel(id: number, userIds: number[]) {\r\n    const input = this.getChannelInput(id);\r\n    const usersInputs = userIds.map(u => appUsersManager.getUserInput(u));\r\n\r\n    return apiManager.invokeApi('channels.inviteToChannel', {\r\n      channel: input,\r\n      users: usersInputs\r\n    }).then(updates => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public createChat(title: string, userIds: number[]): Promise<number> {\r\n    return apiManager.invokeApi('messages.createChat', {\r\n      users: userIds.map(u => appUsersManager.getUserInput(u)),\r\n      title\r\n    }).then(updates => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n\r\n      const chatId = (updates as any as Updates.updates).chats[0].id;\r\n      rootScope.dispatchEvent('history_focus', {peerId: -chatId});\r\n\r\n      return chatId;\r\n    });\r\n  }\r\n\r\n  private onChatUpdated = (chatId: number, updates: any) => {\r\n    //console.log('onChatUpdated', chatId, updates);\r\n\r\n    apiUpdatesManager.processUpdateMessage(updates);\r\n    if(updates &&\r\n        /* updates.updates &&\r\n        updates.updates.length && */\r\n        this.isChannel(chatId)) {\r\n      rootScope.dispatchEvent('invalidate_participants', chatId);\r\n    }\r\n  };\r\n\r\n  public leaveChannel(id: number) {\r\n    return apiManager.invokeApi('channels.leaveChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public joinChannel(id: number) {\r\n    return apiManager.invokeApi('channels.joinChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public addChatUser(id: number, userId: number, fwdLimit = 100) {\r\n    return apiManager.invokeApi('messages.addChatUser', {\r\n      chat_id: id,\r\n      user_id: appUsersManager.getUserInput(userId),\r\n      fwd_limit: fwdLimit\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public deleteChatUser(id: number, userId: number) {\r\n    return apiManager.invokeApi('messages.deleteChatUser', {\r\n      chat_id: id,\r\n      user_id: appUsersManager.getUserInput(userId)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public leaveChat(id: number) {\r\n    return this.deleteChatUser(id, appUsersManager.getSelf().id);\r\n  }\r\n\r\n  public leave(id: number) {\r\n    return this.isChannel(id) ? this.leaveChannel(id) : this.leaveChat(id);\r\n  }\r\n\r\n  public delete(id: number) {\r\n    return this.isChannel(id) ? this.deleteChannel(id) : this.deleteChat(id);\r\n  }\r\n\r\n  public deleteChannel(id: number) {\r\n    return apiManager.invokeApi('channels.deleteChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public deleteChat(id: number) {\r\n    //return this.leaveChat(id).then(() => {\r\n      return apiManager.invokeApi('messages.deleteChat', {\r\n        chat_id: id\r\n      });\r\n    //});\r\n  }\r\n\r\n  public migrateChat(id: number): Promise<number> {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'channel') return Promise.resolve(chat.id);\r\n    return apiManager.invokeApi('messages.migrateChat', {\r\n      chat_id: id\r\n    }).then((updates) => {\r\n      this.onChatUpdated(id, updates);\r\n      const update: Update.updateChannel = (updates as Updates.updates).updates.find(u => u._ === 'updateChannel') as any;\r\n      return update.channel_id;\r\n    });\r\n  }\r\n\r\n  public updateUsername(id: number, username: string) {\r\n    return apiManager.invokeApi('channels.updateUsername', {\r\n      channel: this.getChannelInput(id),\r\n      username\r\n    }).then((bool) => {\r\n      if(bool) {\r\n        const chat: Chat.channel = this.getChat(id);\r\n        chat.username = username;\r\n      }\r\n\r\n      return bool;\r\n    });\r\n  }\r\n\r\n  public editPhoto(id: number, inputFile: InputFile) {\r\n    const inputChatPhoto: InputChatPhoto = {\r\n      _: 'inputChatUploadedPhoto',\r\n      file: inputFile\r\n    };\r\n\r\n    let promise: any;\r\n    if(this.isChannel(id)) {\r\n      promise = apiManager.invokeApi('channels.editPhoto', {\r\n        channel: this.getChannelInput(id),\r\n        photo: inputChatPhoto\r\n      });\r\n    } else {\r\n      promise = apiManager.invokeApi('messages.editChatPhoto', {\r\n        chat_id: id,\r\n        photo: inputChatPhoto\r\n      });\r\n    }\r\n\r\n    return promise.then((updates: any) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public editTitle(id: number, title: string) {\r\n    let promise: any;\r\n\r\n    if(this.isChannel(id)) {\r\n      promise = apiManager.invokeApi('channels.editTitle', {\r\n        channel: this.getChannelInput(id),\r\n        title\r\n      });\r\n    } else {\r\n      promise = apiManager.invokeApi('messages.editChatTitle', {\r\n        chat_id: id,\r\n        title\r\n      });\r\n    }\r\n\r\n    return promise.then((updates: any) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public editAbout(id: number, about: string) {\r\n    return apiManager.invokeApi('messages.editChatAbout', {\r\n      peer: appPeersManager.getInputPeerById(-id),\r\n      about\r\n    }).then(bool => {\r\n      //apiUpdatesManager.processUpdateMessage(updates);\r\n      rootScope.dispatchEvent('peer_bio_edit', -id);\r\n    });\r\n  }\r\n\r\n  public getParticipantPeerId(participant: ChannelParticipant | ChatParticipant) {\r\n    const peerId = (participant as ChannelParticipant.channelParticipantBanned).peer ? \r\n      appPeersManager.getPeerId((participant as ChannelParticipant.channelParticipantBanned).peer) : \r\n      (participant as ChatParticipant.chatParticipant).user_id;\r\n    return peerId;\r\n  }\r\n\r\n  public editBanned(id: number, participant: number | ChannelParticipant, banned_rights: ChatBannedRights) {\r\n    const peerId = typeof(participant) === 'number' ? participant : this.getParticipantPeerId(participant);\r\n    return apiManager.invokeApi('channels.editBanned', {\r\n      channel: this.getChannelInput(id),\r\n      participant: appPeersManager.getInputPeerById(peerId),\r\n      banned_rights\r\n    }).then((updates) => {\r\n      this.onChatUpdated(id, updates);\r\n\r\n      if(typeof(participant) !== 'number') {\r\n        const timestamp = Date.now() / 1000 | 0;\r\n        apiUpdatesManager.processLocalUpdate({\r\n          _: 'updateChannelParticipant',\r\n          channel_id: id,\r\n          date: timestamp,\r\n          actor_id: undefined,\r\n          qts: undefined,\r\n          user_id: peerId,\r\n          prev_participant: participant,\r\n          new_participant: Object.keys(banned_rights.pFlags).length ? {\r\n            _: 'channelParticipantBanned',\r\n            date: timestamp,\r\n            banned_rights,\r\n            kicked_by: appUsersManager.getSelf().id,\r\n            peer: appPeersManager.getOutputPeer(peerId),\r\n            pFlags: {}\r\n          } : undefined\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public clearChannelParticipantBannedRights(id: number, participant: number | ChannelParticipant) {\r\n    return this.editBanned(id, participant, {\r\n      _: 'chatBannedRights',\r\n      until_date: 0,\r\n      pFlags: {}\r\n    });\r\n  }\r\n  \r\n  public kickFromChannel(id: number, participant: number | ChannelParticipant) {\r\n    return this.editBanned(id, participant, {\r\n      _: 'chatBannedRights',\r\n      until_date: 0,\r\n      pFlags: {\r\n        view_messages: true\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nconst appChatsManager = new AppChatsManager();\r\nMOUNT_CLASS_TO.appChatsManager = appChatsManager;\r\nexport default appChatsManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\n//import apiManager from '../mtproto/apiManager';\r\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport { Update, Updates } from '../../layer';\r\nimport { logger, LogTypes } from '../logger';\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport rootScope from '../rootScope';\r\n//import networkerFactory from '../mtproto/networkerFactory';\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from './appStateManager';\r\nimport serverTimeManager from '../mtproto/serverTimeManager';\r\n\r\ntype UpdatesState = {\r\n  pendingPtsUpdates: {pts: number, pts_count: number}[],\r\n  pendingSeqUpdates?: {[seq: number]: {seq: number, date: number, updates: any[]}},\r\n  syncPending: {\r\n    seqAwaiting?: number,\r\n    ptsAwaiting?: true,\r\n    timeout: number\r\n  },\r\n  syncLoading: Promise<void>,\r\n\r\n  seq?: number,\r\n  pts?: number,\r\n  date?: number,\r\n  lastPtsUpdateTime?: number\r\n};\r\n\r\nconst SYNC_DELAY = 6;\r\n\r\nexport class ApiUpdatesManager {\r\n  public updatesState: UpdatesState = {\r\n    pendingPtsUpdates: [],\r\n    pendingSeqUpdates: {},\r\n    syncPending: null,\r\n    syncLoading: null\r\n  };\r\n\r\n  private channelStates: {[channelId: number]: UpdatesState} = {};\r\n  private attached = false;\r\n\r\n  private log = logger('UPDATES', LogTypes.Error | LogTypes.Warn | LogTypes.Log/*  | LogTypes.Debug */);\r\n  private debug = DEBUG;\r\n\r\n  private setProxy() {\r\n    const self = this;\r\n    this.updatesState = new Proxy(this.updatesState, {\r\n      set: function(target: ApiUpdatesManager['updatesState'], key: keyof ApiUpdatesManager['updatesState'], value: ApiUpdatesManager['updatesState'][typeof key]) {\r\n        // @ts-ignore\r\n        target[key] = value;\r\n        self.saveUpdatesState();\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  public saveUpdatesState() {\r\n    const us = this.updatesState;\r\n    appStateManager.pushToState('updates', {\r\n      seq: us.seq,\r\n      pts: us.pts,\r\n      date: us.date\r\n    });\r\n  }\r\n\r\n  private popPendingSeqUpdate() {\r\n    const state = this.updatesState;\r\n    const nextSeq = state.seq + 1;\r\n    const pendingUpdatesData = state.pendingSeqUpdates[nextSeq];\r\n    if(!pendingUpdatesData) {\r\n      return false;\r\n    }\r\n\r\n    const updates = pendingUpdatesData.updates;\r\n    for(let i = 0, length = updates.length; i < length; ++i) {\r\n      this.saveUpdate(updates[i]);\r\n    }\r\n\r\n    state.seq = pendingUpdatesData.seq;\r\n    if(pendingUpdatesData.date && state.date < pendingUpdatesData.date) {\r\n      state.date = pendingUpdatesData.date;\r\n    }\r\n    delete state.pendingSeqUpdates[nextSeq];\r\n  \r\n    if(!this.popPendingSeqUpdate() &&\r\n      state.syncPending &&\r\n      state.syncPending.seqAwaiting &&\r\n      state.seq >= state.syncPending.seqAwaiting) {\r\n      if(!state.syncPending.ptsAwaiting) {\r\n        clearTimeout(state.syncPending.timeout);\r\n        state.syncPending = null;\r\n      } else {\r\n        delete state.syncPending.seqAwaiting;\r\n      }\r\n    }\r\n  \r\n    return true;\r\n  }\r\n\r\n  private popPendingPtsUpdate(channelId: number) {\r\n    const curState = channelId ? this.getChannelState(channelId) : this.updatesState;\r\n    if(!curState.pendingPtsUpdates.length) {\r\n      return false;\r\n    }\r\n\r\n    curState.pendingPtsUpdates.sort((a, b) => {\r\n      return a.pts - b.pts;\r\n    });\r\n    // this.log('pop update', channelId, curState.pendingPtsUpdates)\r\n  \r\n    let curPts = curState.pts;\r\n    let goodPts = 0;\r\n    let goodIndex = 0;\r\n    for(let i = 0, length = curState.pendingPtsUpdates.length; i < length; ++i) {\r\n      const update = curState.pendingPtsUpdates[i];\r\n      curPts += update.pts_count;\r\n      if(curPts >= update.pts) {\r\n        goodPts = update.pts;\r\n        goodIndex = i;\r\n      }\r\n    }\r\n  \r\n    if(!goodPts) {\r\n      return false;\r\n    }\r\n  \r\n    this.debug && this.log.debug('pop pending pts updates', goodPts, curState.pendingPtsUpdates.slice(0, goodIndex + 1));\r\n  \r\n    curState.pts = goodPts;\r\n    for(let i = 0; i <= goodIndex; ++i) {\r\n      const update = curState.pendingPtsUpdates[i];\r\n\r\n      // @ts-ignore\r\n      this.saveUpdate(update);\r\n    }\r\n    curState.pendingPtsUpdates.splice(0, goodIndex + 1);\r\n  \r\n    if(!curState.pendingPtsUpdates.length && curState.syncPending) {\r\n      if(!curState.syncPending.seqAwaiting) {\r\n        clearTimeout(curState.syncPending.timeout);\r\n        curState.syncPending = null;\r\n      } else {\r\n        delete curState.syncPending.ptsAwaiting;\r\n      }\r\n    }\r\n  \r\n    return true;\r\n  }\r\n\r\n  public forceGetDifference() {\r\n    if(!this.updatesState.syncLoading) {\r\n      this.getDifference();\r\n    }\r\n  }\r\n\r\n  public processLocalUpdate(update: Update) {\r\n    this.processUpdateMessage({\r\n      _: 'updateShort',\r\n      update\r\n    } as Updates);\r\n  }\r\n\r\n  public processUpdateMessage = (updateMessage: any, options: Partial<{\r\n    override: boolean\r\n  }> = {}) => {\r\n    // return forceGetDifference()\r\n    const processOpts = {\r\n      date: updateMessage.date,\r\n      seq: updateMessage.seq,\r\n      seqStart: updateMessage.seq_start,\r\n      //ignoreSyncLoading: options.ignoreSyncLoading\r\n    };\r\n\r\n    this.debug && this.log.debug('processUpdateMessage', updateMessage);\r\n  \r\n    switch(updateMessage._) {\r\n      case 'updatesTooLong':\r\n      case 'new_session_created':\r\n        this.forceGetDifference();\r\n        break;\r\n  \r\n      case 'updateShort':\r\n        this.processUpdate(updateMessage.update, processOpts);\r\n        break;\r\n  \r\n      case 'updateShortMessage':\r\n      case 'updateShortChatMessage': {\r\n        this.debug && this.log.debug('updateShortMessage | updateShortChatMessage', {...updateMessage});\r\n        const isOut = updateMessage.pFlags.out;\r\n        const fromId = updateMessage.from_id || (isOut ? rootScope.myId : updateMessage.user_id);\r\n        const toId = updateMessage.chat_id\r\n          ? -updateMessage.chat_id\r\n          : (updateMessage.user_id || rootScope.myId);\r\n  \r\n        this.processUpdate({\r\n          _: 'updateNewMessage',\r\n          message: {\r\n            _: 'message',\r\n            pFlags: updateMessage.pFlags,\r\n            id: updateMessage.id,\r\n            from_id: appPeersManager.getOutputPeer(fromId),\r\n            peer_id: appPeersManager.getOutputPeer(toId),\r\n            date: updateMessage.date,\r\n            message: updateMessage.message,\r\n            fwd_from: updateMessage.fwd_from,\r\n            reply_to: updateMessage.reply_to,\r\n            entities: updateMessage.entities\r\n          },\r\n          pts: updateMessage.pts,\r\n          pts_count: updateMessage.pts_count\r\n        }, processOpts);\r\n        break;\r\n      }\r\n  \r\n      case 'updatesCombined':\r\n      case 'updates':\r\n        appUsersManager.saveApiUsers(updateMessage.users, options.override);\r\n        appChatsManager.saveApiChats(updateMessage.chats, options.override);\r\n  \r\n        updateMessage.updates.forEach((update: any) => {\r\n          this.processUpdate(update, processOpts);\r\n        });\r\n        break;\r\n  \r\n      default:\r\n        this.log.warn('Unknown update message', updateMessage);\r\n    }\r\n  };\r\n  \r\n  private getDifference(first = false): Promise<void> {\r\n    // this.trace('Get full diff')\r\n    const updatesState = this.updatesState;\r\n    let wasSyncing = updatesState.syncLoading;\r\n    if(!wasSyncing) {\r\n      updatesState.pendingSeqUpdates = {};\r\n      updatesState.pendingPtsUpdates = [];\r\n    }\r\n  \r\n    if(updatesState.syncPending) {\r\n      clearTimeout(updatesState.syncPending.timeout);\r\n      updatesState.syncPending = null;\r\n    }\r\n\r\n    const promise = apiManager.invokeApi('updates.getDifference', {\r\n      pts: updatesState.pts, \r\n      pts_total_limit: first /* && false  */? /* 50 */1200 : undefined,\r\n      date: updatesState.date, \r\n      qts: -1\r\n    }, {\r\n      timeout: 0x7fffffff\r\n    }).then((differenceResult) => {\r\n      this.debug && this.log.debug('Get diff result', differenceResult);\r\n\r\n      if(differenceResult._ === 'updates.differenceEmpty') {\r\n        this.debug && this.log.debug('apply empty diff', differenceResult.seq);\r\n        updatesState.date = differenceResult.date;\r\n        updatesState.seq = differenceResult.seq;\r\n        return;\r\n      }\r\n\r\n      // ! SORRY I'M SORRY I'M SORRY\r\n      if(first) {\r\n        rootScope.dispatchEvent('state_synchronizing');\r\n      }\r\n\r\n      if(differenceResult._ !== 'updates.differenceTooLong') {\r\n        appUsersManager.saveApiUsers(differenceResult.users);\r\n        appChatsManager.saveApiChats(differenceResult.chats);\r\n\r\n        // Should be first because of updateMessageID\r\n        // this.log('applying', differenceResult.other_updates.length, 'other updates')\r\n    \r\n        differenceResult.other_updates.forEach((update) => {\r\n          switch(update._) {\r\n            case 'updateChannelTooLong':\r\n            case 'updateNewChannelMessage':\r\n            case 'updateEditChannelMessage':\r\n              this.processUpdate(update);\r\n              return;\r\n          }\r\n          \r\n          this.saveUpdate(update);\r\n        });\r\n\r\n        // this.log('applying', differenceResult.new_messages.length, 'new messages')\r\n        differenceResult.new_messages.forEach((apiMessage) => {\r\n          this.saveUpdate({\r\n            _: 'updateNewMessage',\r\n            message: apiMessage,\r\n            pts: updatesState.pts,\r\n            pts_count: 0\r\n          });\r\n        });\r\n\r\n        const nextState = differenceResult._ === 'updates.difference' ? differenceResult.state : differenceResult.intermediate_state;\r\n        updatesState.seq = nextState.seq;\r\n        updatesState.pts = nextState.pts;\r\n        updatesState.date = nextState.date;\r\n      } else {\r\n        updatesState.pts = differenceResult.pts;\r\n        updatesState.date = (Date.now() / 1000 | 0) + serverTimeManager.serverTimeOffset;\r\n        delete updatesState.seq;\r\n        \r\n        this.channelStates = {};\r\n        \r\n        this.log.warn('getDifference:', differenceResult._);\r\n        rootScope.dispatchEvent('state_cleared');\r\n      }\r\n  \r\n      // this.log('apply diff', updatesState.seq, updatesState.pts)\r\n  \r\n      if(differenceResult._ === 'updates.differenceSlice') {\r\n        return this.getDifference();\r\n      } else {\r\n        this.debug && this.log.debug('finished get diff');\r\n      }\r\n    });\r\n\r\n    if(!wasSyncing) {\r\n      this.justAName(updatesState, promise);\r\n    }\r\n  \r\n    return promise;\r\n  }\r\n\r\n  private getChannelDifference(channelId: number): Promise<void> {\r\n    const channelState = this.getChannelState(channelId);\r\n    const wasSyncing = channelState.syncLoading;\r\n    if(!wasSyncing) {\r\n      channelState.pendingPtsUpdates = [];\r\n    }\r\n\r\n    if(channelState.syncPending) {\r\n      clearTimeout(channelState.syncPending.timeout);\r\n      channelState.syncPending = null;\r\n    }\r\n\r\n    //this.log.trace('Get channel diff', appChatsManager.getChat(channelId), channelState.pts);\r\n    const promise = apiManager.invokeApi('updates.getChannelDifference', {\r\n      channel: appChatsManager.getChannelInput(channelId),\r\n      filter: {_: 'channelMessagesFilterEmpty'},\r\n      pts: channelState.pts,\r\n      limit: 30\r\n    }, {timeout: 0x7fffffff}).then((differenceResult) => {\r\n      this.debug && this.log.debug('Get channel diff result', differenceResult)\r\n      channelState.pts = 'pts' in differenceResult ? differenceResult.pts : undefined;\r\n  \r\n      if(differenceResult._ === 'updates.channelDifferenceEmpty') {\r\n        this.debug && this.log.debug('apply channel empty diff', differenceResult);\r\n        return;\r\n      }\r\n  \r\n      if(differenceResult._ === 'updates.channelDifferenceTooLong') {\r\n        this.debug && this.log.debug('channel diff too long', differenceResult);\r\n        delete this.channelStates[channelId];\r\n\r\n        // @ts-ignore\r\n        this.saveUpdate({_: 'updateChannelReload', channel_id: channelId});\r\n        return;\r\n      }\r\n  \r\n      appUsersManager.saveApiUsers(differenceResult.users);\r\n      appChatsManager.saveApiChats(differenceResult.chats);\r\n  \r\n      // Should be first because of updateMessageID\r\n      this.debug && this.log.debug('applying', differenceResult.other_updates.length, 'channel other updates');\r\n      differenceResult.other_updates.forEach((update) => {\r\n        this.saveUpdate(update);\r\n      });\r\n  \r\n      this.debug && this.log.debug('applying', differenceResult.new_messages.length, 'channel new messages');\r\n      differenceResult.new_messages.forEach((apiMessage) => {\r\n        this.saveUpdate({\r\n          _: 'updateNewChannelMessage',\r\n          message: apiMessage,\r\n          pts: channelState.pts,\r\n          pts_count: 0\r\n        });\r\n      });\r\n  \r\n      this.debug && this.log.debug('apply channel diff', channelState.pts);\r\n  \r\n      if(differenceResult._ === 'updates.channelDifference' &&\r\n        !differenceResult.pFlags['final']) {\r\n        return this.getChannelDifference(channelId);\r\n      } else {\r\n        this.debug && this.log.debug('finished channel get diff');\r\n      }\r\n    });\r\n\r\n    if(!wasSyncing) {\r\n      this.justAName(channelState, promise, channelId);\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  private justAName(state: UpdatesState, promise: UpdatesState['syncLoading'], channelId?: number) {\r\n    state.syncLoading = promise;\r\n    rootScope.dispatchEvent('state_synchronizing', channelId);\r\n\r\n    promise.then(() => {\r\n      state.syncLoading = null;\r\n      rootScope.dispatchEvent('state_synchronized', channelId);\r\n    }, () => {\r\n      state.syncLoading = null;\r\n    });\r\n  }\r\n  \r\n  public addChannelState(channelId: number, pts: number) {\r\n    if(!pts) {\r\n      throw new Error('Add channel state without pts ' + channelId);\r\n    }\r\n\r\n    if(!(channelId in this.channelStates)) {\r\n      this.channelStates[channelId] = {\r\n        pts,\r\n        pendingPtsUpdates: [],\r\n        syncPending: null,\r\n        syncLoading: null\r\n      };\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getChannelState(channelId: number, pts?: number) {\r\n    if(this.channelStates[channelId] === undefined) {\r\n      this.addChannelState(channelId, pts);\r\n    }\r\n\r\n    return this.channelStates[channelId];\r\n  }\r\n\r\n  private processUpdate(update: any, options: Partial<{\r\n    date: number,\r\n    seq: number,\r\n    seqStart: number/* ,\r\n    ignoreSyncLoading: boolean */\r\n  }> = {}) {\r\n    let channelId = 0;\r\n    switch(update._) {\r\n      case 'updateNewChannelMessage':\r\n      case 'updateEditChannelMessage':\r\n        channelId = -appPeersManager.getPeerId(update.message.peer_id);\r\n        break;\r\n      case 'updateDeleteChannelMessages':\r\n        channelId = update.channel_id;\r\n        break;\r\n      case 'updateChannelTooLong':\r\n        channelId = update.channel_id;\r\n        if(!(channelId in this.channelStates)) {\r\n          return false;\r\n        }\r\n        break;\r\n    }\r\n  \r\n    const curState = channelId ? this.getChannelState(channelId, update.pts) : this.updatesState;\r\n  \r\n    // this.log.log('process', channelId, curState.pts, update)\r\n  \r\n    if(curState.syncLoading/*  && !options.ignoreSyncLoading */) {\r\n      return false;\r\n    }\r\n  \r\n    if(update._ === 'updateChannelTooLong') {\r\n      if(!curState.lastPtsUpdateTime ||\r\n          curState.lastPtsUpdateTime < (Date.now() - SYNC_DELAY)) {\r\n        // this.log.trace('channel too long, get diff', channelId, update)\r\n        this.getChannelDifference(channelId);\r\n      }\r\n      return false;\r\n    }\r\n  \r\n    if(update._ === 'updateNewMessage' ||\r\n        update._ === 'updateEditMessage' ||\r\n        update._ === 'updateNewChannelMessage' ||\r\n        update._ === 'updateEditChannelMessage') {\r\n      const message = update.message;\r\n      const toPeerId = appPeersManager.getPeerId(message.peer_id);\r\n      const fwdHeader = message.fwd_from || {};\r\n      let reason: any = false;\r\n      if(message.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(message.from_id), message.pFlags.post/* || channelId*/) && (reason = 'author') ||\r\n          fwdHeader.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(fwdHeader.from_id), !!fwdHeader.channel_id) && (reason = 'fwdAuthor') ||\r\n          fwdHeader.channel_id && !appChatsManager.hasChat(fwdHeader.channel_id, true) && (reason = 'fwdChannel') ||\r\n          toPeerId > 0 && !appUsersManager.hasUser(toPeerId) && (reason = 'toPeer User') ||\r\n          toPeerId < 0 && !appChatsManager.hasChat(-toPeerId) && (reason = 'toPeer Chat')) {\r\n        this.log.warn('Not enough data for message update', toPeerId, reason, message)\r\n        if(channelId && appChatsManager.hasChat(channelId)) {\r\n          this.getChannelDifference(channelId);\r\n        } else {\r\n          this.forceGetDifference();\r\n        }\r\n        return false;\r\n      }\r\n    } else if(channelId && !appChatsManager.hasChat(channelId)) {\r\n      // this.log.log('skip update, missing channel', channelId, update)\r\n      return false;\r\n    }\r\n  \r\n    let popPts: boolean;\r\n    let popSeq: boolean;\r\n  \r\n    if(update.pts) {\r\n      const newPts = curState.pts + (update.pts_count || 0);\r\n      if(newPts < update.pts) {\r\n        this.debug && this.log.warn('Pts hole', curState, update, channelId && appChatsManager.getChat(channelId));\r\n        curState.pendingPtsUpdates.push(update);\r\n        if(!curState.syncPending && !curState.syncLoading) {\r\n          curState.syncPending = {\r\n            timeout: window.setTimeout(() => {\r\n              curState.syncPending = null;\r\n\r\n              if(curState.syncLoading) {\r\n                return;\r\n              }\r\n\r\n              if(channelId) {\r\n                this.getChannelDifference(channelId);\r\n              } else {\r\n                this.getDifference();\r\n              }\r\n            }, SYNC_DELAY)\r\n          };\r\n        }\r\n\r\n        curState.syncPending.ptsAwaiting = true;\r\n        return false;\r\n      }\r\n\r\n      if(update.pts > curState.pts) {\r\n        curState.pts = update.pts;\r\n        popPts = true;\r\n  \r\n        curState.lastPtsUpdateTime = Date.now();\r\n      } else if(update.pts_count) {\r\n        // this.log.warn('Duplicate update', update)\r\n        return false;\r\n      }\r\n\r\n      if(channelId && options.date && this.updatesState.date < options.date) {\r\n        this.updatesState.date = options.date;\r\n      }\r\n    } else if(!channelId && options.seq > 0) {\r\n      const seq = options.seq;\r\n      const seqStart = options.seqStart || seq;\r\n  \r\n      if(seqStart !== curState.seq + 1) {\r\n        if(seqStart > curState.seq) {\r\n          this.debug && this.log.warn('Seq hole', curState, curState.syncPending && curState.syncPending.seqAwaiting);\r\n  \r\n          if(curState.pendingSeqUpdates[seqStart] === undefined) {\r\n            curState.pendingSeqUpdates[seqStart] = {seq, date: options.date, updates: []};\r\n          }\r\n          curState.pendingSeqUpdates[seqStart].updates.push(update);\r\n  \r\n          if(!curState.syncPending) {\r\n            curState.syncPending = {\r\n              timeout: window.setTimeout(() => {\r\n                curState.syncPending = null;\r\n\r\n                if(curState.syncLoading) {\r\n                  return;\r\n                }\r\n\r\n                this.getDifference();\r\n              }, SYNC_DELAY)\r\n            };\r\n          }\r\n\r\n          if(!curState.syncPending.seqAwaiting ||\r\n            curState.syncPending.seqAwaiting < seqStart) {\r\n            curState.syncPending.seqAwaiting = seqStart;\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n  \r\n      if(curState.seq !== seq) {\r\n        curState.seq = seq;\r\n        if(options.date && curState.date < options.date) {\r\n          curState.date = options.date;\r\n        }\r\n\r\n        popSeq = true;\r\n      }\r\n    }\r\n  \r\n    this.saveUpdate(update);\r\n  \r\n    if(popPts) {\r\n      this.popPendingPtsUpdate(channelId);\r\n    } else if(popSeq) {\r\n      this.popPendingSeqUpdate();\r\n    }\r\n  }\r\n\r\n  public saveUpdate(update: Update) {\r\n    //this.debug && this.log('saveUpdate', update);\r\n    rootScope.dispatchEvent(update._, update as any);\r\n  }\r\n  \r\n  public attach() {\r\n    if(this.attached) return;\r\n\r\n    //return;\r\n\r\n    this.log('attach');\r\n    \r\n    this.attached = true;\r\n\r\n    appStateManager.getState().then(_state => {\r\n      const state = _state.updates;\r\n\r\n      //rootScope.broadcast('state_synchronizing');\r\n      if(!state || !state.pts || !state.date || !state.seq) {\r\n        this.log('will get new state');\r\n\r\n        this.updatesState.syncLoading = new Promise((resolve) => {\r\n          apiManager.invokeApi('updates.getState', {}, {noErrorBox: true}).then((stateResult) => {\r\n            this.updatesState.seq = stateResult.seq;\r\n            this.updatesState.pts = stateResult.pts;\r\n            this.updatesState.date = stateResult.date;\r\n            this.saveUpdatesState();\r\n            //setTimeout(() => {\r\n              this.updatesState.syncLoading = null;\r\n              resolve();\r\n              //rootScope.broadcast('state_synchronized');\r\n            //}, 1000);\r\n        \r\n          // ! for testing\r\n          // updatesState.seq = 1\r\n          // updatesState.pts = stateResult.pts - 5000\r\n          // updatesState.date = 1\r\n          // getDifference()\r\n          });\r\n        });\r\n      } else {\r\n        // ! for testing\r\n        /* state.seq = 1;\r\n        state.pts = state.pts - 15;\r\n        state.date = 1; */\r\n        // state.pts -= 100;\r\n\r\n        Object.assign(this.updatesState, state);\r\n        \r\n        this.log('will get difference', Object.assign({}, state));\r\n        \r\n        this.getDifference(true)/* .finally(() => {\r\n          if(this.updatesState.syncLoading) {\r\n            rootScope.broadcast('state_synchronizing');\r\n          }\r\n        }) */;\r\n      }\r\n\r\n      apiManager.setUpdatesProcessor(this.processUpdateMessage);\r\n\r\n      // this.updatesState.syncLoading.then(() => {\r\n        this.setProxy();\r\n      // });\r\n    });\r\n  }\r\n}\r\n\r\nconst apiUpdatesManager = new ApiUpdatesManager();\r\nMOUNT_CLASS_TO.apiUpdatesManager = apiUpdatesManager;\r\nexport default apiUpdatesManager\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport cleanSearchText from '../helpers/cleanSearchText';\r\n\r\nexport default class SearchIndex<SearchWhat> {\r\n  private fullTexts: Map<SearchWhat, string> = new Map();\r\n\r\n  // minChars can be 0 because it requires at least one word (one symbol) to be found\r\n  constructor(private cleanText = true, private latinize = true, private minChars: number = 0) {\r\n\r\n  }\r\n\r\n  public indexObject(id: SearchWhat, searchText: string) {\r\n    /* if(searchIndex.fullTexts.hasOwnProperty(id)) {\r\n      return false;\r\n    } */\r\n\r\n    if(searchText.trim() && this.cleanText) {\r\n      searchText = cleanSearchText(searchText, this.latinize);\r\n    }\r\n\r\n    if(!searchText) {\r\n      this.fullTexts.delete(id);\r\n      return false;\r\n    }\r\n\r\n    this.fullTexts.set(id, searchText);\r\n    \r\n    /* const shortIndexes = searchIndex.shortIndexes;\r\n    searchText.split(' ').forEach((searchWord) => {\r\n      let len = Math.min(searchWord.length, 3),\r\n        wordPart, i;\r\n      for(i = 1; i <= len; i++) {\r\n        wordPart = searchWord.substr(0, i);\r\n        if(shortIndexes[wordPart] === undefined) {\r\n          shortIndexes[wordPart] = [id];\r\n        } else {\r\n          shortIndexes[wordPart].push(id);\r\n        }\r\n      }\r\n    }); */\r\n  }\r\n\r\n  public search(query: string) {\r\n    const fullTexts = this.fullTexts;\r\n    //const shortIndexes = searchIndex.shortIndexes;\r\n\r\n    if(this.cleanText) {\r\n      query = cleanSearchText(query, this.latinize);\r\n    }\r\n\r\n    const newFoundObjs: Array<{fullText: string, fullTextLength: number, what: SearchWhat, foundChars: number}> = [];\r\n    const queryWords = query.split(' ');\r\n    const queryWordsLength = queryWords.length;\r\n    fullTexts.forEach((fullText, what) => {\r\n      let found = true;\r\n      let foundChars = 0;\r\n      for(let i = 0; i < queryWordsLength; ++i) { // * verify that all words are found\r\n        const word = queryWords[i];\r\n        const idx = fullText.indexOf(word);\r\n        if(idx === -1 || (idx !== 0 && fullText[idx - 1] !== ' ')) { // * search only from word beginning\r\n          found = false;\r\n          break;\r\n        }\r\n\r\n        foundChars += word.length;\r\n      }\r\n\r\n      if(found) {\r\n        foundChars += queryWordsLength - 1;\r\n        const fullTextLength = fullText.length;\r\n        if(this.minChars <= foundChars || fullTextLength <= foundChars) {\r\n          newFoundObjs.push({fullText, fullTextLength, what, foundChars});\r\n        }\r\n      }\r\n    });\r\n\r\n    newFoundObjs.sort((a, b) => a.fullTextLength - b.fullTextLength || b.foundChars - a.foundChars);\r\n\r\n    //newFoundObjs.sort((a, b) => a.fullText.localeCompare(b.fullText));\r\n    const newFoundObjs2: Set<SearchWhat> = new Set(newFoundObjs.map(o => o.what));\r\n\r\n    /* const queryWords = query.split(' ');\r\n    let foundArr: number[];\r\n    for(let i = 0; i < queryWords.length; i++) {\r\n      const newFound = shortIndexes[queryWords[i].substr(0, 3)];\r\n      if(!newFound) {\r\n        foundArr = [];\r\n        break;\r\n      }\r\n      \r\n      if(foundArr === undefined || foundArr.length > newFound.length) {\r\n        foundArr = newFound;\r\n      }\r\n    }\r\n\r\n    for(let j = 0; j < foundArr.length; j++) {\r\n      let found = true;\r\n      let searchText = fullTexts[foundArr[j]];\r\n      for(let i = 0; i < queryWords.length; i++) {\r\n        if(searchText.indexOf(queryWords[i]) === -1) {\r\n          found = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if(found) {\r\n        newFoundObjs[foundArr[j]] = true;\r\n      }\r\n    } */\r\n\r\n    return newFoundObjs2;\r\n  }\r\n}\r\n"],"sourceRoot":""}